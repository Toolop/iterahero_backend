// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id_user    Int          @id @default(autoincrement())
  email      String       @unique
  name       String?
  password   String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  grenhouse  greenhouse[]
  Receive    receive[]
}

model greenhouse {
  id_grenhouse Int        @id @default(autoincrement())
  name         String
  image        String
  location     String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  id_user      Int
  user         user?      @relation(fields: [id_user], references: [id_user])
  sensor       sensor[]
  actuator     actuator[]
}

model sensor {
  id_sensor          Int              @id @default(autoincrement())
  name               String?
  unit_measurement   String
  brand              Int              @unique
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  icon               String
  color              String
  greenhouse         greenhouse?      @relation(fields: [id_greenhouse], references: [id_grenhouse])
  id_greenhouse      Int
  range_min          Int
  range_max          Int
  id_category_sensor Int
  categorySensor     category_sensor? @relation(fields: [id_category_sensor], references: [id_category_sensor])
  notify             Boolean
  calibration        String
  automation         automation[]
  mac_address        mac_address[]
  notification       notification[]
}

model category_sensor {
  id_category_sensor Int      @id @default(autoincrement())
  name               String?
  sensor             sensor[]
}

model actuator {
  id_actuator      Int            @id @default(autoincrement())
  name             String
  status_lifecycle Boolean
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  icon             String
  color            String
  greenhouse       greenhouse?    @relation(fields: [id_greenhouse], references: [id_grenhouse])
  id_greenhouse    Int
  automation       automation[]
  actuator_log     actuator_log[]
  mac_address      mac_address[]
  notification     notification[]
}

model automation {
  id_actuator      Int
  id_sensor        Int
  condition        String
  status_lifecycle Int
  id_automation    Int      @id @default(autoincrement())
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  constanta        Int
  sensor           sensor?  @relation(fields: [id_sensor], references: [id_sensor])
  sensorId_sensor  Int?
  actuator         actuator @relation(fields: [id_actuator], references: [id_actuator])
}

model actuator_log {
  id_actuator_log Int       @id @default(autoincrement())
  created_at      DateTime  @default(now())
  on_off_status   Boolean
  id_actuator     Int
  actuator        actuator? @relation(fields: [id_actuator], references: [id_actuator])
}

model icon {
  id_icon Int    @id @default(autoincrement())
  name    String
  icon    String
  type    String
  color   String
}

model mac_address {
  id_sensor   Int
  id_actuator Int
  actuator    actuator? @relation(fields: [id_actuator], references: [id_actuator])
  sensor      sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  mac_address String
  id_mac      Int       @id @default(autoincrement())
}

model notification {
  id_notification Int       @id @default(autoincrement())
  detail          String
  created_at      DateTime  @default(now())
  type            String
  status          String
  id_actuator     Int
  id_sensor       Int
  actuator        actuator? @relation(fields: [id_actuator], references: [id_actuator])
  sensor          sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  Receive         receive[]
}

model receive {
  id_user         Int
  id_notification Int
  id_receive      Int           @id @default(autoincrement())
  user            user?         @relation(fields: [id_user], references: [id_user])
  notification    notification? @relation(fields: [id_notification], references: [id_notification])
}
