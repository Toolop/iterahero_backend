// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id_user     Int           @id @default(autoincrement())
  email       String        @unique
  name        String
  password    String
  username    String
  role        String
  Greenhouse  greenhouse[]
  Receive     receive[]
  tandon      Tandon[]
  penjadwalan Penjadwalan[]
  created_at  DateTime      @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at  DateTime?     @updatedAt @db.Timestamptz()
}

model greenhouse {
  id_greenhouse Int        @id @default(autoincrement())
  name          String
  image         String
  location      String
  id_user       Int
  User          user?      @relation(fields: [id_user], references: [id_user])
  Sensor        sensor[]
  Actuator      actuator[]
  Camera        camera[]
  created_at    DateTime   @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at    DateTime?  @updatedAt @db.Timestamptz()
}

model sensor {
  id_sensor         Int              @id @default(autoincrement())
  name              String
  brand             String
  range_min         Int?
  range_max         Int?
  notify            Int?
  calibration       String
  AutomationTable   automation[]
  MacAddress        mac_address[]
  Notification      notification[]
  Greenhouse        greenhouse?      @relation(fields: [id_greenhouse], references: [id_greenhouse])
  id_greenhouse     Int?
  tandon            Tandon?          @relation(fields: [tandonId], references: [id])
  tandonId          Int?
  category          Category         @relation(fields: [categoryId], references: [id])
  categoryId        Int
  microcontroller   Microcontroller? @relation(fields: [microcontrollerId], references: [id])
  microcontrollerId Int?
  created_at        DateTime         @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at        DateTime?        @updatedAt @db.Timestamptz()
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String
  type             String
  icon             String
  unit_measurement String?
  color            String
  sensor           sensor[]
  actuator         actuator[]
  created_at       DateTime   @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at       DateTime?  @updatedAt @db.Timestamptz()
}

model actuator {
  id_actuator       Int              @id @default(autoincrement())
  name              String
  status_lifecycle  Int
  automation        Int
  isActive          Boolean          @default(false)
  Greenhouse        greenhouse?      @relation(fields: [id_greenhouse], references: [id_greenhouse])
  id_greenhouse     Int?
  AutomationTable   automation[]
  ActuatorLog       actuator_log[]
  MacAddress        mac_address[]
  Notification      notification[]
  schedule          schedule[]
  category          Category         @relation(fields: [categoryId], references: [id])
  categoryId        Int
  tandon            Tandon?          @relation(fields: [tandonId], references: [id])
  tandonId          Int?
  microcontroller   Microcontroller? @relation(fields: [microcontrollerId], references: [id])
  microcontrollerId Int?
  created_at        DateTime         @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at        DateTime?        @updatedAt @db.Timestamptz()
}

model automation {
  condition        String
  status_lifecycle Int
  id_automation    Int       @id @default(autoincrement())
  constanta        Int
  Sensor           sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  id_sensor        Int
  Actuator         actuator? @relation(fields: [id_actuator], references: [id_actuator])
  id_actuator      Int
  created_at       DateTime  @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at       DateTime? @updatedAt @db.Timestamptz()
}

model schedule {
  id_actuator     Int
  start_time      String
  repeat          Int
  id_schedule     Int       @id @default(autoincrement())
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  duration        Int
  interval        Int
  status_schedule Int
  hour            Int[]
  minute          Int[]
  dayOfWeek       Int[]     @default([0, 1, 2, 3, 4, 5, 6, 7])
  Actuator        actuator? @relation(fields: [id_actuator], references: [id_actuator])
}

model actuator_log {
  id_actuator_log Int       @id @default(autoincrement())
  created_at      DateTime  @default(now())
  on_off_status   Int
  id_actuator     Int
  Actuator        actuator? @relation(fields: [id_actuator], references: [id_actuator])
}

model icon {
  id_icon Int    @id @default(autoincrement())
  name    String
  icon    String
  type    String
  color   String
}

model mac_address {
  id_sensor   Int
  id_actuator Int
  Actuator    actuator? @relation(fields: [id_actuator], references: [id_actuator])
  Sensor      sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  mac_address String
  id_mac      Int       @id @default(autoincrement())
}

model notification {
  id_notification Int       @id @default(autoincrement())
  detail          String
  created_at      DateTime  @default(now())
  type            String
  status          String
  id_actuator     Int?
  id_sensor       Int?
  Actuator        actuator? @relation(fields: [id_actuator], references: [id_actuator])
  Sensor          sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  Receive         receive[]
}

model receive {
  id_user         Int
  id_notification Int
  id_receive      Int           @id @default(autoincrement())
  User            user?         @relation(fields: [id_user], references: [id_user])
  Notification    notification? @relation(fields: [id_notification], references: [id_notification])
}

model camera {
  id_camera     Int          @id @default(autoincrement())
  Greenhouse    greenhouse?  @relation(fields: [id_greenhouse], references: [id_greenhouse])
  id_greenhouse Int
  name          String
  status        Boolean
  Camera_log    camera_log[]
  created_at    DateTime     @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at    DateTime?    @updatedAt @db.Timestamptz()
}

model camera_log {
  id_camera_log Int       @id @default(autoincrement())
  Camera        camera?   @relation(fields: [id_camera], references: [id_camera])
  id_camera     Int
  image         String
  prediction    String
  created_at    DateTime  @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at    DateTime? @updatedAt @db.Timestamptz()
}

model Tandon {
  id                Int              @id @default(autoincrement())
  nama              String
  user              user             @relation(fields: [userId], references: [id_user])
  userId            Int
  status            String
  sensor            sensor[]
  actuator          actuator[]
  penjadwalan       Penjadwalan[]
  microcontroller   Microcontroller? @relation(fields: [microcontrollerId], references: [id])
  microcontrollerId Int?
  created_at        DateTime         @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at        DateTime?        @updatedAt @db.Timestamptz()
}

model Microcontroller {
  id         Int        @id @default(autoincrement())
  nama       String
  brand      String
  status     Boolean
  tandon     Tandon[]
  sensor     sensor[]
  actuator   actuator[]
  tandonId   Int?
  created_at DateTime   @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at DateTime?  @updatedAt @db.Timestamptz()
}

model Resep {
  id          Int           @id @default(autoincrement())
  ppm_min     Int
  ppm_max     Int
  ph_min      Float
  ph_max      Float
  volume      Float
  nama        String
  penjadwalan Penjadwalan[]
  created_at  DateTime      @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at  DateTime?     @updatedAt @db.Timestamptz()
}

model Penjadwalan {
  id         Int       @id @default(autoincrement())
  waktu      String    @unique
  isActive   Boolean
  resep      Resep     @relation(fields: [resepId], references: [id])
  resepId    Int
  tandon     Tandon    @relation(fields: [tandonId], references: [id])
  tandonId   Int
  user       user      @relation(fields: [createdBy], references: [id_user])
  createdBy  Int
  created_at DateTime  @default(dbgenerated("NOW()")) @db.Timestamptz()
  updated_at DateTime? @updatedAt @db.Timestamptz()
}
