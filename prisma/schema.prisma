// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id_user    Int          @id @default(autoincrement())
  email      String       @unique
  name       String
  password   String
  username   String
  created_at DateTime
  updated_at DateTime?
  Greenhouse greenhouse[]
  Receive    receive[]
}

model greenhouse {
  id_greenhouse Int        @id @default(autoincrement())
  name          String
  image         String
  location      String
  created_at    DateTime
  updated_at    DateTime?
  id_user       Int
  User          user?      @relation(fields: [id_user], references: [id_user])
  Sensor        sensor[]
  Actuator      actuator[]
}

model sensor {
  id_sensor          Int              @id @default(autoincrement())
  name               String
  unit_measurement   String?
  brand              String?
  created_at         DateTime
  updated_at         DateTime?
  icon               String?
  color              String?
  Greenhouse         greenhouse?      @relation(fields: [id_greenhouse], references: [id_greenhouse])
  id_greenhouse      Int
  range_min          Int?
  range_max          Int?
  id_category_sensor Int
  categorySensor     category_sensor? @relation(fields: [id_category_sensor], references: [id_category_sensor])
  notify             Int?
  calibration        String?
  detail             String?
  sensor_image       String?
  posisition         String?
  AutomationTable    automation[]
  MacAddress         mac_address[]
  Notification       notification[]
}

model category_sensor {
  id_category_sensor Int      @id @default(autoincrement())
  name               String?
  Sensor             sensor[]
}

model actuator {
  id_actuator      Int            @id @default(autoincrement())
  name             String
  status_lifecycle Int
  created_at       DateTime
  updated_at       DateTime?
  icon             String
  color            String
  automation       Int            @default(0)
  Greenhouse       greenhouse?    @relation(fields: [id_greenhouse], references: [id_greenhouse])
  id_greenhouse    Int
  detailact        String?
  actuator_image   String?
  posisitionact    String?
  AutomationTable  automation[]
  ActuatorLog      actuator_log[]
  MacAddress       mac_address[]
  Notification     notification[]
  schedule         schedule[]
}

model automation {
  id_actuator      Int
  id_sensor        Int
  condition        String
  status_lifecycle Int
  id_automation    Int       @id @default(autoincrement())
  created_at       DateTime
  updated_at       DateTime?
  constanta        Int
  Sensor           sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  Actuator         actuator? @relation(fields: [id_actuator], references: [id_actuator])
}

model schedule {
  id_actuator     Int
  start_time      String
  repeat          Int
  id_schedule     Int       @id @default(autoincrement())
  created_at      DateTime
  updated_at      DateTime?
  duration        Int
  interval        Int
  status_schedule Int
  hour            Int[]
  minute          Int[]
  dayOfWeek       Int[]     @default([0, 1, 2, 3, 4, 5, 6, 7])
  Actuator        actuator? @relation(fields: [id_actuator], references: [id_actuator])
}

model actuator_log {
  id_actuator_log Int       @id @default(autoincrement())
  created_at      DateTime
  on_off_status   Int
  id_actuator     Int
  Actuator        actuator? @relation(fields: [id_actuator], references: [id_actuator])
}

model icon {
  id_icon Int    @id @default(autoincrement())
  name    String
  icon    String
  type    String
  color   String
}

model mac_address {
  id_sensor   Int
  id_actuator Int
  Actuator    actuator? @relation(fields: [id_actuator], references: [id_actuator])
  Sensor      sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  mac_address String
  id_mac      Int       @id @default(autoincrement())
}

model notification {
  id_notification Int       @id @default(autoincrement())
  detail          String
  created_at      DateTime
  type            String
  status          String
  id_actuator     Int?
  id_sensor       Int?
  Actuator        actuator? @relation(fields: [id_actuator], references: [id_actuator])
  Sensor          sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  Receive         receive[]
}

model receive {
  id_user         Int
  id_notification Int
  id_receive      Int           @id @default(autoincrement())
  User            user?         @relation(fields: [id_user], references: [id_user])
  Notification    notification? @relation(fields: [id_notification], references: [id_notification])
}
