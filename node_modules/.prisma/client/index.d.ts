
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id_user: number
  email: string
  name: string | null
  password: string
  created_at: Date
  updated_at: Date
}

/**
 * Model Greenhouse
 * 
 */
export type Greenhouse = {
  id_grenhouse: number
  name: string
  image: string
  location: string
  created_at: Date
  updated_at: Date
  id_user: number
}

/**
 * Model Sensor
 * 
 */
export type Sensor = {
  id_sensor: number
  name: string | null
  unit_measurement: string
  brand: number
  created_at: Date
  updated_at: Date
  icon: string
  color: string
  id_greenhouse: number
  range_min: number
  range_max: number
  id_category_sensor: number
  notify: boolean
  calibration: string
}

/**
 * Model CategorySensor
 * 
 */
export type CategorySensor = {
  id_category_sensor: number
  name: string | null
}

/**
 * Model Actuator
 * 
 */
export type Actuator = {
  id_actuator: number
  name: string
  status_lifecycle: boolean
  created_at: Date
  updated_at: Date
  icon: string
  color: string
  id_greenhouse: number
}

/**
 * Model Automation
 * 
 */
export type Automation = {
  id_actuator: number
  id_sensor: number
  condition: string
  status_lifecycle: number
  id_automation: number
  created_at: Date
  updated_at: Date
  constanta: number
  sensorId_sensor: number | null
}

/**
 * Model ActuatorLog
 * 
 */
export type ActuatorLog = {
  id_actuator_log: number
  created_at: Date
  on_off_status: boolean
  id_actuator: number
  actuatorId_actuator: number | null
}

/**
 * Model Icon
 * 
 */
export type Icon = {
  id_icon: number
  name: string
  icon: string
  type: string
  color: string
}

/**
 * Model MacAddress
 * 
 */
export type MacAddress = {
  id_sensor: number
  id_actuator: number
  mac_address: string
  id_mac: number
}

/**
 * Model Notification
 * 
 */
export type Notification = {
  id_notification: number
  detail: string
  created_at: Date
  type: string
  status: string
  id_actuator: number
  id_sensor: number
}

/**
 * Model Receive
 * 
 */
export type Receive = {
  id_user: number
  id_notification: number
  id_receive: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.greenhouse`: Exposes CRUD operations for the **Greenhouse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Greenhouses
    * const greenhouses = await prisma.greenhouse.findMany()
    * ```
    */
  get greenhouse(): Prisma.GreenhouseDelegate<GlobalReject>;

  /**
   * `prisma.sensor`: Exposes CRUD operations for the **Sensor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sensors
    * const sensors = await prisma.sensor.findMany()
    * ```
    */
  get sensor(): Prisma.SensorDelegate<GlobalReject>;

  /**
   * `prisma.categorySensor`: Exposes CRUD operations for the **CategorySensor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategorySensors
    * const categorySensors = await prisma.categorySensor.findMany()
    * ```
    */
  get categorySensor(): Prisma.CategorySensorDelegate<GlobalReject>;

  /**
   * `prisma.actuator`: Exposes CRUD operations for the **Actuator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Actuators
    * const actuators = await prisma.actuator.findMany()
    * ```
    */
  get actuator(): Prisma.ActuatorDelegate<GlobalReject>;

  /**
   * `prisma.automation`: Exposes CRUD operations for the **Automation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Automations
    * const automations = await prisma.automation.findMany()
    * ```
    */
  get automation(): Prisma.AutomationDelegate<GlobalReject>;

  /**
   * `prisma.actuatorLog`: Exposes CRUD operations for the **ActuatorLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActuatorLogs
    * const actuatorLogs = await prisma.actuatorLog.findMany()
    * ```
    */
  get actuatorLog(): Prisma.ActuatorLogDelegate<GlobalReject>;

  /**
   * `prisma.icon`: Exposes CRUD operations for the **Icon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Icons
    * const icons = await prisma.icon.findMany()
    * ```
    */
  get icon(): Prisma.IconDelegate<GlobalReject>;

  /**
   * `prisma.macAddress`: Exposes CRUD operations for the **MacAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MacAddresses
    * const macAddresses = await prisma.macAddress.findMany()
    * ```
    */
  get macAddress(): Prisma.MacAddressDelegate<GlobalReject>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<GlobalReject>;

  /**
   * `prisma.receive`: Exposes CRUD operations for the **Receive** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receives
    * const receives = await prisma.receive.findMany()
    * ```
    */
  get receive(): Prisma.ReceiveDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Greenhouse: 'Greenhouse',
    Sensor: 'Sensor',
    CategorySensor: 'CategorySensor',
    Actuator: 'Actuator',
    Automation: 'Automation',
    ActuatorLog: 'ActuatorLog',
    Icon: 'Icon',
    MacAddress: 'MacAddress',
    Notification: 'Notification',
    Receive: 'Receive'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    grenhouse: number
    Receive: number
  }

  export type UserCountOutputTypeSelect = {
    grenhouse?: boolean
    Receive?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type GreenhouseCountOutputType
   */


  export type GreenhouseCountOutputType = {
    sensor: number
    Actuator: number
  }

  export type GreenhouseCountOutputTypeSelect = {
    sensor?: boolean
    Actuator?: boolean
  }

  export type GreenhouseCountOutputTypeGetPayload<S extends boolean | null | undefined | GreenhouseCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GreenhouseCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GreenhouseCountOutputTypeArgs)
    ? GreenhouseCountOutputType 
    : S extends { select: any } & (GreenhouseCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GreenhouseCountOutputType ? GreenhouseCountOutputType[P] : never
  } 
      : GreenhouseCountOutputType




  // Custom InputTypes

  /**
   * GreenhouseCountOutputType without action
   */
  export type GreenhouseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GreenhouseCountOutputType
     */
    select?: GreenhouseCountOutputTypeSelect | null
  }



  /**
   * Count Type SensorCountOutputType
   */


  export type SensorCountOutputType = {
    automation: number
    MacAddress: number
    Notification: number
  }

  export type SensorCountOutputTypeSelect = {
    automation?: boolean
    MacAddress?: boolean
    Notification?: boolean
  }

  export type SensorCountOutputTypeGetPayload<S extends boolean | null | undefined | SensorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SensorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SensorCountOutputTypeArgs)
    ? SensorCountOutputType 
    : S extends { select: any } & (SensorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SensorCountOutputType ? SensorCountOutputType[P] : never
  } 
      : SensorCountOutputType




  // Custom InputTypes

  /**
   * SensorCountOutputType without action
   */
  export type SensorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SensorCountOutputType
     */
    select?: SensorCountOutputTypeSelect | null
  }



  /**
   * Count Type CategorySensorCountOutputType
   */


  export type CategorySensorCountOutputType = {
    Sensor: number
  }

  export type CategorySensorCountOutputTypeSelect = {
    Sensor?: boolean
  }

  export type CategorySensorCountOutputTypeGetPayload<S extends boolean | null | undefined | CategorySensorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategorySensorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategorySensorCountOutputTypeArgs)
    ? CategorySensorCountOutputType 
    : S extends { select: any } & (CategorySensorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CategorySensorCountOutputType ? CategorySensorCountOutputType[P] : never
  } 
      : CategorySensorCountOutputType




  // Custom InputTypes

  /**
   * CategorySensorCountOutputType without action
   */
  export type CategorySensorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategorySensorCountOutputType
     */
    select?: CategorySensorCountOutputTypeSelect | null
  }



  /**
   * Count Type ActuatorCountOutputType
   */


  export type ActuatorCountOutputType = {
    automation: number
    actuatorLog: number
    MacAddress: number
    Notification: number
  }

  export type ActuatorCountOutputTypeSelect = {
    automation?: boolean
    actuatorLog?: boolean
    MacAddress?: boolean
    Notification?: boolean
  }

  export type ActuatorCountOutputTypeGetPayload<S extends boolean | null | undefined | ActuatorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ActuatorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ActuatorCountOutputTypeArgs)
    ? ActuatorCountOutputType 
    : S extends { select: any } & (ActuatorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ActuatorCountOutputType ? ActuatorCountOutputType[P] : never
  } 
      : ActuatorCountOutputType




  // Custom InputTypes

  /**
   * ActuatorCountOutputType without action
   */
  export type ActuatorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ActuatorCountOutputType
     */
    select?: ActuatorCountOutputTypeSelect | null
  }



  /**
   * Count Type NotificationCountOutputType
   */


  export type NotificationCountOutputType = {
    Receive: number
  }

  export type NotificationCountOutputTypeSelect = {
    Receive?: boolean
  }

  export type NotificationCountOutputTypeGetPayload<S extends boolean | null | undefined | NotificationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? NotificationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (NotificationCountOutputTypeArgs)
    ? NotificationCountOutputType 
    : S extends { select: any } & (NotificationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof NotificationCountOutputType ? NotificationCountOutputType[P] : never
  } 
      : NotificationCountOutputType




  // Custom InputTypes

  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the NotificationCountOutputType
     */
    select?: NotificationCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id_user: number | null
  }

  export type UserSumAggregateOutputType = {
    id_user: number | null
  }

  export type UserMinAggregateOutputType = {
    id_user: number | null
    email: string | null
    name: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id_user: number | null
    email: string | null
    name: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id_user: number
    email: number
    name: number
    password: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id_user?: true
  }

  export type UserSumAggregateInputType = {
    id_user?: true
  }

  export type UserMinAggregateInputType = {
    id_user?: true
    email?: true
    name?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id_user?: true
    email?: true
    name?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id_user?: true
    email?: true
    name?: true
    password?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id_user: number
    email: string
    name: string | null
    password: string
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id_user?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    grenhouse?: boolean | User$grenhouseArgs
    Receive?: boolean | User$ReceiveArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    grenhouse?: boolean | User$grenhouseArgs
    Receive?: boolean | User$ReceiveArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'grenhouse' ? Array < GreenhouseGetPayload<S['include'][P]>>  :
        P extends 'Receive' ? Array < ReceiveGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'grenhouse' ? Array < GreenhouseGetPayload<S['select'][P]>>  :
        P extends 'Receive' ? Array < ReceiveGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const userWithId_userOnly = await prisma.user.findMany({ select: { id_user: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    grenhouse<T extends User$grenhouseArgs= {}>(args?: Subset<T, User$grenhouseArgs>): Prisma.PrismaPromise<Array<GreenhouseGetPayload<T>>| Null>;

    Receive<T extends User$ReceiveArgs= {}>(args?: Subset<T, User$ReceiveArgs>): Prisma.PrismaPromise<Array<ReceiveGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.grenhouse
   */
  export type User$grenhouseArgs = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    where?: GreenhouseWhereInput
    orderBy?: Enumerable<GreenhouseOrderByWithRelationInput>
    cursor?: GreenhouseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GreenhouseScalarFieldEnum>
  }


  /**
   * User.Receive
   */
  export type User$ReceiveArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    where?: ReceiveWhereInput
    orderBy?: Enumerable<ReceiveOrderByWithRelationInput>
    cursor?: ReceiveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReceiveScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Greenhouse
   */


  export type AggregateGreenhouse = {
    _count: GreenhouseCountAggregateOutputType | null
    _avg: GreenhouseAvgAggregateOutputType | null
    _sum: GreenhouseSumAggregateOutputType | null
    _min: GreenhouseMinAggregateOutputType | null
    _max: GreenhouseMaxAggregateOutputType | null
  }

  export type GreenhouseAvgAggregateOutputType = {
    id_grenhouse: number | null
    id_user: number | null
  }

  export type GreenhouseSumAggregateOutputType = {
    id_grenhouse: number | null
    id_user: number | null
  }

  export type GreenhouseMinAggregateOutputType = {
    id_grenhouse: number | null
    name: string | null
    image: string | null
    location: string | null
    created_at: Date | null
    updated_at: Date | null
    id_user: number | null
  }

  export type GreenhouseMaxAggregateOutputType = {
    id_grenhouse: number | null
    name: string | null
    image: string | null
    location: string | null
    created_at: Date | null
    updated_at: Date | null
    id_user: number | null
  }

  export type GreenhouseCountAggregateOutputType = {
    id_grenhouse: number
    name: number
    image: number
    location: number
    created_at: number
    updated_at: number
    id_user: number
    _all: number
  }


  export type GreenhouseAvgAggregateInputType = {
    id_grenhouse?: true
    id_user?: true
  }

  export type GreenhouseSumAggregateInputType = {
    id_grenhouse?: true
    id_user?: true
  }

  export type GreenhouseMinAggregateInputType = {
    id_grenhouse?: true
    name?: true
    image?: true
    location?: true
    created_at?: true
    updated_at?: true
    id_user?: true
  }

  export type GreenhouseMaxAggregateInputType = {
    id_grenhouse?: true
    name?: true
    image?: true
    location?: true
    created_at?: true
    updated_at?: true
    id_user?: true
  }

  export type GreenhouseCountAggregateInputType = {
    id_grenhouse?: true
    name?: true
    image?: true
    location?: true
    created_at?: true
    updated_at?: true
    id_user?: true
    _all?: true
  }

  export type GreenhouseAggregateArgs = {
    /**
     * Filter which Greenhouse to aggregate.
     */
    where?: GreenhouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Greenhouses to fetch.
     */
    orderBy?: Enumerable<GreenhouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GreenhouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Greenhouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Greenhouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Greenhouses
    **/
    _count?: true | GreenhouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GreenhouseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GreenhouseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GreenhouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GreenhouseMaxAggregateInputType
  }

  export type GetGreenhouseAggregateType<T extends GreenhouseAggregateArgs> = {
        [P in keyof T & keyof AggregateGreenhouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGreenhouse[P]>
      : GetScalarType<T[P], AggregateGreenhouse[P]>
  }




  export type GreenhouseGroupByArgs = {
    where?: GreenhouseWhereInput
    orderBy?: Enumerable<GreenhouseOrderByWithAggregationInput>
    by: GreenhouseScalarFieldEnum[]
    having?: GreenhouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GreenhouseCountAggregateInputType | true
    _avg?: GreenhouseAvgAggregateInputType
    _sum?: GreenhouseSumAggregateInputType
    _min?: GreenhouseMinAggregateInputType
    _max?: GreenhouseMaxAggregateInputType
  }


  export type GreenhouseGroupByOutputType = {
    id_grenhouse: number
    name: string
    image: string
    location: string
    created_at: Date
    updated_at: Date
    id_user: number
    _count: GreenhouseCountAggregateOutputType | null
    _avg: GreenhouseAvgAggregateOutputType | null
    _sum: GreenhouseSumAggregateOutputType | null
    _min: GreenhouseMinAggregateOutputType | null
    _max: GreenhouseMaxAggregateOutputType | null
  }

  type GetGreenhouseGroupByPayload<T extends GreenhouseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GreenhouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GreenhouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GreenhouseGroupByOutputType[P]>
            : GetScalarType<T[P], GreenhouseGroupByOutputType[P]>
        }
      >
    >


  export type GreenhouseSelect = {
    id_grenhouse?: boolean
    name?: boolean
    image?: boolean
    location?: boolean
    created_at?: boolean
    updated_at?: boolean
    id_user?: boolean
    user?: boolean | UserArgs
    sensor?: boolean | Greenhouse$sensorArgs
    Actuator?: boolean | Greenhouse$ActuatorArgs
    _count?: boolean | GreenhouseCountOutputTypeArgs
  }


  export type GreenhouseInclude = {
    user?: boolean | UserArgs
    sensor?: boolean | Greenhouse$sensorArgs
    Actuator?: boolean | Greenhouse$ActuatorArgs
    _count?: boolean | GreenhouseCountOutputTypeArgs
  }

  export type GreenhouseGetPayload<S extends boolean | null | undefined | GreenhouseArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Greenhouse :
    S extends undefined ? never :
    S extends { include: any } & (GreenhouseArgs | GreenhouseFindManyArgs)
    ? Greenhouse  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :
        P extends 'sensor' ? Array < SensorGetPayload<S['include'][P]>>  :
        P extends 'Actuator' ? Array < ActuatorGetPayload<S['include'][P]>>  :
        P extends '_count' ? GreenhouseCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GreenhouseArgs | GreenhouseFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :
        P extends 'sensor' ? Array < SensorGetPayload<S['select'][P]>>  :
        P extends 'Actuator' ? Array < ActuatorGetPayload<S['select'][P]>>  :
        P extends '_count' ? GreenhouseCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Greenhouse ? Greenhouse[P] : never
  } 
      : Greenhouse


  type GreenhouseCountArgs = 
    Omit<GreenhouseFindManyArgs, 'select' | 'include'> & {
      select?: GreenhouseCountAggregateInputType | true
    }

  export interface GreenhouseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Greenhouse that matches the filter.
     * @param {GreenhouseFindUniqueArgs} args - Arguments to find a Greenhouse
     * @example
     * // Get one Greenhouse
     * const greenhouse = await prisma.greenhouse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GreenhouseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GreenhouseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Greenhouse'> extends True ? Prisma__GreenhouseClient<GreenhouseGetPayload<T>> : Prisma__GreenhouseClient<GreenhouseGetPayload<T> | null, null>

    /**
     * Find one Greenhouse that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GreenhouseFindUniqueOrThrowArgs} args - Arguments to find a Greenhouse
     * @example
     * // Get one Greenhouse
     * const greenhouse = await prisma.greenhouse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GreenhouseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GreenhouseFindUniqueOrThrowArgs>
    ): Prisma__GreenhouseClient<GreenhouseGetPayload<T>>

    /**
     * Find the first Greenhouse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenhouseFindFirstArgs} args - Arguments to find a Greenhouse
     * @example
     * // Get one Greenhouse
     * const greenhouse = await prisma.greenhouse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GreenhouseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GreenhouseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Greenhouse'> extends True ? Prisma__GreenhouseClient<GreenhouseGetPayload<T>> : Prisma__GreenhouseClient<GreenhouseGetPayload<T> | null, null>

    /**
     * Find the first Greenhouse that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenhouseFindFirstOrThrowArgs} args - Arguments to find a Greenhouse
     * @example
     * // Get one Greenhouse
     * const greenhouse = await prisma.greenhouse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GreenhouseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GreenhouseFindFirstOrThrowArgs>
    ): Prisma__GreenhouseClient<GreenhouseGetPayload<T>>

    /**
     * Find zero or more Greenhouses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenhouseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Greenhouses
     * const greenhouses = await prisma.greenhouse.findMany()
     * 
     * // Get first 10 Greenhouses
     * const greenhouses = await prisma.greenhouse.findMany({ take: 10 })
     * 
     * // Only select the `id_grenhouse`
     * const greenhouseWithId_grenhouseOnly = await prisma.greenhouse.findMany({ select: { id_grenhouse: true } })
     * 
    **/
    findMany<T extends GreenhouseFindManyArgs>(
      args?: SelectSubset<T, GreenhouseFindManyArgs>
    ): Prisma.PrismaPromise<Array<GreenhouseGetPayload<T>>>

    /**
     * Create a Greenhouse.
     * @param {GreenhouseCreateArgs} args - Arguments to create a Greenhouse.
     * @example
     * // Create one Greenhouse
     * const Greenhouse = await prisma.greenhouse.create({
     *   data: {
     *     // ... data to create a Greenhouse
     *   }
     * })
     * 
    **/
    create<T extends GreenhouseCreateArgs>(
      args: SelectSubset<T, GreenhouseCreateArgs>
    ): Prisma__GreenhouseClient<GreenhouseGetPayload<T>>

    /**
     * Create many Greenhouses.
     *     @param {GreenhouseCreateManyArgs} args - Arguments to create many Greenhouses.
     *     @example
     *     // Create many Greenhouses
     *     const greenhouse = await prisma.greenhouse.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GreenhouseCreateManyArgs>(
      args?: SelectSubset<T, GreenhouseCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Greenhouse.
     * @param {GreenhouseDeleteArgs} args - Arguments to delete one Greenhouse.
     * @example
     * // Delete one Greenhouse
     * const Greenhouse = await prisma.greenhouse.delete({
     *   where: {
     *     // ... filter to delete one Greenhouse
     *   }
     * })
     * 
    **/
    delete<T extends GreenhouseDeleteArgs>(
      args: SelectSubset<T, GreenhouseDeleteArgs>
    ): Prisma__GreenhouseClient<GreenhouseGetPayload<T>>

    /**
     * Update one Greenhouse.
     * @param {GreenhouseUpdateArgs} args - Arguments to update one Greenhouse.
     * @example
     * // Update one Greenhouse
     * const greenhouse = await prisma.greenhouse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GreenhouseUpdateArgs>(
      args: SelectSubset<T, GreenhouseUpdateArgs>
    ): Prisma__GreenhouseClient<GreenhouseGetPayload<T>>

    /**
     * Delete zero or more Greenhouses.
     * @param {GreenhouseDeleteManyArgs} args - Arguments to filter Greenhouses to delete.
     * @example
     * // Delete a few Greenhouses
     * const { count } = await prisma.greenhouse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GreenhouseDeleteManyArgs>(
      args?: SelectSubset<T, GreenhouseDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Greenhouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenhouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Greenhouses
     * const greenhouse = await prisma.greenhouse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GreenhouseUpdateManyArgs>(
      args: SelectSubset<T, GreenhouseUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Greenhouse.
     * @param {GreenhouseUpsertArgs} args - Arguments to update or create a Greenhouse.
     * @example
     * // Update or create a Greenhouse
     * const greenhouse = await prisma.greenhouse.upsert({
     *   create: {
     *     // ... data to create a Greenhouse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Greenhouse we want to update
     *   }
     * })
    **/
    upsert<T extends GreenhouseUpsertArgs>(
      args: SelectSubset<T, GreenhouseUpsertArgs>
    ): Prisma__GreenhouseClient<GreenhouseGetPayload<T>>

    /**
     * Count the number of Greenhouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenhouseCountArgs} args - Arguments to filter Greenhouses to count.
     * @example
     * // Count the number of Greenhouses
     * const count = await prisma.greenhouse.count({
     *   where: {
     *     // ... the filter for the Greenhouses we want to count
     *   }
     * })
    **/
    count<T extends GreenhouseCountArgs>(
      args?: Subset<T, GreenhouseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GreenhouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Greenhouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenhouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GreenhouseAggregateArgs>(args: Subset<T, GreenhouseAggregateArgs>): Prisma.PrismaPromise<GetGreenhouseAggregateType<T>>

    /**
     * Group by Greenhouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenhouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GreenhouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GreenhouseGroupByArgs['orderBy'] }
        : { orderBy?: GreenhouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GreenhouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGreenhouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Greenhouse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GreenhouseClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    sensor<T extends Greenhouse$sensorArgs= {}>(args?: Subset<T, Greenhouse$sensorArgs>): Prisma.PrismaPromise<Array<SensorGetPayload<T>>| Null>;

    Actuator<T extends Greenhouse$ActuatorArgs= {}>(args?: Subset<T, Greenhouse$ActuatorArgs>): Prisma.PrismaPromise<Array<ActuatorGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Greenhouse base type for findUnique actions
   */
  export type GreenhouseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    /**
     * Filter, which Greenhouse to fetch.
     */
    where: GreenhouseWhereUniqueInput
  }

  /**
   * Greenhouse findUnique
   */
  export interface GreenhouseFindUniqueArgs extends GreenhouseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Greenhouse findUniqueOrThrow
   */
  export type GreenhouseFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    /**
     * Filter, which Greenhouse to fetch.
     */
    where: GreenhouseWhereUniqueInput
  }


  /**
   * Greenhouse base type for findFirst actions
   */
  export type GreenhouseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    /**
     * Filter, which Greenhouse to fetch.
     */
    where?: GreenhouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Greenhouses to fetch.
     */
    orderBy?: Enumerable<GreenhouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Greenhouses.
     */
    cursor?: GreenhouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Greenhouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Greenhouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Greenhouses.
     */
    distinct?: Enumerable<GreenhouseScalarFieldEnum>
  }

  /**
   * Greenhouse findFirst
   */
  export interface GreenhouseFindFirstArgs extends GreenhouseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Greenhouse findFirstOrThrow
   */
  export type GreenhouseFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    /**
     * Filter, which Greenhouse to fetch.
     */
    where?: GreenhouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Greenhouses to fetch.
     */
    orderBy?: Enumerable<GreenhouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Greenhouses.
     */
    cursor?: GreenhouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Greenhouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Greenhouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Greenhouses.
     */
    distinct?: Enumerable<GreenhouseScalarFieldEnum>
  }


  /**
   * Greenhouse findMany
   */
  export type GreenhouseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    /**
     * Filter, which Greenhouses to fetch.
     */
    where?: GreenhouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Greenhouses to fetch.
     */
    orderBy?: Enumerable<GreenhouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Greenhouses.
     */
    cursor?: GreenhouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Greenhouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Greenhouses.
     */
    skip?: number
    distinct?: Enumerable<GreenhouseScalarFieldEnum>
  }


  /**
   * Greenhouse create
   */
  export type GreenhouseCreateArgs = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    /**
     * The data needed to create a Greenhouse.
     */
    data: XOR<GreenhouseCreateInput, GreenhouseUncheckedCreateInput>
  }


  /**
   * Greenhouse createMany
   */
  export type GreenhouseCreateManyArgs = {
    /**
     * The data used to create many Greenhouses.
     */
    data: Enumerable<GreenhouseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Greenhouse update
   */
  export type GreenhouseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    /**
     * The data needed to update a Greenhouse.
     */
    data: XOR<GreenhouseUpdateInput, GreenhouseUncheckedUpdateInput>
    /**
     * Choose, which Greenhouse to update.
     */
    where: GreenhouseWhereUniqueInput
  }


  /**
   * Greenhouse updateMany
   */
  export type GreenhouseUpdateManyArgs = {
    /**
     * The data used to update Greenhouses.
     */
    data: XOR<GreenhouseUpdateManyMutationInput, GreenhouseUncheckedUpdateManyInput>
    /**
     * Filter which Greenhouses to update
     */
    where?: GreenhouseWhereInput
  }


  /**
   * Greenhouse upsert
   */
  export type GreenhouseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    /**
     * The filter to search for the Greenhouse to update in case it exists.
     */
    where: GreenhouseWhereUniqueInput
    /**
     * In case the Greenhouse found by the `where` argument doesn't exist, create a new Greenhouse with this data.
     */
    create: XOR<GreenhouseCreateInput, GreenhouseUncheckedCreateInput>
    /**
     * In case the Greenhouse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GreenhouseUpdateInput, GreenhouseUncheckedUpdateInput>
  }


  /**
   * Greenhouse delete
   */
  export type GreenhouseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
    /**
     * Filter which Greenhouse to delete.
     */
    where: GreenhouseWhereUniqueInput
  }


  /**
   * Greenhouse deleteMany
   */
  export type GreenhouseDeleteManyArgs = {
    /**
     * Filter which Greenhouses to delete
     */
    where?: GreenhouseWhereInput
  }


  /**
   * Greenhouse.sensor
   */
  export type Greenhouse$sensorArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    where?: SensorWhereInput
    orderBy?: Enumerable<SensorOrderByWithRelationInput>
    cursor?: SensorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SensorScalarFieldEnum>
  }


  /**
   * Greenhouse.Actuator
   */
  export type Greenhouse$ActuatorArgs = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    where?: ActuatorWhereInput
    orderBy?: Enumerable<ActuatorOrderByWithRelationInput>
    cursor?: ActuatorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ActuatorScalarFieldEnum>
  }


  /**
   * Greenhouse without action
   */
  export type GreenhouseArgs = {
    /**
     * Select specific fields to fetch from the Greenhouse
     */
    select?: GreenhouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GreenhouseInclude | null
  }



  /**
   * Model Sensor
   */


  export type AggregateSensor = {
    _count: SensorCountAggregateOutputType | null
    _avg: SensorAvgAggregateOutputType | null
    _sum: SensorSumAggregateOutputType | null
    _min: SensorMinAggregateOutputType | null
    _max: SensorMaxAggregateOutputType | null
  }

  export type SensorAvgAggregateOutputType = {
    id_sensor: number | null
    brand: number | null
    id_greenhouse: number | null
    range_min: number | null
    range_max: number | null
    id_category_sensor: number | null
  }

  export type SensorSumAggregateOutputType = {
    id_sensor: number | null
    brand: number | null
    id_greenhouse: number | null
    range_min: number | null
    range_max: number | null
    id_category_sensor: number | null
  }

  export type SensorMinAggregateOutputType = {
    id_sensor: number | null
    name: string | null
    unit_measurement: string | null
    brand: number | null
    created_at: Date | null
    updated_at: Date | null
    icon: string | null
    color: string | null
    id_greenhouse: number | null
    range_min: number | null
    range_max: number | null
    id_category_sensor: number | null
    notify: boolean | null
    calibration: string | null
  }

  export type SensorMaxAggregateOutputType = {
    id_sensor: number | null
    name: string | null
    unit_measurement: string | null
    brand: number | null
    created_at: Date | null
    updated_at: Date | null
    icon: string | null
    color: string | null
    id_greenhouse: number | null
    range_min: number | null
    range_max: number | null
    id_category_sensor: number | null
    notify: boolean | null
    calibration: string | null
  }

  export type SensorCountAggregateOutputType = {
    id_sensor: number
    name: number
    unit_measurement: number
    brand: number
    created_at: number
    updated_at: number
    icon: number
    color: number
    id_greenhouse: number
    range_min: number
    range_max: number
    id_category_sensor: number
    notify: number
    calibration: number
    _all: number
  }


  export type SensorAvgAggregateInputType = {
    id_sensor?: true
    brand?: true
    id_greenhouse?: true
    range_min?: true
    range_max?: true
    id_category_sensor?: true
  }

  export type SensorSumAggregateInputType = {
    id_sensor?: true
    brand?: true
    id_greenhouse?: true
    range_min?: true
    range_max?: true
    id_category_sensor?: true
  }

  export type SensorMinAggregateInputType = {
    id_sensor?: true
    name?: true
    unit_measurement?: true
    brand?: true
    created_at?: true
    updated_at?: true
    icon?: true
    color?: true
    id_greenhouse?: true
    range_min?: true
    range_max?: true
    id_category_sensor?: true
    notify?: true
    calibration?: true
  }

  export type SensorMaxAggregateInputType = {
    id_sensor?: true
    name?: true
    unit_measurement?: true
    brand?: true
    created_at?: true
    updated_at?: true
    icon?: true
    color?: true
    id_greenhouse?: true
    range_min?: true
    range_max?: true
    id_category_sensor?: true
    notify?: true
    calibration?: true
  }

  export type SensorCountAggregateInputType = {
    id_sensor?: true
    name?: true
    unit_measurement?: true
    brand?: true
    created_at?: true
    updated_at?: true
    icon?: true
    color?: true
    id_greenhouse?: true
    range_min?: true
    range_max?: true
    id_category_sensor?: true
    notify?: true
    calibration?: true
    _all?: true
  }

  export type SensorAggregateArgs = {
    /**
     * Filter which Sensor to aggregate.
     */
    where?: SensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensors to fetch.
     */
    orderBy?: Enumerable<SensorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sensors
    **/
    _count?: true | SensorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SensorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SensorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SensorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SensorMaxAggregateInputType
  }

  export type GetSensorAggregateType<T extends SensorAggregateArgs> = {
        [P in keyof T & keyof AggregateSensor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSensor[P]>
      : GetScalarType<T[P], AggregateSensor[P]>
  }




  export type SensorGroupByArgs = {
    where?: SensorWhereInput
    orderBy?: Enumerable<SensorOrderByWithAggregationInput>
    by: SensorScalarFieldEnum[]
    having?: SensorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SensorCountAggregateInputType | true
    _avg?: SensorAvgAggregateInputType
    _sum?: SensorSumAggregateInputType
    _min?: SensorMinAggregateInputType
    _max?: SensorMaxAggregateInputType
  }


  export type SensorGroupByOutputType = {
    id_sensor: number
    name: string | null
    unit_measurement: string
    brand: number
    created_at: Date
    updated_at: Date
    icon: string
    color: string
    id_greenhouse: number
    range_min: number
    range_max: number
    id_category_sensor: number
    notify: boolean
    calibration: string
    _count: SensorCountAggregateOutputType | null
    _avg: SensorAvgAggregateOutputType | null
    _sum: SensorSumAggregateOutputType | null
    _min: SensorMinAggregateOutputType | null
    _max: SensorMaxAggregateOutputType | null
  }

  type GetSensorGroupByPayload<T extends SensorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SensorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SensorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SensorGroupByOutputType[P]>
            : GetScalarType<T[P], SensorGroupByOutputType[P]>
        }
      >
    >


  export type SensorSelect = {
    id_sensor?: boolean
    name?: boolean
    unit_measurement?: boolean
    brand?: boolean
    created_at?: boolean
    updated_at?: boolean
    icon?: boolean
    color?: boolean
    id_greenhouse?: boolean
    range_min?: boolean
    range_max?: boolean
    id_category_sensor?: boolean
    notify?: boolean
    calibration?: boolean
    greenhouse?: boolean | GreenhouseArgs
    categorySensor?: boolean | CategorySensorArgs
    automation?: boolean | Sensor$automationArgs
    MacAddress?: boolean | Sensor$MacAddressArgs
    Notification?: boolean | Sensor$NotificationArgs
    _count?: boolean | SensorCountOutputTypeArgs
  }


  export type SensorInclude = {
    greenhouse?: boolean | GreenhouseArgs
    categorySensor?: boolean | CategorySensorArgs
    automation?: boolean | Sensor$automationArgs
    MacAddress?: boolean | Sensor$MacAddressArgs
    Notification?: boolean | Sensor$NotificationArgs
    _count?: boolean | SensorCountOutputTypeArgs
  }

  export type SensorGetPayload<S extends boolean | null | undefined | SensorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Sensor :
    S extends undefined ? never :
    S extends { include: any } & (SensorArgs | SensorFindManyArgs)
    ? Sensor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'greenhouse' ? GreenhouseGetPayload<S['include'][P]> | null :
        P extends 'categorySensor' ? CategorySensorGetPayload<S['include'][P]> | null :
        P extends 'automation' ? Array < AutomationGetPayload<S['include'][P]>>  :
        P extends 'MacAddress' ? Array < MacAddressGetPayload<S['include'][P]>>  :
        P extends 'Notification' ? Array < NotificationGetPayload<S['include'][P]>>  :
        P extends '_count' ? SensorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SensorArgs | SensorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'greenhouse' ? GreenhouseGetPayload<S['select'][P]> | null :
        P extends 'categorySensor' ? CategorySensorGetPayload<S['select'][P]> | null :
        P extends 'automation' ? Array < AutomationGetPayload<S['select'][P]>>  :
        P extends 'MacAddress' ? Array < MacAddressGetPayload<S['select'][P]>>  :
        P extends 'Notification' ? Array < NotificationGetPayload<S['select'][P]>>  :
        P extends '_count' ? SensorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Sensor ? Sensor[P] : never
  } 
      : Sensor


  type SensorCountArgs = 
    Omit<SensorFindManyArgs, 'select' | 'include'> & {
      select?: SensorCountAggregateInputType | true
    }

  export interface SensorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Sensor that matches the filter.
     * @param {SensorFindUniqueArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SensorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SensorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sensor'> extends True ? Prisma__SensorClient<SensorGetPayload<T>> : Prisma__SensorClient<SensorGetPayload<T> | null, null>

    /**
     * Find one Sensor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SensorFindUniqueOrThrowArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SensorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SensorFindUniqueOrThrowArgs>
    ): Prisma__SensorClient<SensorGetPayload<T>>

    /**
     * Find the first Sensor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorFindFirstArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SensorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SensorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sensor'> extends True ? Prisma__SensorClient<SensorGetPayload<T>> : Prisma__SensorClient<SensorGetPayload<T> | null, null>

    /**
     * Find the first Sensor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorFindFirstOrThrowArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SensorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SensorFindFirstOrThrowArgs>
    ): Prisma__SensorClient<SensorGetPayload<T>>

    /**
     * Find zero or more Sensors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sensors
     * const sensors = await prisma.sensor.findMany()
     * 
     * // Get first 10 Sensors
     * const sensors = await prisma.sensor.findMany({ take: 10 })
     * 
     * // Only select the `id_sensor`
     * const sensorWithId_sensorOnly = await prisma.sensor.findMany({ select: { id_sensor: true } })
     * 
    **/
    findMany<T extends SensorFindManyArgs>(
      args?: SelectSubset<T, SensorFindManyArgs>
    ): Prisma.PrismaPromise<Array<SensorGetPayload<T>>>

    /**
     * Create a Sensor.
     * @param {SensorCreateArgs} args - Arguments to create a Sensor.
     * @example
     * // Create one Sensor
     * const Sensor = await prisma.sensor.create({
     *   data: {
     *     // ... data to create a Sensor
     *   }
     * })
     * 
    **/
    create<T extends SensorCreateArgs>(
      args: SelectSubset<T, SensorCreateArgs>
    ): Prisma__SensorClient<SensorGetPayload<T>>

    /**
     * Create many Sensors.
     *     @param {SensorCreateManyArgs} args - Arguments to create many Sensors.
     *     @example
     *     // Create many Sensors
     *     const sensor = await prisma.sensor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SensorCreateManyArgs>(
      args?: SelectSubset<T, SensorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sensor.
     * @param {SensorDeleteArgs} args - Arguments to delete one Sensor.
     * @example
     * // Delete one Sensor
     * const Sensor = await prisma.sensor.delete({
     *   where: {
     *     // ... filter to delete one Sensor
     *   }
     * })
     * 
    **/
    delete<T extends SensorDeleteArgs>(
      args: SelectSubset<T, SensorDeleteArgs>
    ): Prisma__SensorClient<SensorGetPayload<T>>

    /**
     * Update one Sensor.
     * @param {SensorUpdateArgs} args - Arguments to update one Sensor.
     * @example
     * // Update one Sensor
     * const sensor = await prisma.sensor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SensorUpdateArgs>(
      args: SelectSubset<T, SensorUpdateArgs>
    ): Prisma__SensorClient<SensorGetPayload<T>>

    /**
     * Delete zero or more Sensors.
     * @param {SensorDeleteManyArgs} args - Arguments to filter Sensors to delete.
     * @example
     * // Delete a few Sensors
     * const { count } = await prisma.sensor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SensorDeleteManyArgs>(
      args?: SelectSubset<T, SensorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sensors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sensors
     * const sensor = await prisma.sensor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SensorUpdateManyArgs>(
      args: SelectSubset<T, SensorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sensor.
     * @param {SensorUpsertArgs} args - Arguments to update or create a Sensor.
     * @example
     * // Update or create a Sensor
     * const sensor = await prisma.sensor.upsert({
     *   create: {
     *     // ... data to create a Sensor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sensor we want to update
     *   }
     * })
    **/
    upsert<T extends SensorUpsertArgs>(
      args: SelectSubset<T, SensorUpsertArgs>
    ): Prisma__SensorClient<SensorGetPayload<T>>

    /**
     * Count the number of Sensors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorCountArgs} args - Arguments to filter Sensors to count.
     * @example
     * // Count the number of Sensors
     * const count = await prisma.sensor.count({
     *   where: {
     *     // ... the filter for the Sensors we want to count
     *   }
     * })
    **/
    count<T extends SensorCountArgs>(
      args?: Subset<T, SensorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SensorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sensor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SensorAggregateArgs>(args: Subset<T, SensorAggregateArgs>): Prisma.PrismaPromise<GetSensorAggregateType<T>>

    /**
     * Group by Sensor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SensorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SensorGroupByArgs['orderBy'] }
        : { orderBy?: SensorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SensorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSensorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Sensor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SensorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    greenhouse<T extends GreenhouseArgs= {}>(args?: Subset<T, GreenhouseArgs>): Prisma__GreenhouseClient<GreenhouseGetPayload<T> | Null>;

    categorySensor<T extends CategorySensorArgs= {}>(args?: Subset<T, CategorySensorArgs>): Prisma__CategorySensorClient<CategorySensorGetPayload<T> | Null>;

    automation<T extends Sensor$automationArgs= {}>(args?: Subset<T, Sensor$automationArgs>): Prisma.PrismaPromise<Array<AutomationGetPayload<T>>| Null>;

    MacAddress<T extends Sensor$MacAddressArgs= {}>(args?: Subset<T, Sensor$MacAddressArgs>): Prisma.PrismaPromise<Array<MacAddressGetPayload<T>>| Null>;

    Notification<T extends Sensor$NotificationArgs= {}>(args?: Subset<T, Sensor$NotificationArgs>): Prisma.PrismaPromise<Array<NotificationGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Sensor base type for findUnique actions
   */
  export type SensorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    /**
     * Filter, which Sensor to fetch.
     */
    where: SensorWhereUniqueInput
  }

  /**
   * Sensor findUnique
   */
  export interface SensorFindUniqueArgs extends SensorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sensor findUniqueOrThrow
   */
  export type SensorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    /**
     * Filter, which Sensor to fetch.
     */
    where: SensorWhereUniqueInput
  }


  /**
   * Sensor base type for findFirst actions
   */
  export type SensorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    /**
     * Filter, which Sensor to fetch.
     */
    where?: SensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensors to fetch.
     */
    orderBy?: Enumerable<SensorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sensors.
     */
    cursor?: SensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sensors.
     */
    distinct?: Enumerable<SensorScalarFieldEnum>
  }

  /**
   * Sensor findFirst
   */
  export interface SensorFindFirstArgs extends SensorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sensor findFirstOrThrow
   */
  export type SensorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    /**
     * Filter, which Sensor to fetch.
     */
    where?: SensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensors to fetch.
     */
    orderBy?: Enumerable<SensorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sensors.
     */
    cursor?: SensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sensors.
     */
    distinct?: Enumerable<SensorScalarFieldEnum>
  }


  /**
   * Sensor findMany
   */
  export type SensorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    /**
     * Filter, which Sensors to fetch.
     */
    where?: SensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensors to fetch.
     */
    orderBy?: Enumerable<SensorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sensors.
     */
    cursor?: SensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensors.
     */
    skip?: number
    distinct?: Enumerable<SensorScalarFieldEnum>
  }


  /**
   * Sensor create
   */
  export type SensorCreateArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    /**
     * The data needed to create a Sensor.
     */
    data: XOR<SensorCreateInput, SensorUncheckedCreateInput>
  }


  /**
   * Sensor createMany
   */
  export type SensorCreateManyArgs = {
    /**
     * The data used to create many Sensors.
     */
    data: Enumerable<SensorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Sensor update
   */
  export type SensorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    /**
     * The data needed to update a Sensor.
     */
    data: XOR<SensorUpdateInput, SensorUncheckedUpdateInput>
    /**
     * Choose, which Sensor to update.
     */
    where: SensorWhereUniqueInput
  }


  /**
   * Sensor updateMany
   */
  export type SensorUpdateManyArgs = {
    /**
     * The data used to update Sensors.
     */
    data: XOR<SensorUpdateManyMutationInput, SensorUncheckedUpdateManyInput>
    /**
     * Filter which Sensors to update
     */
    where?: SensorWhereInput
  }


  /**
   * Sensor upsert
   */
  export type SensorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    /**
     * The filter to search for the Sensor to update in case it exists.
     */
    where: SensorWhereUniqueInput
    /**
     * In case the Sensor found by the `where` argument doesn't exist, create a new Sensor with this data.
     */
    create: XOR<SensorCreateInput, SensorUncheckedCreateInput>
    /**
     * In case the Sensor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SensorUpdateInput, SensorUncheckedUpdateInput>
  }


  /**
   * Sensor delete
   */
  export type SensorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    /**
     * Filter which Sensor to delete.
     */
    where: SensorWhereUniqueInput
  }


  /**
   * Sensor deleteMany
   */
  export type SensorDeleteManyArgs = {
    /**
     * Filter which Sensors to delete
     */
    where?: SensorWhereInput
  }


  /**
   * Sensor.automation
   */
  export type Sensor$automationArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    where?: AutomationWhereInput
    orderBy?: Enumerable<AutomationOrderByWithRelationInput>
    cursor?: AutomationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AutomationScalarFieldEnum>
  }


  /**
   * Sensor.MacAddress
   */
  export type Sensor$MacAddressArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    where?: MacAddressWhereInput
    orderBy?: Enumerable<MacAddressOrderByWithRelationInput>
    cursor?: MacAddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MacAddressScalarFieldEnum>
  }


  /**
   * Sensor.Notification
   */
  export type Sensor$NotificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Sensor without action
   */
  export type SensorArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
  }



  /**
   * Model CategorySensor
   */


  export type AggregateCategorySensor = {
    _count: CategorySensorCountAggregateOutputType | null
    _avg: CategorySensorAvgAggregateOutputType | null
    _sum: CategorySensorSumAggregateOutputType | null
    _min: CategorySensorMinAggregateOutputType | null
    _max: CategorySensorMaxAggregateOutputType | null
  }

  export type CategorySensorAvgAggregateOutputType = {
    id_category_sensor: number | null
  }

  export type CategorySensorSumAggregateOutputType = {
    id_category_sensor: number | null
  }

  export type CategorySensorMinAggregateOutputType = {
    id_category_sensor: number | null
    name: string | null
  }

  export type CategorySensorMaxAggregateOutputType = {
    id_category_sensor: number | null
    name: string | null
  }

  export type CategorySensorCountAggregateOutputType = {
    id_category_sensor: number
    name: number
    _all: number
  }


  export type CategorySensorAvgAggregateInputType = {
    id_category_sensor?: true
  }

  export type CategorySensorSumAggregateInputType = {
    id_category_sensor?: true
  }

  export type CategorySensorMinAggregateInputType = {
    id_category_sensor?: true
    name?: true
  }

  export type CategorySensorMaxAggregateInputType = {
    id_category_sensor?: true
    name?: true
  }

  export type CategorySensorCountAggregateInputType = {
    id_category_sensor?: true
    name?: true
    _all?: true
  }

  export type CategorySensorAggregateArgs = {
    /**
     * Filter which CategorySensor to aggregate.
     */
    where?: CategorySensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategorySensors to fetch.
     */
    orderBy?: Enumerable<CategorySensorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategorySensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategorySensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategorySensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategorySensors
    **/
    _count?: true | CategorySensorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategorySensorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySensorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategorySensorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategorySensorMaxAggregateInputType
  }

  export type GetCategorySensorAggregateType<T extends CategorySensorAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorySensor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorySensor[P]>
      : GetScalarType<T[P], AggregateCategorySensor[P]>
  }




  export type CategorySensorGroupByArgs = {
    where?: CategorySensorWhereInput
    orderBy?: Enumerable<CategorySensorOrderByWithAggregationInput>
    by: CategorySensorScalarFieldEnum[]
    having?: CategorySensorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategorySensorCountAggregateInputType | true
    _avg?: CategorySensorAvgAggregateInputType
    _sum?: CategorySensorSumAggregateInputType
    _min?: CategorySensorMinAggregateInputType
    _max?: CategorySensorMaxAggregateInputType
  }


  export type CategorySensorGroupByOutputType = {
    id_category_sensor: number
    name: string | null
    _count: CategorySensorCountAggregateOutputType | null
    _avg: CategorySensorAvgAggregateOutputType | null
    _sum: CategorySensorSumAggregateOutputType | null
    _min: CategorySensorMinAggregateOutputType | null
    _max: CategorySensorMaxAggregateOutputType | null
  }

  type GetCategorySensorGroupByPayload<T extends CategorySensorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategorySensorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategorySensorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategorySensorGroupByOutputType[P]>
            : GetScalarType<T[P], CategorySensorGroupByOutputType[P]>
        }
      >
    >


  export type CategorySensorSelect = {
    id_category_sensor?: boolean
    name?: boolean
    Sensor?: boolean | CategorySensor$SensorArgs
    _count?: boolean | CategorySensorCountOutputTypeArgs
  }


  export type CategorySensorInclude = {
    Sensor?: boolean | CategorySensor$SensorArgs
    _count?: boolean | CategorySensorCountOutputTypeArgs
  }

  export type CategorySensorGetPayload<S extends boolean | null | undefined | CategorySensorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategorySensor :
    S extends undefined ? never :
    S extends { include: any } & (CategorySensorArgs | CategorySensorFindManyArgs)
    ? CategorySensor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Sensor' ? Array < SensorGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategorySensorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CategorySensorArgs | CategorySensorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Sensor' ? Array < SensorGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategorySensorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof CategorySensor ? CategorySensor[P] : never
  } 
      : CategorySensor


  type CategorySensorCountArgs = 
    Omit<CategorySensorFindManyArgs, 'select' | 'include'> & {
      select?: CategorySensorCountAggregateInputType | true
    }

  export interface CategorySensorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one CategorySensor that matches the filter.
     * @param {CategorySensorFindUniqueArgs} args - Arguments to find a CategorySensor
     * @example
     * // Get one CategorySensor
     * const categorySensor = await prisma.categorySensor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategorySensorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategorySensorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CategorySensor'> extends True ? Prisma__CategorySensorClient<CategorySensorGetPayload<T>> : Prisma__CategorySensorClient<CategorySensorGetPayload<T> | null, null>

    /**
     * Find one CategorySensor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategorySensorFindUniqueOrThrowArgs} args - Arguments to find a CategorySensor
     * @example
     * // Get one CategorySensor
     * const categorySensor = await prisma.categorySensor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategorySensorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategorySensorFindUniqueOrThrowArgs>
    ): Prisma__CategorySensorClient<CategorySensorGetPayload<T>>

    /**
     * Find the first CategorySensor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorySensorFindFirstArgs} args - Arguments to find a CategorySensor
     * @example
     * // Get one CategorySensor
     * const categorySensor = await prisma.categorySensor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategorySensorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategorySensorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CategorySensor'> extends True ? Prisma__CategorySensorClient<CategorySensorGetPayload<T>> : Prisma__CategorySensorClient<CategorySensorGetPayload<T> | null, null>

    /**
     * Find the first CategorySensor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorySensorFindFirstOrThrowArgs} args - Arguments to find a CategorySensor
     * @example
     * // Get one CategorySensor
     * const categorySensor = await prisma.categorySensor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategorySensorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategorySensorFindFirstOrThrowArgs>
    ): Prisma__CategorySensorClient<CategorySensorGetPayload<T>>

    /**
     * Find zero or more CategorySensors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorySensorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategorySensors
     * const categorySensors = await prisma.categorySensor.findMany()
     * 
     * // Get first 10 CategorySensors
     * const categorySensors = await prisma.categorySensor.findMany({ take: 10 })
     * 
     * // Only select the `id_category_sensor`
     * const categorySensorWithId_category_sensorOnly = await prisma.categorySensor.findMany({ select: { id_category_sensor: true } })
     * 
    **/
    findMany<T extends CategorySensorFindManyArgs>(
      args?: SelectSubset<T, CategorySensorFindManyArgs>
    ): Prisma.PrismaPromise<Array<CategorySensorGetPayload<T>>>

    /**
     * Create a CategorySensor.
     * @param {CategorySensorCreateArgs} args - Arguments to create a CategorySensor.
     * @example
     * // Create one CategorySensor
     * const CategorySensor = await prisma.categorySensor.create({
     *   data: {
     *     // ... data to create a CategorySensor
     *   }
     * })
     * 
    **/
    create<T extends CategorySensorCreateArgs>(
      args: SelectSubset<T, CategorySensorCreateArgs>
    ): Prisma__CategorySensorClient<CategorySensorGetPayload<T>>

    /**
     * Create many CategorySensors.
     *     @param {CategorySensorCreateManyArgs} args - Arguments to create many CategorySensors.
     *     @example
     *     // Create many CategorySensors
     *     const categorySensor = await prisma.categorySensor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategorySensorCreateManyArgs>(
      args?: SelectSubset<T, CategorySensorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CategorySensor.
     * @param {CategorySensorDeleteArgs} args - Arguments to delete one CategorySensor.
     * @example
     * // Delete one CategorySensor
     * const CategorySensor = await prisma.categorySensor.delete({
     *   where: {
     *     // ... filter to delete one CategorySensor
     *   }
     * })
     * 
    **/
    delete<T extends CategorySensorDeleteArgs>(
      args: SelectSubset<T, CategorySensorDeleteArgs>
    ): Prisma__CategorySensorClient<CategorySensorGetPayload<T>>

    /**
     * Update one CategorySensor.
     * @param {CategorySensorUpdateArgs} args - Arguments to update one CategorySensor.
     * @example
     * // Update one CategorySensor
     * const categorySensor = await prisma.categorySensor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategorySensorUpdateArgs>(
      args: SelectSubset<T, CategorySensorUpdateArgs>
    ): Prisma__CategorySensorClient<CategorySensorGetPayload<T>>

    /**
     * Delete zero or more CategorySensors.
     * @param {CategorySensorDeleteManyArgs} args - Arguments to filter CategorySensors to delete.
     * @example
     * // Delete a few CategorySensors
     * const { count } = await prisma.categorySensor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategorySensorDeleteManyArgs>(
      args?: SelectSubset<T, CategorySensorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategorySensors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorySensorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategorySensors
     * const categorySensor = await prisma.categorySensor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategorySensorUpdateManyArgs>(
      args: SelectSubset<T, CategorySensorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategorySensor.
     * @param {CategorySensorUpsertArgs} args - Arguments to update or create a CategorySensor.
     * @example
     * // Update or create a CategorySensor
     * const categorySensor = await prisma.categorySensor.upsert({
     *   create: {
     *     // ... data to create a CategorySensor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategorySensor we want to update
     *   }
     * })
    **/
    upsert<T extends CategorySensorUpsertArgs>(
      args: SelectSubset<T, CategorySensorUpsertArgs>
    ): Prisma__CategorySensorClient<CategorySensorGetPayload<T>>

    /**
     * Count the number of CategorySensors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorySensorCountArgs} args - Arguments to filter CategorySensors to count.
     * @example
     * // Count the number of CategorySensors
     * const count = await prisma.categorySensor.count({
     *   where: {
     *     // ... the filter for the CategorySensors we want to count
     *   }
     * })
    **/
    count<T extends CategorySensorCountArgs>(
      args?: Subset<T, CategorySensorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategorySensorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategorySensor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorySensorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategorySensorAggregateArgs>(args: Subset<T, CategorySensorAggregateArgs>): Prisma.PrismaPromise<GetCategorySensorAggregateType<T>>

    /**
     * Group by CategorySensor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorySensorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategorySensorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategorySensorGroupByArgs['orderBy'] }
        : { orderBy?: CategorySensorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategorySensorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorySensorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CategorySensor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategorySensorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Sensor<T extends CategorySensor$SensorArgs= {}>(args?: Subset<T, CategorySensor$SensorArgs>): Prisma.PrismaPromise<Array<SensorGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CategorySensor base type for findUnique actions
   */
  export type CategorySensorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
    /**
     * Filter, which CategorySensor to fetch.
     */
    where: CategorySensorWhereUniqueInput
  }

  /**
   * CategorySensor findUnique
   */
  export interface CategorySensorFindUniqueArgs extends CategorySensorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategorySensor findUniqueOrThrow
   */
  export type CategorySensorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
    /**
     * Filter, which CategorySensor to fetch.
     */
    where: CategorySensorWhereUniqueInput
  }


  /**
   * CategorySensor base type for findFirst actions
   */
  export type CategorySensorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
    /**
     * Filter, which CategorySensor to fetch.
     */
    where?: CategorySensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategorySensors to fetch.
     */
    orderBy?: Enumerable<CategorySensorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategorySensors.
     */
    cursor?: CategorySensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategorySensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategorySensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategorySensors.
     */
    distinct?: Enumerable<CategorySensorScalarFieldEnum>
  }

  /**
   * CategorySensor findFirst
   */
  export interface CategorySensorFindFirstArgs extends CategorySensorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategorySensor findFirstOrThrow
   */
  export type CategorySensorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
    /**
     * Filter, which CategorySensor to fetch.
     */
    where?: CategorySensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategorySensors to fetch.
     */
    orderBy?: Enumerable<CategorySensorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategorySensors.
     */
    cursor?: CategorySensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategorySensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategorySensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategorySensors.
     */
    distinct?: Enumerable<CategorySensorScalarFieldEnum>
  }


  /**
   * CategorySensor findMany
   */
  export type CategorySensorFindManyArgs = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
    /**
     * Filter, which CategorySensors to fetch.
     */
    where?: CategorySensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategorySensors to fetch.
     */
    orderBy?: Enumerable<CategorySensorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategorySensors.
     */
    cursor?: CategorySensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategorySensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategorySensors.
     */
    skip?: number
    distinct?: Enumerable<CategorySensorScalarFieldEnum>
  }


  /**
   * CategorySensor create
   */
  export type CategorySensorCreateArgs = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
    /**
     * The data needed to create a CategorySensor.
     */
    data: XOR<CategorySensorCreateInput, CategorySensorUncheckedCreateInput>
  }


  /**
   * CategorySensor createMany
   */
  export type CategorySensorCreateManyArgs = {
    /**
     * The data used to create many CategorySensors.
     */
    data: Enumerable<CategorySensorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CategorySensor update
   */
  export type CategorySensorUpdateArgs = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
    /**
     * The data needed to update a CategorySensor.
     */
    data: XOR<CategorySensorUpdateInput, CategorySensorUncheckedUpdateInput>
    /**
     * Choose, which CategorySensor to update.
     */
    where: CategorySensorWhereUniqueInput
  }


  /**
   * CategorySensor updateMany
   */
  export type CategorySensorUpdateManyArgs = {
    /**
     * The data used to update CategorySensors.
     */
    data: XOR<CategorySensorUpdateManyMutationInput, CategorySensorUncheckedUpdateManyInput>
    /**
     * Filter which CategorySensors to update
     */
    where?: CategorySensorWhereInput
  }


  /**
   * CategorySensor upsert
   */
  export type CategorySensorUpsertArgs = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
    /**
     * The filter to search for the CategorySensor to update in case it exists.
     */
    where: CategorySensorWhereUniqueInput
    /**
     * In case the CategorySensor found by the `where` argument doesn't exist, create a new CategorySensor with this data.
     */
    create: XOR<CategorySensorCreateInput, CategorySensorUncheckedCreateInput>
    /**
     * In case the CategorySensor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategorySensorUpdateInput, CategorySensorUncheckedUpdateInput>
  }


  /**
   * CategorySensor delete
   */
  export type CategorySensorDeleteArgs = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
    /**
     * Filter which CategorySensor to delete.
     */
    where: CategorySensorWhereUniqueInput
  }


  /**
   * CategorySensor deleteMany
   */
  export type CategorySensorDeleteManyArgs = {
    /**
     * Filter which CategorySensors to delete
     */
    where?: CategorySensorWhereInput
  }


  /**
   * CategorySensor.Sensor
   */
  export type CategorySensor$SensorArgs = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude | null
    where?: SensorWhereInput
    orderBy?: Enumerable<SensorOrderByWithRelationInput>
    cursor?: SensorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SensorScalarFieldEnum>
  }


  /**
   * CategorySensor without action
   */
  export type CategorySensorArgs = {
    /**
     * Select specific fields to fetch from the CategorySensor
     */
    select?: CategorySensorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorySensorInclude | null
  }



  /**
   * Model Actuator
   */


  export type AggregateActuator = {
    _count: ActuatorCountAggregateOutputType | null
    _avg: ActuatorAvgAggregateOutputType | null
    _sum: ActuatorSumAggregateOutputType | null
    _min: ActuatorMinAggregateOutputType | null
    _max: ActuatorMaxAggregateOutputType | null
  }

  export type ActuatorAvgAggregateOutputType = {
    id_actuator: number | null
    id_greenhouse: number | null
  }

  export type ActuatorSumAggregateOutputType = {
    id_actuator: number | null
    id_greenhouse: number | null
  }

  export type ActuatorMinAggregateOutputType = {
    id_actuator: number | null
    name: string | null
    status_lifecycle: boolean | null
    created_at: Date | null
    updated_at: Date | null
    icon: string | null
    color: string | null
    id_greenhouse: number | null
  }

  export type ActuatorMaxAggregateOutputType = {
    id_actuator: number | null
    name: string | null
    status_lifecycle: boolean | null
    created_at: Date | null
    updated_at: Date | null
    icon: string | null
    color: string | null
    id_greenhouse: number | null
  }

  export type ActuatorCountAggregateOutputType = {
    id_actuator: number
    name: number
    status_lifecycle: number
    created_at: number
    updated_at: number
    icon: number
    color: number
    id_greenhouse: number
    _all: number
  }


  export type ActuatorAvgAggregateInputType = {
    id_actuator?: true
    id_greenhouse?: true
  }

  export type ActuatorSumAggregateInputType = {
    id_actuator?: true
    id_greenhouse?: true
  }

  export type ActuatorMinAggregateInputType = {
    id_actuator?: true
    name?: true
    status_lifecycle?: true
    created_at?: true
    updated_at?: true
    icon?: true
    color?: true
    id_greenhouse?: true
  }

  export type ActuatorMaxAggregateInputType = {
    id_actuator?: true
    name?: true
    status_lifecycle?: true
    created_at?: true
    updated_at?: true
    icon?: true
    color?: true
    id_greenhouse?: true
  }

  export type ActuatorCountAggregateInputType = {
    id_actuator?: true
    name?: true
    status_lifecycle?: true
    created_at?: true
    updated_at?: true
    icon?: true
    color?: true
    id_greenhouse?: true
    _all?: true
  }

  export type ActuatorAggregateArgs = {
    /**
     * Filter which Actuator to aggregate.
     */
    where?: ActuatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actuators to fetch.
     */
    orderBy?: Enumerable<ActuatorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActuatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actuators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actuators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Actuators
    **/
    _count?: true | ActuatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActuatorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActuatorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActuatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActuatorMaxAggregateInputType
  }

  export type GetActuatorAggregateType<T extends ActuatorAggregateArgs> = {
        [P in keyof T & keyof AggregateActuator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActuator[P]>
      : GetScalarType<T[P], AggregateActuator[P]>
  }




  export type ActuatorGroupByArgs = {
    where?: ActuatorWhereInput
    orderBy?: Enumerable<ActuatorOrderByWithAggregationInput>
    by: ActuatorScalarFieldEnum[]
    having?: ActuatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActuatorCountAggregateInputType | true
    _avg?: ActuatorAvgAggregateInputType
    _sum?: ActuatorSumAggregateInputType
    _min?: ActuatorMinAggregateInputType
    _max?: ActuatorMaxAggregateInputType
  }


  export type ActuatorGroupByOutputType = {
    id_actuator: number
    name: string
    status_lifecycle: boolean
    created_at: Date
    updated_at: Date
    icon: string
    color: string
    id_greenhouse: number
    _count: ActuatorCountAggregateOutputType | null
    _avg: ActuatorAvgAggregateOutputType | null
    _sum: ActuatorSumAggregateOutputType | null
    _min: ActuatorMinAggregateOutputType | null
    _max: ActuatorMaxAggregateOutputType | null
  }

  type GetActuatorGroupByPayload<T extends ActuatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ActuatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActuatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActuatorGroupByOutputType[P]>
            : GetScalarType<T[P], ActuatorGroupByOutputType[P]>
        }
      >
    >


  export type ActuatorSelect = {
    id_actuator?: boolean
    name?: boolean
    status_lifecycle?: boolean
    created_at?: boolean
    updated_at?: boolean
    icon?: boolean
    color?: boolean
    id_greenhouse?: boolean
    greenhouse?: boolean | GreenhouseArgs
    automation?: boolean | Actuator$automationArgs
    actuatorLog?: boolean | Actuator$actuatorLogArgs
    MacAddress?: boolean | Actuator$MacAddressArgs
    Notification?: boolean | Actuator$NotificationArgs
    _count?: boolean | ActuatorCountOutputTypeArgs
  }


  export type ActuatorInclude = {
    greenhouse?: boolean | GreenhouseArgs
    automation?: boolean | Actuator$automationArgs
    actuatorLog?: boolean | Actuator$actuatorLogArgs
    MacAddress?: boolean | Actuator$MacAddressArgs
    Notification?: boolean | Actuator$NotificationArgs
    _count?: boolean | ActuatorCountOutputTypeArgs
  }

  export type ActuatorGetPayload<S extends boolean | null | undefined | ActuatorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Actuator :
    S extends undefined ? never :
    S extends { include: any } & (ActuatorArgs | ActuatorFindManyArgs)
    ? Actuator  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'greenhouse' ? GreenhouseGetPayload<S['include'][P]> | null :
        P extends 'automation' ? Array < AutomationGetPayload<S['include'][P]>>  :
        P extends 'actuatorLog' ? Array < ActuatorLogGetPayload<S['include'][P]>>  :
        P extends 'MacAddress' ? Array < MacAddressGetPayload<S['include'][P]>>  :
        P extends 'Notification' ? Array < NotificationGetPayload<S['include'][P]>>  :
        P extends '_count' ? ActuatorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ActuatorArgs | ActuatorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'greenhouse' ? GreenhouseGetPayload<S['select'][P]> | null :
        P extends 'automation' ? Array < AutomationGetPayload<S['select'][P]>>  :
        P extends 'actuatorLog' ? Array < ActuatorLogGetPayload<S['select'][P]>>  :
        P extends 'MacAddress' ? Array < MacAddressGetPayload<S['select'][P]>>  :
        P extends 'Notification' ? Array < NotificationGetPayload<S['select'][P]>>  :
        P extends '_count' ? ActuatorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Actuator ? Actuator[P] : never
  } 
      : Actuator


  type ActuatorCountArgs = 
    Omit<ActuatorFindManyArgs, 'select' | 'include'> & {
      select?: ActuatorCountAggregateInputType | true
    }

  export interface ActuatorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Actuator that matches the filter.
     * @param {ActuatorFindUniqueArgs} args - Arguments to find a Actuator
     * @example
     * // Get one Actuator
     * const actuator = await prisma.actuator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActuatorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ActuatorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Actuator'> extends True ? Prisma__ActuatorClient<ActuatorGetPayload<T>> : Prisma__ActuatorClient<ActuatorGetPayload<T> | null, null>

    /**
     * Find one Actuator that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActuatorFindUniqueOrThrowArgs} args - Arguments to find a Actuator
     * @example
     * // Get one Actuator
     * const actuator = await prisma.actuator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActuatorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ActuatorFindUniqueOrThrowArgs>
    ): Prisma__ActuatorClient<ActuatorGetPayload<T>>

    /**
     * Find the first Actuator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorFindFirstArgs} args - Arguments to find a Actuator
     * @example
     * // Get one Actuator
     * const actuator = await prisma.actuator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActuatorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ActuatorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Actuator'> extends True ? Prisma__ActuatorClient<ActuatorGetPayload<T>> : Prisma__ActuatorClient<ActuatorGetPayload<T> | null, null>

    /**
     * Find the first Actuator that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorFindFirstOrThrowArgs} args - Arguments to find a Actuator
     * @example
     * // Get one Actuator
     * const actuator = await prisma.actuator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActuatorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ActuatorFindFirstOrThrowArgs>
    ): Prisma__ActuatorClient<ActuatorGetPayload<T>>

    /**
     * Find zero or more Actuators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Actuators
     * const actuators = await prisma.actuator.findMany()
     * 
     * // Get first 10 Actuators
     * const actuators = await prisma.actuator.findMany({ take: 10 })
     * 
     * // Only select the `id_actuator`
     * const actuatorWithId_actuatorOnly = await prisma.actuator.findMany({ select: { id_actuator: true } })
     * 
    **/
    findMany<T extends ActuatorFindManyArgs>(
      args?: SelectSubset<T, ActuatorFindManyArgs>
    ): Prisma.PrismaPromise<Array<ActuatorGetPayload<T>>>

    /**
     * Create a Actuator.
     * @param {ActuatorCreateArgs} args - Arguments to create a Actuator.
     * @example
     * // Create one Actuator
     * const Actuator = await prisma.actuator.create({
     *   data: {
     *     // ... data to create a Actuator
     *   }
     * })
     * 
    **/
    create<T extends ActuatorCreateArgs>(
      args: SelectSubset<T, ActuatorCreateArgs>
    ): Prisma__ActuatorClient<ActuatorGetPayload<T>>

    /**
     * Create many Actuators.
     *     @param {ActuatorCreateManyArgs} args - Arguments to create many Actuators.
     *     @example
     *     // Create many Actuators
     *     const actuator = await prisma.actuator.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActuatorCreateManyArgs>(
      args?: SelectSubset<T, ActuatorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Actuator.
     * @param {ActuatorDeleteArgs} args - Arguments to delete one Actuator.
     * @example
     * // Delete one Actuator
     * const Actuator = await prisma.actuator.delete({
     *   where: {
     *     // ... filter to delete one Actuator
     *   }
     * })
     * 
    **/
    delete<T extends ActuatorDeleteArgs>(
      args: SelectSubset<T, ActuatorDeleteArgs>
    ): Prisma__ActuatorClient<ActuatorGetPayload<T>>

    /**
     * Update one Actuator.
     * @param {ActuatorUpdateArgs} args - Arguments to update one Actuator.
     * @example
     * // Update one Actuator
     * const actuator = await prisma.actuator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActuatorUpdateArgs>(
      args: SelectSubset<T, ActuatorUpdateArgs>
    ): Prisma__ActuatorClient<ActuatorGetPayload<T>>

    /**
     * Delete zero or more Actuators.
     * @param {ActuatorDeleteManyArgs} args - Arguments to filter Actuators to delete.
     * @example
     * // Delete a few Actuators
     * const { count } = await prisma.actuator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActuatorDeleteManyArgs>(
      args?: SelectSubset<T, ActuatorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Actuators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Actuators
     * const actuator = await prisma.actuator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActuatorUpdateManyArgs>(
      args: SelectSubset<T, ActuatorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Actuator.
     * @param {ActuatorUpsertArgs} args - Arguments to update or create a Actuator.
     * @example
     * // Update or create a Actuator
     * const actuator = await prisma.actuator.upsert({
     *   create: {
     *     // ... data to create a Actuator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Actuator we want to update
     *   }
     * })
    **/
    upsert<T extends ActuatorUpsertArgs>(
      args: SelectSubset<T, ActuatorUpsertArgs>
    ): Prisma__ActuatorClient<ActuatorGetPayload<T>>

    /**
     * Count the number of Actuators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorCountArgs} args - Arguments to filter Actuators to count.
     * @example
     * // Count the number of Actuators
     * const count = await prisma.actuator.count({
     *   where: {
     *     // ... the filter for the Actuators we want to count
     *   }
     * })
    **/
    count<T extends ActuatorCountArgs>(
      args?: Subset<T, ActuatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActuatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Actuator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActuatorAggregateArgs>(args: Subset<T, ActuatorAggregateArgs>): Prisma.PrismaPromise<GetActuatorAggregateType<T>>

    /**
     * Group by Actuator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActuatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActuatorGroupByArgs['orderBy'] }
        : { orderBy?: ActuatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActuatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActuatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Actuator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ActuatorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    greenhouse<T extends GreenhouseArgs= {}>(args?: Subset<T, GreenhouseArgs>): Prisma__GreenhouseClient<GreenhouseGetPayload<T> | Null>;

    automation<T extends Actuator$automationArgs= {}>(args?: Subset<T, Actuator$automationArgs>): Prisma.PrismaPromise<Array<AutomationGetPayload<T>>| Null>;

    actuatorLog<T extends Actuator$actuatorLogArgs= {}>(args?: Subset<T, Actuator$actuatorLogArgs>): Prisma.PrismaPromise<Array<ActuatorLogGetPayload<T>>| Null>;

    MacAddress<T extends Actuator$MacAddressArgs= {}>(args?: Subset<T, Actuator$MacAddressArgs>): Prisma.PrismaPromise<Array<MacAddressGetPayload<T>>| Null>;

    Notification<T extends Actuator$NotificationArgs= {}>(args?: Subset<T, Actuator$NotificationArgs>): Prisma.PrismaPromise<Array<NotificationGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Actuator base type for findUnique actions
   */
  export type ActuatorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    /**
     * Filter, which Actuator to fetch.
     */
    where: ActuatorWhereUniqueInput
  }

  /**
   * Actuator findUnique
   */
  export interface ActuatorFindUniqueArgs extends ActuatorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Actuator findUniqueOrThrow
   */
  export type ActuatorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    /**
     * Filter, which Actuator to fetch.
     */
    where: ActuatorWhereUniqueInput
  }


  /**
   * Actuator base type for findFirst actions
   */
  export type ActuatorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    /**
     * Filter, which Actuator to fetch.
     */
    where?: ActuatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actuators to fetch.
     */
    orderBy?: Enumerable<ActuatorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actuators.
     */
    cursor?: ActuatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actuators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actuators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actuators.
     */
    distinct?: Enumerable<ActuatorScalarFieldEnum>
  }

  /**
   * Actuator findFirst
   */
  export interface ActuatorFindFirstArgs extends ActuatorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Actuator findFirstOrThrow
   */
  export type ActuatorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    /**
     * Filter, which Actuator to fetch.
     */
    where?: ActuatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actuators to fetch.
     */
    orderBy?: Enumerable<ActuatorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actuators.
     */
    cursor?: ActuatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actuators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actuators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actuators.
     */
    distinct?: Enumerable<ActuatorScalarFieldEnum>
  }


  /**
   * Actuator findMany
   */
  export type ActuatorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    /**
     * Filter, which Actuators to fetch.
     */
    where?: ActuatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actuators to fetch.
     */
    orderBy?: Enumerable<ActuatorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Actuators.
     */
    cursor?: ActuatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actuators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actuators.
     */
    skip?: number
    distinct?: Enumerable<ActuatorScalarFieldEnum>
  }


  /**
   * Actuator create
   */
  export type ActuatorCreateArgs = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    /**
     * The data needed to create a Actuator.
     */
    data: XOR<ActuatorCreateInput, ActuatorUncheckedCreateInput>
  }


  /**
   * Actuator createMany
   */
  export type ActuatorCreateManyArgs = {
    /**
     * The data used to create many Actuators.
     */
    data: Enumerable<ActuatorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Actuator update
   */
  export type ActuatorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    /**
     * The data needed to update a Actuator.
     */
    data: XOR<ActuatorUpdateInput, ActuatorUncheckedUpdateInput>
    /**
     * Choose, which Actuator to update.
     */
    where: ActuatorWhereUniqueInput
  }


  /**
   * Actuator updateMany
   */
  export type ActuatorUpdateManyArgs = {
    /**
     * The data used to update Actuators.
     */
    data: XOR<ActuatorUpdateManyMutationInput, ActuatorUncheckedUpdateManyInput>
    /**
     * Filter which Actuators to update
     */
    where?: ActuatorWhereInput
  }


  /**
   * Actuator upsert
   */
  export type ActuatorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    /**
     * The filter to search for the Actuator to update in case it exists.
     */
    where: ActuatorWhereUniqueInput
    /**
     * In case the Actuator found by the `where` argument doesn't exist, create a new Actuator with this data.
     */
    create: XOR<ActuatorCreateInput, ActuatorUncheckedCreateInput>
    /**
     * In case the Actuator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActuatorUpdateInput, ActuatorUncheckedUpdateInput>
  }


  /**
   * Actuator delete
   */
  export type ActuatorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
    /**
     * Filter which Actuator to delete.
     */
    where: ActuatorWhereUniqueInput
  }


  /**
   * Actuator deleteMany
   */
  export type ActuatorDeleteManyArgs = {
    /**
     * Filter which Actuators to delete
     */
    where?: ActuatorWhereInput
  }


  /**
   * Actuator.automation
   */
  export type Actuator$automationArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    where?: AutomationWhereInput
    orderBy?: Enumerable<AutomationOrderByWithRelationInput>
    cursor?: AutomationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AutomationScalarFieldEnum>
  }


  /**
   * Actuator.actuatorLog
   */
  export type Actuator$actuatorLogArgs = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    where?: ActuatorLogWhereInput
    orderBy?: Enumerable<ActuatorLogOrderByWithRelationInput>
    cursor?: ActuatorLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ActuatorLogScalarFieldEnum>
  }


  /**
   * Actuator.MacAddress
   */
  export type Actuator$MacAddressArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    where?: MacAddressWhereInput
    orderBy?: Enumerable<MacAddressOrderByWithRelationInput>
    cursor?: MacAddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MacAddressScalarFieldEnum>
  }


  /**
   * Actuator.Notification
   */
  export type Actuator$NotificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Actuator without action
   */
  export type ActuatorArgs = {
    /**
     * Select specific fields to fetch from the Actuator
     */
    select?: ActuatorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorInclude | null
  }



  /**
   * Model Automation
   */


  export type AggregateAutomation = {
    _count: AutomationCountAggregateOutputType | null
    _avg: AutomationAvgAggregateOutputType | null
    _sum: AutomationSumAggregateOutputType | null
    _min: AutomationMinAggregateOutputType | null
    _max: AutomationMaxAggregateOutputType | null
  }

  export type AutomationAvgAggregateOutputType = {
    id_actuator: number | null
    id_sensor: number | null
    status_lifecycle: number | null
    id_automation: number | null
    constanta: number | null
    sensorId_sensor: number | null
  }

  export type AutomationSumAggregateOutputType = {
    id_actuator: number | null
    id_sensor: number | null
    status_lifecycle: number | null
    id_automation: number | null
    constanta: number | null
    sensorId_sensor: number | null
  }

  export type AutomationMinAggregateOutputType = {
    id_actuator: number | null
    id_sensor: number | null
    condition: string | null
    status_lifecycle: number | null
    id_automation: number | null
    created_at: Date | null
    updated_at: Date | null
    constanta: number | null
    sensorId_sensor: number | null
  }

  export type AutomationMaxAggregateOutputType = {
    id_actuator: number | null
    id_sensor: number | null
    condition: string | null
    status_lifecycle: number | null
    id_automation: number | null
    created_at: Date | null
    updated_at: Date | null
    constanta: number | null
    sensorId_sensor: number | null
  }

  export type AutomationCountAggregateOutputType = {
    id_actuator: number
    id_sensor: number
    condition: number
    status_lifecycle: number
    id_automation: number
    created_at: number
    updated_at: number
    constanta: number
    sensorId_sensor: number
    _all: number
  }


  export type AutomationAvgAggregateInputType = {
    id_actuator?: true
    id_sensor?: true
    status_lifecycle?: true
    id_automation?: true
    constanta?: true
    sensorId_sensor?: true
  }

  export type AutomationSumAggregateInputType = {
    id_actuator?: true
    id_sensor?: true
    status_lifecycle?: true
    id_automation?: true
    constanta?: true
    sensorId_sensor?: true
  }

  export type AutomationMinAggregateInputType = {
    id_actuator?: true
    id_sensor?: true
    condition?: true
    status_lifecycle?: true
    id_automation?: true
    created_at?: true
    updated_at?: true
    constanta?: true
    sensorId_sensor?: true
  }

  export type AutomationMaxAggregateInputType = {
    id_actuator?: true
    id_sensor?: true
    condition?: true
    status_lifecycle?: true
    id_automation?: true
    created_at?: true
    updated_at?: true
    constanta?: true
    sensorId_sensor?: true
  }

  export type AutomationCountAggregateInputType = {
    id_actuator?: true
    id_sensor?: true
    condition?: true
    status_lifecycle?: true
    id_automation?: true
    created_at?: true
    updated_at?: true
    constanta?: true
    sensorId_sensor?: true
    _all?: true
  }

  export type AutomationAggregateArgs = {
    /**
     * Filter which Automation to aggregate.
     */
    where?: AutomationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Automations to fetch.
     */
    orderBy?: Enumerable<AutomationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AutomationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Automations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Automations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Automations
    **/
    _count?: true | AutomationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AutomationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AutomationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AutomationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AutomationMaxAggregateInputType
  }

  export type GetAutomationAggregateType<T extends AutomationAggregateArgs> = {
        [P in keyof T & keyof AggregateAutomation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAutomation[P]>
      : GetScalarType<T[P], AggregateAutomation[P]>
  }




  export type AutomationGroupByArgs = {
    where?: AutomationWhereInput
    orderBy?: Enumerable<AutomationOrderByWithAggregationInput>
    by: AutomationScalarFieldEnum[]
    having?: AutomationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AutomationCountAggregateInputType | true
    _avg?: AutomationAvgAggregateInputType
    _sum?: AutomationSumAggregateInputType
    _min?: AutomationMinAggregateInputType
    _max?: AutomationMaxAggregateInputType
  }


  export type AutomationGroupByOutputType = {
    id_actuator: number
    id_sensor: number
    condition: string
    status_lifecycle: number
    id_automation: number
    created_at: Date
    updated_at: Date
    constanta: number
    sensorId_sensor: number | null
    _count: AutomationCountAggregateOutputType | null
    _avg: AutomationAvgAggregateOutputType | null
    _sum: AutomationSumAggregateOutputType | null
    _min: AutomationMinAggregateOutputType | null
    _max: AutomationMaxAggregateOutputType | null
  }

  type GetAutomationGroupByPayload<T extends AutomationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AutomationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AutomationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AutomationGroupByOutputType[P]>
            : GetScalarType<T[P], AutomationGroupByOutputType[P]>
        }
      >
    >


  export type AutomationSelect = {
    id_actuator?: boolean
    id_sensor?: boolean
    condition?: boolean
    status_lifecycle?: boolean
    id_automation?: boolean
    created_at?: boolean
    updated_at?: boolean
    constanta?: boolean
    sensorId_sensor?: boolean
    sensor?: boolean | SensorArgs
    Actuator?: boolean | ActuatorArgs
  }


  export type AutomationInclude = {
    sensor?: boolean | SensorArgs
    Actuator?: boolean | ActuatorArgs
  }

  export type AutomationGetPayload<S extends boolean | null | undefined | AutomationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Automation :
    S extends undefined ? never :
    S extends { include: any } & (AutomationArgs | AutomationFindManyArgs)
    ? Automation  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sensor' ? SensorGetPayload<S['include'][P]> | null :
        P extends 'Actuator' ? ActuatorGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AutomationArgs | AutomationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sensor' ? SensorGetPayload<S['select'][P]> | null :
        P extends 'Actuator' ? ActuatorGetPayload<S['select'][P]> :  P extends keyof Automation ? Automation[P] : never
  } 
      : Automation


  type AutomationCountArgs = 
    Omit<AutomationFindManyArgs, 'select' | 'include'> & {
      select?: AutomationCountAggregateInputType | true
    }

  export interface AutomationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Automation that matches the filter.
     * @param {AutomationFindUniqueArgs} args - Arguments to find a Automation
     * @example
     * // Get one Automation
     * const automation = await prisma.automation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AutomationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AutomationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Automation'> extends True ? Prisma__AutomationClient<AutomationGetPayload<T>> : Prisma__AutomationClient<AutomationGetPayload<T> | null, null>

    /**
     * Find one Automation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AutomationFindUniqueOrThrowArgs} args - Arguments to find a Automation
     * @example
     * // Get one Automation
     * const automation = await prisma.automation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AutomationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AutomationFindUniqueOrThrowArgs>
    ): Prisma__AutomationClient<AutomationGetPayload<T>>

    /**
     * Find the first Automation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomationFindFirstArgs} args - Arguments to find a Automation
     * @example
     * // Get one Automation
     * const automation = await prisma.automation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AutomationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AutomationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Automation'> extends True ? Prisma__AutomationClient<AutomationGetPayload<T>> : Prisma__AutomationClient<AutomationGetPayload<T> | null, null>

    /**
     * Find the first Automation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomationFindFirstOrThrowArgs} args - Arguments to find a Automation
     * @example
     * // Get one Automation
     * const automation = await prisma.automation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AutomationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AutomationFindFirstOrThrowArgs>
    ): Prisma__AutomationClient<AutomationGetPayload<T>>

    /**
     * Find zero or more Automations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Automations
     * const automations = await prisma.automation.findMany()
     * 
     * // Get first 10 Automations
     * const automations = await prisma.automation.findMany({ take: 10 })
     * 
     * // Only select the `id_actuator`
     * const automationWithId_actuatorOnly = await prisma.automation.findMany({ select: { id_actuator: true } })
     * 
    **/
    findMany<T extends AutomationFindManyArgs>(
      args?: SelectSubset<T, AutomationFindManyArgs>
    ): Prisma.PrismaPromise<Array<AutomationGetPayload<T>>>

    /**
     * Create a Automation.
     * @param {AutomationCreateArgs} args - Arguments to create a Automation.
     * @example
     * // Create one Automation
     * const Automation = await prisma.automation.create({
     *   data: {
     *     // ... data to create a Automation
     *   }
     * })
     * 
    **/
    create<T extends AutomationCreateArgs>(
      args: SelectSubset<T, AutomationCreateArgs>
    ): Prisma__AutomationClient<AutomationGetPayload<T>>

    /**
     * Create many Automations.
     *     @param {AutomationCreateManyArgs} args - Arguments to create many Automations.
     *     @example
     *     // Create many Automations
     *     const automation = await prisma.automation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AutomationCreateManyArgs>(
      args?: SelectSubset<T, AutomationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Automation.
     * @param {AutomationDeleteArgs} args - Arguments to delete one Automation.
     * @example
     * // Delete one Automation
     * const Automation = await prisma.automation.delete({
     *   where: {
     *     // ... filter to delete one Automation
     *   }
     * })
     * 
    **/
    delete<T extends AutomationDeleteArgs>(
      args: SelectSubset<T, AutomationDeleteArgs>
    ): Prisma__AutomationClient<AutomationGetPayload<T>>

    /**
     * Update one Automation.
     * @param {AutomationUpdateArgs} args - Arguments to update one Automation.
     * @example
     * // Update one Automation
     * const automation = await prisma.automation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AutomationUpdateArgs>(
      args: SelectSubset<T, AutomationUpdateArgs>
    ): Prisma__AutomationClient<AutomationGetPayload<T>>

    /**
     * Delete zero or more Automations.
     * @param {AutomationDeleteManyArgs} args - Arguments to filter Automations to delete.
     * @example
     * // Delete a few Automations
     * const { count } = await prisma.automation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AutomationDeleteManyArgs>(
      args?: SelectSubset<T, AutomationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Automations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Automations
     * const automation = await prisma.automation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AutomationUpdateManyArgs>(
      args: SelectSubset<T, AutomationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Automation.
     * @param {AutomationUpsertArgs} args - Arguments to update or create a Automation.
     * @example
     * // Update or create a Automation
     * const automation = await prisma.automation.upsert({
     *   create: {
     *     // ... data to create a Automation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Automation we want to update
     *   }
     * })
    **/
    upsert<T extends AutomationUpsertArgs>(
      args: SelectSubset<T, AutomationUpsertArgs>
    ): Prisma__AutomationClient<AutomationGetPayload<T>>

    /**
     * Count the number of Automations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomationCountArgs} args - Arguments to filter Automations to count.
     * @example
     * // Count the number of Automations
     * const count = await prisma.automation.count({
     *   where: {
     *     // ... the filter for the Automations we want to count
     *   }
     * })
    **/
    count<T extends AutomationCountArgs>(
      args?: Subset<T, AutomationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AutomationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Automation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AutomationAggregateArgs>(args: Subset<T, AutomationAggregateArgs>): Prisma.PrismaPromise<GetAutomationAggregateType<T>>

    /**
     * Group by Automation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AutomationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AutomationGroupByArgs['orderBy'] }
        : { orderBy?: AutomationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AutomationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAutomationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Automation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AutomationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sensor<T extends SensorArgs= {}>(args?: Subset<T, SensorArgs>): Prisma__SensorClient<SensorGetPayload<T> | Null>;

    Actuator<T extends ActuatorArgs= {}>(args?: Subset<T, ActuatorArgs>): Prisma__ActuatorClient<ActuatorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Automation base type for findUnique actions
   */
  export type AutomationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    /**
     * Filter, which Automation to fetch.
     */
    where: AutomationWhereUniqueInput
  }

  /**
   * Automation findUnique
   */
  export interface AutomationFindUniqueArgs extends AutomationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Automation findUniqueOrThrow
   */
  export type AutomationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    /**
     * Filter, which Automation to fetch.
     */
    where: AutomationWhereUniqueInput
  }


  /**
   * Automation base type for findFirst actions
   */
  export type AutomationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    /**
     * Filter, which Automation to fetch.
     */
    where?: AutomationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Automations to fetch.
     */
    orderBy?: Enumerable<AutomationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Automations.
     */
    cursor?: AutomationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Automations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Automations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Automations.
     */
    distinct?: Enumerable<AutomationScalarFieldEnum>
  }

  /**
   * Automation findFirst
   */
  export interface AutomationFindFirstArgs extends AutomationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Automation findFirstOrThrow
   */
  export type AutomationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    /**
     * Filter, which Automation to fetch.
     */
    where?: AutomationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Automations to fetch.
     */
    orderBy?: Enumerable<AutomationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Automations.
     */
    cursor?: AutomationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Automations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Automations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Automations.
     */
    distinct?: Enumerable<AutomationScalarFieldEnum>
  }


  /**
   * Automation findMany
   */
  export type AutomationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    /**
     * Filter, which Automations to fetch.
     */
    where?: AutomationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Automations to fetch.
     */
    orderBy?: Enumerable<AutomationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Automations.
     */
    cursor?: AutomationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Automations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Automations.
     */
    skip?: number
    distinct?: Enumerable<AutomationScalarFieldEnum>
  }


  /**
   * Automation create
   */
  export type AutomationCreateArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    /**
     * The data needed to create a Automation.
     */
    data: XOR<AutomationCreateInput, AutomationUncheckedCreateInput>
  }


  /**
   * Automation createMany
   */
  export type AutomationCreateManyArgs = {
    /**
     * The data used to create many Automations.
     */
    data: Enumerable<AutomationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Automation update
   */
  export type AutomationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    /**
     * The data needed to update a Automation.
     */
    data: XOR<AutomationUpdateInput, AutomationUncheckedUpdateInput>
    /**
     * Choose, which Automation to update.
     */
    where: AutomationWhereUniqueInput
  }


  /**
   * Automation updateMany
   */
  export type AutomationUpdateManyArgs = {
    /**
     * The data used to update Automations.
     */
    data: XOR<AutomationUpdateManyMutationInput, AutomationUncheckedUpdateManyInput>
    /**
     * Filter which Automations to update
     */
    where?: AutomationWhereInput
  }


  /**
   * Automation upsert
   */
  export type AutomationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    /**
     * The filter to search for the Automation to update in case it exists.
     */
    where: AutomationWhereUniqueInput
    /**
     * In case the Automation found by the `where` argument doesn't exist, create a new Automation with this data.
     */
    create: XOR<AutomationCreateInput, AutomationUncheckedCreateInput>
    /**
     * In case the Automation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AutomationUpdateInput, AutomationUncheckedUpdateInput>
  }


  /**
   * Automation delete
   */
  export type AutomationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
    /**
     * Filter which Automation to delete.
     */
    where: AutomationWhereUniqueInput
  }


  /**
   * Automation deleteMany
   */
  export type AutomationDeleteManyArgs = {
    /**
     * Filter which Automations to delete
     */
    where?: AutomationWhereInput
  }


  /**
   * Automation without action
   */
  export type AutomationArgs = {
    /**
     * Select specific fields to fetch from the Automation
     */
    select?: AutomationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AutomationInclude | null
  }



  /**
   * Model ActuatorLog
   */


  export type AggregateActuatorLog = {
    _count: ActuatorLogCountAggregateOutputType | null
    _avg: ActuatorLogAvgAggregateOutputType | null
    _sum: ActuatorLogSumAggregateOutputType | null
    _min: ActuatorLogMinAggregateOutputType | null
    _max: ActuatorLogMaxAggregateOutputType | null
  }

  export type ActuatorLogAvgAggregateOutputType = {
    id_actuator_log: number | null
    id_actuator: number | null
    actuatorId_actuator: number | null
  }

  export type ActuatorLogSumAggregateOutputType = {
    id_actuator_log: number | null
    id_actuator: number | null
    actuatorId_actuator: number | null
  }

  export type ActuatorLogMinAggregateOutputType = {
    id_actuator_log: number | null
    created_at: Date | null
    on_off_status: boolean | null
    id_actuator: number | null
    actuatorId_actuator: number | null
  }

  export type ActuatorLogMaxAggregateOutputType = {
    id_actuator_log: number | null
    created_at: Date | null
    on_off_status: boolean | null
    id_actuator: number | null
    actuatorId_actuator: number | null
  }

  export type ActuatorLogCountAggregateOutputType = {
    id_actuator_log: number
    created_at: number
    on_off_status: number
    id_actuator: number
    actuatorId_actuator: number
    _all: number
  }


  export type ActuatorLogAvgAggregateInputType = {
    id_actuator_log?: true
    id_actuator?: true
    actuatorId_actuator?: true
  }

  export type ActuatorLogSumAggregateInputType = {
    id_actuator_log?: true
    id_actuator?: true
    actuatorId_actuator?: true
  }

  export type ActuatorLogMinAggregateInputType = {
    id_actuator_log?: true
    created_at?: true
    on_off_status?: true
    id_actuator?: true
    actuatorId_actuator?: true
  }

  export type ActuatorLogMaxAggregateInputType = {
    id_actuator_log?: true
    created_at?: true
    on_off_status?: true
    id_actuator?: true
    actuatorId_actuator?: true
  }

  export type ActuatorLogCountAggregateInputType = {
    id_actuator_log?: true
    created_at?: true
    on_off_status?: true
    id_actuator?: true
    actuatorId_actuator?: true
    _all?: true
  }

  export type ActuatorLogAggregateArgs = {
    /**
     * Filter which ActuatorLog to aggregate.
     */
    where?: ActuatorLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActuatorLogs to fetch.
     */
    orderBy?: Enumerable<ActuatorLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActuatorLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActuatorLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActuatorLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActuatorLogs
    **/
    _count?: true | ActuatorLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActuatorLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActuatorLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActuatorLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActuatorLogMaxAggregateInputType
  }

  export type GetActuatorLogAggregateType<T extends ActuatorLogAggregateArgs> = {
        [P in keyof T & keyof AggregateActuatorLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActuatorLog[P]>
      : GetScalarType<T[P], AggregateActuatorLog[P]>
  }




  export type ActuatorLogGroupByArgs = {
    where?: ActuatorLogWhereInput
    orderBy?: Enumerable<ActuatorLogOrderByWithAggregationInput>
    by: ActuatorLogScalarFieldEnum[]
    having?: ActuatorLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActuatorLogCountAggregateInputType | true
    _avg?: ActuatorLogAvgAggregateInputType
    _sum?: ActuatorLogSumAggregateInputType
    _min?: ActuatorLogMinAggregateInputType
    _max?: ActuatorLogMaxAggregateInputType
  }


  export type ActuatorLogGroupByOutputType = {
    id_actuator_log: number
    created_at: Date
    on_off_status: boolean
    id_actuator: number
    actuatorId_actuator: number | null
    _count: ActuatorLogCountAggregateOutputType | null
    _avg: ActuatorLogAvgAggregateOutputType | null
    _sum: ActuatorLogSumAggregateOutputType | null
    _min: ActuatorLogMinAggregateOutputType | null
    _max: ActuatorLogMaxAggregateOutputType | null
  }

  type GetActuatorLogGroupByPayload<T extends ActuatorLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ActuatorLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActuatorLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActuatorLogGroupByOutputType[P]>
            : GetScalarType<T[P], ActuatorLogGroupByOutputType[P]>
        }
      >
    >


  export type ActuatorLogSelect = {
    id_actuator_log?: boolean
    created_at?: boolean
    on_off_status?: boolean
    id_actuator?: boolean
    actuatorId_actuator?: boolean
    Actuator?: boolean | ActuatorArgs
  }


  export type ActuatorLogInclude = {
    Actuator?: boolean | ActuatorArgs
  }

  export type ActuatorLogGetPayload<S extends boolean | null | undefined | ActuatorLogArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ActuatorLog :
    S extends undefined ? never :
    S extends { include: any } & (ActuatorLogArgs | ActuatorLogFindManyArgs)
    ? ActuatorLog  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Actuator' ? ActuatorGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ActuatorLogArgs | ActuatorLogFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Actuator' ? ActuatorGetPayload<S['select'][P]> | null :  P extends keyof ActuatorLog ? ActuatorLog[P] : never
  } 
      : ActuatorLog


  type ActuatorLogCountArgs = 
    Omit<ActuatorLogFindManyArgs, 'select' | 'include'> & {
      select?: ActuatorLogCountAggregateInputType | true
    }

  export interface ActuatorLogDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ActuatorLog that matches the filter.
     * @param {ActuatorLogFindUniqueArgs} args - Arguments to find a ActuatorLog
     * @example
     * // Get one ActuatorLog
     * const actuatorLog = await prisma.actuatorLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActuatorLogFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ActuatorLogFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ActuatorLog'> extends True ? Prisma__ActuatorLogClient<ActuatorLogGetPayload<T>> : Prisma__ActuatorLogClient<ActuatorLogGetPayload<T> | null, null>

    /**
     * Find one ActuatorLog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActuatorLogFindUniqueOrThrowArgs} args - Arguments to find a ActuatorLog
     * @example
     * // Get one ActuatorLog
     * const actuatorLog = await prisma.actuatorLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActuatorLogFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ActuatorLogFindUniqueOrThrowArgs>
    ): Prisma__ActuatorLogClient<ActuatorLogGetPayload<T>>

    /**
     * Find the first ActuatorLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorLogFindFirstArgs} args - Arguments to find a ActuatorLog
     * @example
     * // Get one ActuatorLog
     * const actuatorLog = await prisma.actuatorLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActuatorLogFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ActuatorLogFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ActuatorLog'> extends True ? Prisma__ActuatorLogClient<ActuatorLogGetPayload<T>> : Prisma__ActuatorLogClient<ActuatorLogGetPayload<T> | null, null>

    /**
     * Find the first ActuatorLog that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorLogFindFirstOrThrowArgs} args - Arguments to find a ActuatorLog
     * @example
     * // Get one ActuatorLog
     * const actuatorLog = await prisma.actuatorLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActuatorLogFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ActuatorLogFindFirstOrThrowArgs>
    ): Prisma__ActuatorLogClient<ActuatorLogGetPayload<T>>

    /**
     * Find zero or more ActuatorLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActuatorLogs
     * const actuatorLogs = await prisma.actuatorLog.findMany()
     * 
     * // Get first 10 ActuatorLogs
     * const actuatorLogs = await prisma.actuatorLog.findMany({ take: 10 })
     * 
     * // Only select the `id_actuator_log`
     * const actuatorLogWithId_actuator_logOnly = await prisma.actuatorLog.findMany({ select: { id_actuator_log: true } })
     * 
    **/
    findMany<T extends ActuatorLogFindManyArgs>(
      args?: SelectSubset<T, ActuatorLogFindManyArgs>
    ): Prisma.PrismaPromise<Array<ActuatorLogGetPayload<T>>>

    /**
     * Create a ActuatorLog.
     * @param {ActuatorLogCreateArgs} args - Arguments to create a ActuatorLog.
     * @example
     * // Create one ActuatorLog
     * const ActuatorLog = await prisma.actuatorLog.create({
     *   data: {
     *     // ... data to create a ActuatorLog
     *   }
     * })
     * 
    **/
    create<T extends ActuatorLogCreateArgs>(
      args: SelectSubset<T, ActuatorLogCreateArgs>
    ): Prisma__ActuatorLogClient<ActuatorLogGetPayload<T>>

    /**
     * Create many ActuatorLogs.
     *     @param {ActuatorLogCreateManyArgs} args - Arguments to create many ActuatorLogs.
     *     @example
     *     // Create many ActuatorLogs
     *     const actuatorLog = await prisma.actuatorLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActuatorLogCreateManyArgs>(
      args?: SelectSubset<T, ActuatorLogCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ActuatorLog.
     * @param {ActuatorLogDeleteArgs} args - Arguments to delete one ActuatorLog.
     * @example
     * // Delete one ActuatorLog
     * const ActuatorLog = await prisma.actuatorLog.delete({
     *   where: {
     *     // ... filter to delete one ActuatorLog
     *   }
     * })
     * 
    **/
    delete<T extends ActuatorLogDeleteArgs>(
      args: SelectSubset<T, ActuatorLogDeleteArgs>
    ): Prisma__ActuatorLogClient<ActuatorLogGetPayload<T>>

    /**
     * Update one ActuatorLog.
     * @param {ActuatorLogUpdateArgs} args - Arguments to update one ActuatorLog.
     * @example
     * // Update one ActuatorLog
     * const actuatorLog = await prisma.actuatorLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActuatorLogUpdateArgs>(
      args: SelectSubset<T, ActuatorLogUpdateArgs>
    ): Prisma__ActuatorLogClient<ActuatorLogGetPayload<T>>

    /**
     * Delete zero or more ActuatorLogs.
     * @param {ActuatorLogDeleteManyArgs} args - Arguments to filter ActuatorLogs to delete.
     * @example
     * // Delete a few ActuatorLogs
     * const { count } = await prisma.actuatorLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActuatorLogDeleteManyArgs>(
      args?: SelectSubset<T, ActuatorLogDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActuatorLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActuatorLogs
     * const actuatorLog = await prisma.actuatorLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActuatorLogUpdateManyArgs>(
      args: SelectSubset<T, ActuatorLogUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActuatorLog.
     * @param {ActuatorLogUpsertArgs} args - Arguments to update or create a ActuatorLog.
     * @example
     * // Update or create a ActuatorLog
     * const actuatorLog = await prisma.actuatorLog.upsert({
     *   create: {
     *     // ... data to create a ActuatorLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActuatorLog we want to update
     *   }
     * })
    **/
    upsert<T extends ActuatorLogUpsertArgs>(
      args: SelectSubset<T, ActuatorLogUpsertArgs>
    ): Prisma__ActuatorLogClient<ActuatorLogGetPayload<T>>

    /**
     * Count the number of ActuatorLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorLogCountArgs} args - Arguments to filter ActuatorLogs to count.
     * @example
     * // Count the number of ActuatorLogs
     * const count = await prisma.actuatorLog.count({
     *   where: {
     *     // ... the filter for the ActuatorLogs we want to count
     *   }
     * })
    **/
    count<T extends ActuatorLogCountArgs>(
      args?: Subset<T, ActuatorLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActuatorLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActuatorLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActuatorLogAggregateArgs>(args: Subset<T, ActuatorLogAggregateArgs>): Prisma.PrismaPromise<GetActuatorLogAggregateType<T>>

    /**
     * Group by ActuatorLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActuatorLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActuatorLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActuatorLogGroupByArgs['orderBy'] }
        : { orderBy?: ActuatorLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActuatorLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActuatorLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ActuatorLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ActuatorLogClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Actuator<T extends ActuatorArgs= {}>(args?: Subset<T, ActuatorArgs>): Prisma__ActuatorClient<ActuatorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ActuatorLog base type for findUnique actions
   */
  export type ActuatorLogFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    /**
     * Filter, which ActuatorLog to fetch.
     */
    where: ActuatorLogWhereUniqueInput
  }

  /**
   * ActuatorLog findUnique
   */
  export interface ActuatorLogFindUniqueArgs extends ActuatorLogFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ActuatorLog findUniqueOrThrow
   */
  export type ActuatorLogFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    /**
     * Filter, which ActuatorLog to fetch.
     */
    where: ActuatorLogWhereUniqueInput
  }


  /**
   * ActuatorLog base type for findFirst actions
   */
  export type ActuatorLogFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    /**
     * Filter, which ActuatorLog to fetch.
     */
    where?: ActuatorLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActuatorLogs to fetch.
     */
    orderBy?: Enumerable<ActuatorLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActuatorLogs.
     */
    cursor?: ActuatorLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActuatorLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActuatorLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActuatorLogs.
     */
    distinct?: Enumerable<ActuatorLogScalarFieldEnum>
  }

  /**
   * ActuatorLog findFirst
   */
  export interface ActuatorLogFindFirstArgs extends ActuatorLogFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ActuatorLog findFirstOrThrow
   */
  export type ActuatorLogFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    /**
     * Filter, which ActuatorLog to fetch.
     */
    where?: ActuatorLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActuatorLogs to fetch.
     */
    orderBy?: Enumerable<ActuatorLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActuatorLogs.
     */
    cursor?: ActuatorLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActuatorLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActuatorLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActuatorLogs.
     */
    distinct?: Enumerable<ActuatorLogScalarFieldEnum>
  }


  /**
   * ActuatorLog findMany
   */
  export type ActuatorLogFindManyArgs = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    /**
     * Filter, which ActuatorLogs to fetch.
     */
    where?: ActuatorLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActuatorLogs to fetch.
     */
    orderBy?: Enumerable<ActuatorLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActuatorLogs.
     */
    cursor?: ActuatorLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActuatorLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActuatorLogs.
     */
    skip?: number
    distinct?: Enumerable<ActuatorLogScalarFieldEnum>
  }


  /**
   * ActuatorLog create
   */
  export type ActuatorLogCreateArgs = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    /**
     * The data needed to create a ActuatorLog.
     */
    data: XOR<ActuatorLogCreateInput, ActuatorLogUncheckedCreateInput>
  }


  /**
   * ActuatorLog createMany
   */
  export type ActuatorLogCreateManyArgs = {
    /**
     * The data used to create many ActuatorLogs.
     */
    data: Enumerable<ActuatorLogCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ActuatorLog update
   */
  export type ActuatorLogUpdateArgs = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    /**
     * The data needed to update a ActuatorLog.
     */
    data: XOR<ActuatorLogUpdateInput, ActuatorLogUncheckedUpdateInput>
    /**
     * Choose, which ActuatorLog to update.
     */
    where: ActuatorLogWhereUniqueInput
  }


  /**
   * ActuatorLog updateMany
   */
  export type ActuatorLogUpdateManyArgs = {
    /**
     * The data used to update ActuatorLogs.
     */
    data: XOR<ActuatorLogUpdateManyMutationInput, ActuatorLogUncheckedUpdateManyInput>
    /**
     * Filter which ActuatorLogs to update
     */
    where?: ActuatorLogWhereInput
  }


  /**
   * ActuatorLog upsert
   */
  export type ActuatorLogUpsertArgs = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    /**
     * The filter to search for the ActuatorLog to update in case it exists.
     */
    where: ActuatorLogWhereUniqueInput
    /**
     * In case the ActuatorLog found by the `where` argument doesn't exist, create a new ActuatorLog with this data.
     */
    create: XOR<ActuatorLogCreateInput, ActuatorLogUncheckedCreateInput>
    /**
     * In case the ActuatorLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActuatorLogUpdateInput, ActuatorLogUncheckedUpdateInput>
  }


  /**
   * ActuatorLog delete
   */
  export type ActuatorLogDeleteArgs = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
    /**
     * Filter which ActuatorLog to delete.
     */
    where: ActuatorLogWhereUniqueInput
  }


  /**
   * ActuatorLog deleteMany
   */
  export type ActuatorLogDeleteManyArgs = {
    /**
     * Filter which ActuatorLogs to delete
     */
    where?: ActuatorLogWhereInput
  }


  /**
   * ActuatorLog without action
   */
  export type ActuatorLogArgs = {
    /**
     * Select specific fields to fetch from the ActuatorLog
     */
    select?: ActuatorLogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActuatorLogInclude | null
  }



  /**
   * Model Icon
   */


  export type AggregateIcon = {
    _count: IconCountAggregateOutputType | null
    _avg: IconAvgAggregateOutputType | null
    _sum: IconSumAggregateOutputType | null
    _min: IconMinAggregateOutputType | null
    _max: IconMaxAggregateOutputType | null
  }

  export type IconAvgAggregateOutputType = {
    id_icon: number | null
  }

  export type IconSumAggregateOutputType = {
    id_icon: number | null
  }

  export type IconMinAggregateOutputType = {
    id_icon: number | null
    name: string | null
    icon: string | null
    type: string | null
    color: string | null
  }

  export type IconMaxAggregateOutputType = {
    id_icon: number | null
    name: string | null
    icon: string | null
    type: string | null
    color: string | null
  }

  export type IconCountAggregateOutputType = {
    id_icon: number
    name: number
    icon: number
    type: number
    color: number
    _all: number
  }


  export type IconAvgAggregateInputType = {
    id_icon?: true
  }

  export type IconSumAggregateInputType = {
    id_icon?: true
  }

  export type IconMinAggregateInputType = {
    id_icon?: true
    name?: true
    icon?: true
    type?: true
    color?: true
  }

  export type IconMaxAggregateInputType = {
    id_icon?: true
    name?: true
    icon?: true
    type?: true
    color?: true
  }

  export type IconCountAggregateInputType = {
    id_icon?: true
    name?: true
    icon?: true
    type?: true
    color?: true
    _all?: true
  }

  export type IconAggregateArgs = {
    /**
     * Filter which Icon to aggregate.
     */
    where?: IconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Icons to fetch.
     */
    orderBy?: Enumerable<IconOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Icons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Icons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Icons
    **/
    _count?: true | IconCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IconAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IconSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IconMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IconMaxAggregateInputType
  }

  export type GetIconAggregateType<T extends IconAggregateArgs> = {
        [P in keyof T & keyof AggregateIcon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIcon[P]>
      : GetScalarType<T[P], AggregateIcon[P]>
  }




  export type IconGroupByArgs = {
    where?: IconWhereInput
    orderBy?: Enumerable<IconOrderByWithAggregationInput>
    by: IconScalarFieldEnum[]
    having?: IconScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IconCountAggregateInputType | true
    _avg?: IconAvgAggregateInputType
    _sum?: IconSumAggregateInputType
    _min?: IconMinAggregateInputType
    _max?: IconMaxAggregateInputType
  }


  export type IconGroupByOutputType = {
    id_icon: number
    name: string
    icon: string
    type: string
    color: string
    _count: IconCountAggregateOutputType | null
    _avg: IconAvgAggregateOutputType | null
    _sum: IconSumAggregateOutputType | null
    _min: IconMinAggregateOutputType | null
    _max: IconMaxAggregateOutputType | null
  }

  type GetIconGroupByPayload<T extends IconGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<IconGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IconGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IconGroupByOutputType[P]>
            : GetScalarType<T[P], IconGroupByOutputType[P]>
        }
      >
    >


  export type IconSelect = {
    id_icon?: boolean
    name?: boolean
    icon?: boolean
    type?: boolean
    color?: boolean
  }


  export type IconGetPayload<S extends boolean | null | undefined | IconArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Icon :
    S extends undefined ? never :
    S extends { include: any } & (IconArgs | IconFindManyArgs)
    ? Icon 
    : S extends { select: any } & (IconArgs | IconFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Icon ? Icon[P] : never
  } 
      : Icon


  type IconCountArgs = 
    Omit<IconFindManyArgs, 'select' | 'include'> & {
      select?: IconCountAggregateInputType | true
    }

  export interface IconDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Icon that matches the filter.
     * @param {IconFindUniqueArgs} args - Arguments to find a Icon
     * @example
     * // Get one Icon
     * const icon = await prisma.icon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IconFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IconFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Icon'> extends True ? Prisma__IconClient<IconGetPayload<T>> : Prisma__IconClient<IconGetPayload<T> | null, null>

    /**
     * Find one Icon that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {IconFindUniqueOrThrowArgs} args - Arguments to find a Icon
     * @example
     * // Get one Icon
     * const icon = await prisma.icon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IconFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, IconFindUniqueOrThrowArgs>
    ): Prisma__IconClient<IconGetPayload<T>>

    /**
     * Find the first Icon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconFindFirstArgs} args - Arguments to find a Icon
     * @example
     * // Get one Icon
     * const icon = await prisma.icon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IconFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IconFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Icon'> extends True ? Prisma__IconClient<IconGetPayload<T>> : Prisma__IconClient<IconGetPayload<T> | null, null>

    /**
     * Find the first Icon that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconFindFirstOrThrowArgs} args - Arguments to find a Icon
     * @example
     * // Get one Icon
     * const icon = await prisma.icon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IconFindFirstOrThrowArgs>(
      args?: SelectSubset<T, IconFindFirstOrThrowArgs>
    ): Prisma__IconClient<IconGetPayload<T>>

    /**
     * Find zero or more Icons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Icons
     * const icons = await prisma.icon.findMany()
     * 
     * // Get first 10 Icons
     * const icons = await prisma.icon.findMany({ take: 10 })
     * 
     * // Only select the `id_icon`
     * const iconWithId_iconOnly = await prisma.icon.findMany({ select: { id_icon: true } })
     * 
    **/
    findMany<T extends IconFindManyArgs>(
      args?: SelectSubset<T, IconFindManyArgs>
    ): Prisma.PrismaPromise<Array<IconGetPayload<T>>>

    /**
     * Create a Icon.
     * @param {IconCreateArgs} args - Arguments to create a Icon.
     * @example
     * // Create one Icon
     * const Icon = await prisma.icon.create({
     *   data: {
     *     // ... data to create a Icon
     *   }
     * })
     * 
    **/
    create<T extends IconCreateArgs>(
      args: SelectSubset<T, IconCreateArgs>
    ): Prisma__IconClient<IconGetPayload<T>>

    /**
     * Create many Icons.
     *     @param {IconCreateManyArgs} args - Arguments to create many Icons.
     *     @example
     *     // Create many Icons
     *     const icon = await prisma.icon.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IconCreateManyArgs>(
      args?: SelectSubset<T, IconCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Icon.
     * @param {IconDeleteArgs} args - Arguments to delete one Icon.
     * @example
     * // Delete one Icon
     * const Icon = await prisma.icon.delete({
     *   where: {
     *     // ... filter to delete one Icon
     *   }
     * })
     * 
    **/
    delete<T extends IconDeleteArgs>(
      args: SelectSubset<T, IconDeleteArgs>
    ): Prisma__IconClient<IconGetPayload<T>>

    /**
     * Update one Icon.
     * @param {IconUpdateArgs} args - Arguments to update one Icon.
     * @example
     * // Update one Icon
     * const icon = await prisma.icon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IconUpdateArgs>(
      args: SelectSubset<T, IconUpdateArgs>
    ): Prisma__IconClient<IconGetPayload<T>>

    /**
     * Delete zero or more Icons.
     * @param {IconDeleteManyArgs} args - Arguments to filter Icons to delete.
     * @example
     * // Delete a few Icons
     * const { count } = await prisma.icon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IconDeleteManyArgs>(
      args?: SelectSubset<T, IconDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Icons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Icons
     * const icon = await prisma.icon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IconUpdateManyArgs>(
      args: SelectSubset<T, IconUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Icon.
     * @param {IconUpsertArgs} args - Arguments to update or create a Icon.
     * @example
     * // Update or create a Icon
     * const icon = await prisma.icon.upsert({
     *   create: {
     *     // ... data to create a Icon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Icon we want to update
     *   }
     * })
    **/
    upsert<T extends IconUpsertArgs>(
      args: SelectSubset<T, IconUpsertArgs>
    ): Prisma__IconClient<IconGetPayload<T>>

    /**
     * Count the number of Icons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCountArgs} args - Arguments to filter Icons to count.
     * @example
     * // Count the number of Icons
     * const count = await prisma.icon.count({
     *   where: {
     *     // ... the filter for the Icons we want to count
     *   }
     * })
    **/
    count<T extends IconCountArgs>(
      args?: Subset<T, IconCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IconCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Icon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IconAggregateArgs>(args: Subset<T, IconAggregateArgs>): Prisma.PrismaPromise<GetIconAggregateType<T>>

    /**
     * Group by Icon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IconGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IconGroupByArgs['orderBy'] }
        : { orderBy?: IconGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IconGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIconGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Icon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IconClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Icon base type for findUnique actions
   */
  export type IconFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
    /**
     * Filter, which Icon to fetch.
     */
    where: IconWhereUniqueInput
  }

  /**
   * Icon findUnique
   */
  export interface IconFindUniqueArgs extends IconFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Icon findUniqueOrThrow
   */
  export type IconFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
    /**
     * Filter, which Icon to fetch.
     */
    where: IconWhereUniqueInput
  }


  /**
   * Icon base type for findFirst actions
   */
  export type IconFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
    /**
     * Filter, which Icon to fetch.
     */
    where?: IconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Icons to fetch.
     */
    orderBy?: Enumerable<IconOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Icons.
     */
    cursor?: IconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Icons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Icons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Icons.
     */
    distinct?: Enumerable<IconScalarFieldEnum>
  }

  /**
   * Icon findFirst
   */
  export interface IconFindFirstArgs extends IconFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Icon findFirstOrThrow
   */
  export type IconFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
    /**
     * Filter, which Icon to fetch.
     */
    where?: IconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Icons to fetch.
     */
    orderBy?: Enumerable<IconOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Icons.
     */
    cursor?: IconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Icons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Icons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Icons.
     */
    distinct?: Enumerable<IconScalarFieldEnum>
  }


  /**
   * Icon findMany
   */
  export type IconFindManyArgs = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
    /**
     * Filter, which Icons to fetch.
     */
    where?: IconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Icons to fetch.
     */
    orderBy?: Enumerable<IconOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Icons.
     */
    cursor?: IconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Icons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Icons.
     */
    skip?: number
    distinct?: Enumerable<IconScalarFieldEnum>
  }


  /**
   * Icon create
   */
  export type IconCreateArgs = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
    /**
     * The data needed to create a Icon.
     */
    data: XOR<IconCreateInput, IconUncheckedCreateInput>
  }


  /**
   * Icon createMany
   */
  export type IconCreateManyArgs = {
    /**
     * The data used to create many Icons.
     */
    data: Enumerable<IconCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Icon update
   */
  export type IconUpdateArgs = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
    /**
     * The data needed to update a Icon.
     */
    data: XOR<IconUpdateInput, IconUncheckedUpdateInput>
    /**
     * Choose, which Icon to update.
     */
    where: IconWhereUniqueInput
  }


  /**
   * Icon updateMany
   */
  export type IconUpdateManyArgs = {
    /**
     * The data used to update Icons.
     */
    data: XOR<IconUpdateManyMutationInput, IconUncheckedUpdateManyInput>
    /**
     * Filter which Icons to update
     */
    where?: IconWhereInput
  }


  /**
   * Icon upsert
   */
  export type IconUpsertArgs = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
    /**
     * The filter to search for the Icon to update in case it exists.
     */
    where: IconWhereUniqueInput
    /**
     * In case the Icon found by the `where` argument doesn't exist, create a new Icon with this data.
     */
    create: XOR<IconCreateInput, IconUncheckedCreateInput>
    /**
     * In case the Icon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IconUpdateInput, IconUncheckedUpdateInput>
  }


  /**
   * Icon delete
   */
  export type IconDeleteArgs = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
    /**
     * Filter which Icon to delete.
     */
    where: IconWhereUniqueInput
  }


  /**
   * Icon deleteMany
   */
  export type IconDeleteManyArgs = {
    /**
     * Filter which Icons to delete
     */
    where?: IconWhereInput
  }


  /**
   * Icon without action
   */
  export type IconArgs = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect | null
  }



  /**
   * Model MacAddress
   */


  export type AggregateMacAddress = {
    _count: MacAddressCountAggregateOutputType | null
    _avg: MacAddressAvgAggregateOutputType | null
    _sum: MacAddressSumAggregateOutputType | null
    _min: MacAddressMinAggregateOutputType | null
    _max: MacAddressMaxAggregateOutputType | null
  }

  export type MacAddressAvgAggregateOutputType = {
    id_sensor: number | null
    id_actuator: number | null
    id_mac: number | null
  }

  export type MacAddressSumAggregateOutputType = {
    id_sensor: number | null
    id_actuator: number | null
    id_mac: number | null
  }

  export type MacAddressMinAggregateOutputType = {
    id_sensor: number | null
    id_actuator: number | null
    mac_address: string | null
    id_mac: number | null
  }

  export type MacAddressMaxAggregateOutputType = {
    id_sensor: number | null
    id_actuator: number | null
    mac_address: string | null
    id_mac: number | null
  }

  export type MacAddressCountAggregateOutputType = {
    id_sensor: number
    id_actuator: number
    mac_address: number
    id_mac: number
    _all: number
  }


  export type MacAddressAvgAggregateInputType = {
    id_sensor?: true
    id_actuator?: true
    id_mac?: true
  }

  export type MacAddressSumAggregateInputType = {
    id_sensor?: true
    id_actuator?: true
    id_mac?: true
  }

  export type MacAddressMinAggregateInputType = {
    id_sensor?: true
    id_actuator?: true
    mac_address?: true
    id_mac?: true
  }

  export type MacAddressMaxAggregateInputType = {
    id_sensor?: true
    id_actuator?: true
    mac_address?: true
    id_mac?: true
  }

  export type MacAddressCountAggregateInputType = {
    id_sensor?: true
    id_actuator?: true
    mac_address?: true
    id_mac?: true
    _all?: true
  }

  export type MacAddressAggregateArgs = {
    /**
     * Filter which MacAddress to aggregate.
     */
    where?: MacAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MacAddresses to fetch.
     */
    orderBy?: Enumerable<MacAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MacAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MacAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MacAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MacAddresses
    **/
    _count?: true | MacAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MacAddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MacAddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MacAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MacAddressMaxAggregateInputType
  }

  export type GetMacAddressAggregateType<T extends MacAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateMacAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMacAddress[P]>
      : GetScalarType<T[P], AggregateMacAddress[P]>
  }




  export type MacAddressGroupByArgs = {
    where?: MacAddressWhereInput
    orderBy?: Enumerable<MacAddressOrderByWithAggregationInput>
    by: MacAddressScalarFieldEnum[]
    having?: MacAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MacAddressCountAggregateInputType | true
    _avg?: MacAddressAvgAggregateInputType
    _sum?: MacAddressSumAggregateInputType
    _min?: MacAddressMinAggregateInputType
    _max?: MacAddressMaxAggregateInputType
  }


  export type MacAddressGroupByOutputType = {
    id_sensor: number
    id_actuator: number
    mac_address: string
    id_mac: number
    _count: MacAddressCountAggregateOutputType | null
    _avg: MacAddressAvgAggregateOutputType | null
    _sum: MacAddressSumAggregateOutputType | null
    _min: MacAddressMinAggregateOutputType | null
    _max: MacAddressMaxAggregateOutputType | null
  }

  type GetMacAddressGroupByPayload<T extends MacAddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MacAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MacAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MacAddressGroupByOutputType[P]>
            : GetScalarType<T[P], MacAddressGroupByOutputType[P]>
        }
      >
    >


  export type MacAddressSelect = {
    id_sensor?: boolean
    id_actuator?: boolean
    mac_address?: boolean
    id_mac?: boolean
    actuator?: boolean | ActuatorArgs
    sensor?: boolean | SensorArgs
  }


  export type MacAddressInclude = {
    actuator?: boolean | ActuatorArgs
    sensor?: boolean | SensorArgs
  }

  export type MacAddressGetPayload<S extends boolean | null | undefined | MacAddressArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MacAddress :
    S extends undefined ? never :
    S extends { include: any } & (MacAddressArgs | MacAddressFindManyArgs)
    ? MacAddress  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'actuator' ? ActuatorGetPayload<S['include'][P]> | null :
        P extends 'sensor' ? SensorGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (MacAddressArgs | MacAddressFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'actuator' ? ActuatorGetPayload<S['select'][P]> | null :
        P extends 'sensor' ? SensorGetPayload<S['select'][P]> | null :  P extends keyof MacAddress ? MacAddress[P] : never
  } 
      : MacAddress


  type MacAddressCountArgs = 
    Omit<MacAddressFindManyArgs, 'select' | 'include'> & {
      select?: MacAddressCountAggregateInputType | true
    }

  export interface MacAddressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MacAddress that matches the filter.
     * @param {MacAddressFindUniqueArgs} args - Arguments to find a MacAddress
     * @example
     * // Get one MacAddress
     * const macAddress = await prisma.macAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MacAddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MacAddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MacAddress'> extends True ? Prisma__MacAddressClient<MacAddressGetPayload<T>> : Prisma__MacAddressClient<MacAddressGetPayload<T> | null, null>

    /**
     * Find one MacAddress that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MacAddressFindUniqueOrThrowArgs} args - Arguments to find a MacAddress
     * @example
     * // Get one MacAddress
     * const macAddress = await prisma.macAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MacAddressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MacAddressFindUniqueOrThrowArgs>
    ): Prisma__MacAddressClient<MacAddressGetPayload<T>>

    /**
     * Find the first MacAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacAddressFindFirstArgs} args - Arguments to find a MacAddress
     * @example
     * // Get one MacAddress
     * const macAddress = await prisma.macAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MacAddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MacAddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MacAddress'> extends True ? Prisma__MacAddressClient<MacAddressGetPayload<T>> : Prisma__MacAddressClient<MacAddressGetPayload<T> | null, null>

    /**
     * Find the first MacAddress that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacAddressFindFirstOrThrowArgs} args - Arguments to find a MacAddress
     * @example
     * // Get one MacAddress
     * const macAddress = await prisma.macAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MacAddressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MacAddressFindFirstOrThrowArgs>
    ): Prisma__MacAddressClient<MacAddressGetPayload<T>>

    /**
     * Find zero or more MacAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacAddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MacAddresses
     * const macAddresses = await prisma.macAddress.findMany()
     * 
     * // Get first 10 MacAddresses
     * const macAddresses = await prisma.macAddress.findMany({ take: 10 })
     * 
     * // Only select the `id_sensor`
     * const macAddressWithId_sensorOnly = await prisma.macAddress.findMany({ select: { id_sensor: true } })
     * 
    **/
    findMany<T extends MacAddressFindManyArgs>(
      args?: SelectSubset<T, MacAddressFindManyArgs>
    ): Prisma.PrismaPromise<Array<MacAddressGetPayload<T>>>

    /**
     * Create a MacAddress.
     * @param {MacAddressCreateArgs} args - Arguments to create a MacAddress.
     * @example
     * // Create one MacAddress
     * const MacAddress = await prisma.macAddress.create({
     *   data: {
     *     // ... data to create a MacAddress
     *   }
     * })
     * 
    **/
    create<T extends MacAddressCreateArgs>(
      args: SelectSubset<T, MacAddressCreateArgs>
    ): Prisma__MacAddressClient<MacAddressGetPayload<T>>

    /**
     * Create many MacAddresses.
     *     @param {MacAddressCreateManyArgs} args - Arguments to create many MacAddresses.
     *     @example
     *     // Create many MacAddresses
     *     const macAddress = await prisma.macAddress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MacAddressCreateManyArgs>(
      args?: SelectSubset<T, MacAddressCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MacAddress.
     * @param {MacAddressDeleteArgs} args - Arguments to delete one MacAddress.
     * @example
     * // Delete one MacAddress
     * const MacAddress = await prisma.macAddress.delete({
     *   where: {
     *     // ... filter to delete one MacAddress
     *   }
     * })
     * 
    **/
    delete<T extends MacAddressDeleteArgs>(
      args: SelectSubset<T, MacAddressDeleteArgs>
    ): Prisma__MacAddressClient<MacAddressGetPayload<T>>

    /**
     * Update one MacAddress.
     * @param {MacAddressUpdateArgs} args - Arguments to update one MacAddress.
     * @example
     * // Update one MacAddress
     * const macAddress = await prisma.macAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MacAddressUpdateArgs>(
      args: SelectSubset<T, MacAddressUpdateArgs>
    ): Prisma__MacAddressClient<MacAddressGetPayload<T>>

    /**
     * Delete zero or more MacAddresses.
     * @param {MacAddressDeleteManyArgs} args - Arguments to filter MacAddresses to delete.
     * @example
     * // Delete a few MacAddresses
     * const { count } = await prisma.macAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MacAddressDeleteManyArgs>(
      args?: SelectSubset<T, MacAddressDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MacAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MacAddresses
     * const macAddress = await prisma.macAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MacAddressUpdateManyArgs>(
      args: SelectSubset<T, MacAddressUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MacAddress.
     * @param {MacAddressUpsertArgs} args - Arguments to update or create a MacAddress.
     * @example
     * // Update or create a MacAddress
     * const macAddress = await prisma.macAddress.upsert({
     *   create: {
     *     // ... data to create a MacAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MacAddress we want to update
     *   }
     * })
    **/
    upsert<T extends MacAddressUpsertArgs>(
      args: SelectSubset<T, MacAddressUpsertArgs>
    ): Prisma__MacAddressClient<MacAddressGetPayload<T>>

    /**
     * Count the number of MacAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacAddressCountArgs} args - Arguments to filter MacAddresses to count.
     * @example
     * // Count the number of MacAddresses
     * const count = await prisma.macAddress.count({
     *   where: {
     *     // ... the filter for the MacAddresses we want to count
     *   }
     * })
    **/
    count<T extends MacAddressCountArgs>(
      args?: Subset<T, MacAddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MacAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MacAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MacAddressAggregateArgs>(args: Subset<T, MacAddressAggregateArgs>): Prisma.PrismaPromise<GetMacAddressAggregateType<T>>

    /**
     * Group by MacAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MacAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MacAddressGroupByArgs['orderBy'] }
        : { orderBy?: MacAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MacAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMacAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MacAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MacAddressClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    actuator<T extends ActuatorArgs= {}>(args?: Subset<T, ActuatorArgs>): Prisma__ActuatorClient<ActuatorGetPayload<T> | Null>;

    sensor<T extends SensorArgs= {}>(args?: Subset<T, SensorArgs>): Prisma__SensorClient<SensorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MacAddress base type for findUnique actions
   */
  export type MacAddressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    /**
     * Filter, which MacAddress to fetch.
     */
    where: MacAddressWhereUniqueInput
  }

  /**
   * MacAddress findUnique
   */
  export interface MacAddressFindUniqueArgs extends MacAddressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MacAddress findUniqueOrThrow
   */
  export type MacAddressFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    /**
     * Filter, which MacAddress to fetch.
     */
    where: MacAddressWhereUniqueInput
  }


  /**
   * MacAddress base type for findFirst actions
   */
  export type MacAddressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    /**
     * Filter, which MacAddress to fetch.
     */
    where?: MacAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MacAddresses to fetch.
     */
    orderBy?: Enumerable<MacAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MacAddresses.
     */
    cursor?: MacAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MacAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MacAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MacAddresses.
     */
    distinct?: Enumerable<MacAddressScalarFieldEnum>
  }

  /**
   * MacAddress findFirst
   */
  export interface MacAddressFindFirstArgs extends MacAddressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MacAddress findFirstOrThrow
   */
  export type MacAddressFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    /**
     * Filter, which MacAddress to fetch.
     */
    where?: MacAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MacAddresses to fetch.
     */
    orderBy?: Enumerable<MacAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MacAddresses.
     */
    cursor?: MacAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MacAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MacAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MacAddresses.
     */
    distinct?: Enumerable<MacAddressScalarFieldEnum>
  }


  /**
   * MacAddress findMany
   */
  export type MacAddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    /**
     * Filter, which MacAddresses to fetch.
     */
    where?: MacAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MacAddresses to fetch.
     */
    orderBy?: Enumerable<MacAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MacAddresses.
     */
    cursor?: MacAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MacAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MacAddresses.
     */
    skip?: number
    distinct?: Enumerable<MacAddressScalarFieldEnum>
  }


  /**
   * MacAddress create
   */
  export type MacAddressCreateArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    /**
     * The data needed to create a MacAddress.
     */
    data: XOR<MacAddressCreateInput, MacAddressUncheckedCreateInput>
  }


  /**
   * MacAddress createMany
   */
  export type MacAddressCreateManyArgs = {
    /**
     * The data used to create many MacAddresses.
     */
    data: Enumerable<MacAddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MacAddress update
   */
  export type MacAddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    /**
     * The data needed to update a MacAddress.
     */
    data: XOR<MacAddressUpdateInput, MacAddressUncheckedUpdateInput>
    /**
     * Choose, which MacAddress to update.
     */
    where: MacAddressWhereUniqueInput
  }


  /**
   * MacAddress updateMany
   */
  export type MacAddressUpdateManyArgs = {
    /**
     * The data used to update MacAddresses.
     */
    data: XOR<MacAddressUpdateManyMutationInput, MacAddressUncheckedUpdateManyInput>
    /**
     * Filter which MacAddresses to update
     */
    where?: MacAddressWhereInput
  }


  /**
   * MacAddress upsert
   */
  export type MacAddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    /**
     * The filter to search for the MacAddress to update in case it exists.
     */
    where: MacAddressWhereUniqueInput
    /**
     * In case the MacAddress found by the `where` argument doesn't exist, create a new MacAddress with this data.
     */
    create: XOR<MacAddressCreateInput, MacAddressUncheckedCreateInput>
    /**
     * In case the MacAddress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MacAddressUpdateInput, MacAddressUncheckedUpdateInput>
  }


  /**
   * MacAddress delete
   */
  export type MacAddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
    /**
     * Filter which MacAddress to delete.
     */
    where: MacAddressWhereUniqueInput
  }


  /**
   * MacAddress deleteMany
   */
  export type MacAddressDeleteManyArgs = {
    /**
     * Filter which MacAddresses to delete
     */
    where?: MacAddressWhereInput
  }


  /**
   * MacAddress without action
   */
  export type MacAddressArgs = {
    /**
     * Select specific fields to fetch from the MacAddress
     */
    select?: MacAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MacAddressInclude | null
  }



  /**
   * Model Notification
   */


  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id_notification: number | null
    id_actuator: number | null
    id_sensor: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id_notification: number | null
    id_actuator: number | null
    id_sensor: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id_notification: number | null
    detail: string | null
    created_at: Date | null
    type: string | null
    status: string | null
    id_actuator: number | null
    id_sensor: number | null
  }

  export type NotificationMaxAggregateOutputType = {
    id_notification: number | null
    detail: string | null
    created_at: Date | null
    type: string | null
    status: string | null
    id_actuator: number | null
    id_sensor: number | null
  }

  export type NotificationCountAggregateOutputType = {
    id_notification: number
    detail: number
    created_at: number
    type: number
    status: number
    id_actuator: number
    id_sensor: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id_notification?: true
    id_actuator?: true
    id_sensor?: true
  }

  export type NotificationSumAggregateInputType = {
    id_notification?: true
    id_actuator?: true
    id_sensor?: true
  }

  export type NotificationMinAggregateInputType = {
    id_notification?: true
    detail?: true
    created_at?: true
    type?: true
    status?: true
    id_actuator?: true
    id_sensor?: true
  }

  export type NotificationMaxAggregateInputType = {
    id_notification?: true
    detail?: true
    created_at?: true
    type?: true
    status?: true
    id_actuator?: true
    id_sensor?: true
  }

  export type NotificationCountAggregateInputType = {
    id_notification?: true
    detail?: true
    created_at?: true
    type?: true
    status?: true
    id_actuator?: true
    id_sensor?: true
    _all?: true
  }

  export type NotificationAggregateArgs = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs = {
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithAggregationInput>
    by: NotificationScalarFieldEnum[]
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }


  export type NotificationGroupByOutputType = {
    id_notification: number
    detail: string
    created_at: Date
    type: string
    status: string
    id_actuator: number
    id_sensor: number
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect = {
    id_notification?: boolean
    detail?: boolean
    created_at?: boolean
    type?: boolean
    status?: boolean
    id_actuator?: boolean
    id_sensor?: boolean
    actuator?: boolean | ActuatorArgs
    sensor?: boolean | SensorArgs
    Receive?: boolean | Notification$ReceiveArgs
    _count?: boolean | NotificationCountOutputTypeArgs
  }


  export type NotificationInclude = {
    actuator?: boolean | ActuatorArgs
    sensor?: boolean | SensorArgs
    Receive?: boolean | Notification$ReceiveArgs
    _count?: boolean | NotificationCountOutputTypeArgs
  }

  export type NotificationGetPayload<S extends boolean | null | undefined | NotificationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Notification :
    S extends undefined ? never :
    S extends { include: any } & (NotificationArgs | NotificationFindManyArgs)
    ? Notification  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'actuator' ? ActuatorGetPayload<S['include'][P]> | null :
        P extends 'sensor' ? SensorGetPayload<S['include'][P]> | null :
        P extends 'Receive' ? Array < ReceiveGetPayload<S['include'][P]>>  :
        P extends '_count' ? NotificationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (NotificationArgs | NotificationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'actuator' ? ActuatorGetPayload<S['select'][P]> | null :
        P extends 'sensor' ? SensorGetPayload<S['select'][P]> | null :
        P extends 'Receive' ? Array < ReceiveGetPayload<S['select'][P]>>  :
        P extends '_count' ? NotificationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Notification ? Notification[P] : never
  } 
      : Notification


  type NotificationCountArgs = 
    Omit<NotificationFindManyArgs, 'select' | 'include'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NotificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Notification'> extends True ? Prisma__NotificationClient<NotificationGetPayload<T>> : Prisma__NotificationClient<NotificationGetPayload<T> | null, null>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NotificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Notification'> extends True ? Prisma__NotificationClient<NotificationGetPayload<T>> : Prisma__NotificationClient<NotificationGetPayload<T> | null, null>

    /**
     * Find the first Notification that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id_notification`
     * const notificationWithId_notificationOnly = await prisma.notification.findMany({ select: { id_notification: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs>(
      args?: SelectSubset<T, NotificationFindManyArgs>
    ): Prisma.PrismaPromise<Array<NotificationGetPayload<T>>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs>(
      args: SelectSubset<T, NotificationCreateArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs>(
      args?: SelectSubset<T, NotificationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs>(
      args: SelectSubset<T, NotificationDeleteArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs>(
      args: SelectSubset<T, NotificationUpdateArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs>(
      args?: SelectSubset<T, NotificationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs>(
      args: SelectSubset<T, NotificationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs>(
      args: SelectSubset<T, NotificationUpsertArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NotificationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    actuator<T extends ActuatorArgs= {}>(args?: Subset<T, ActuatorArgs>): Prisma__ActuatorClient<ActuatorGetPayload<T> | Null>;

    sensor<T extends SensorArgs= {}>(args?: Subset<T, SensorArgs>): Prisma__SensorClient<SensorGetPayload<T> | Null>;

    Receive<T extends Notification$ReceiveArgs= {}>(args?: Subset<T, Notification$ReceiveArgs>): Prisma.PrismaPromise<Array<ReceiveGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Notification base type for findUnique actions
   */
  export type NotificationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUnique
   */
  export interface NotificationFindUniqueArgs extends NotificationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification base type for findFirst actions
   */
  export type NotificationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }

  /**
   * Notification findFirst
   */
  export interface NotificationFindFirstArgs extends NotificationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs = {
    /**
     * The data used to create many Notifications.
     */
    data: Enumerable<NotificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification.Receive
   */
  export type Notification$ReceiveArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    where?: ReceiveWhereInput
    orderBy?: Enumerable<ReceiveOrderByWithRelationInput>
    cursor?: ReceiveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReceiveScalarFieldEnum>
  }


  /**
   * Notification without action
   */
  export type NotificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
  }



  /**
   * Model Receive
   */


  export type AggregateReceive = {
    _count: ReceiveCountAggregateOutputType | null
    _avg: ReceiveAvgAggregateOutputType | null
    _sum: ReceiveSumAggregateOutputType | null
    _min: ReceiveMinAggregateOutputType | null
    _max: ReceiveMaxAggregateOutputType | null
  }

  export type ReceiveAvgAggregateOutputType = {
    id_user: number | null
    id_notification: number | null
    id_receive: number | null
  }

  export type ReceiveSumAggregateOutputType = {
    id_user: number | null
    id_notification: number | null
    id_receive: number | null
  }

  export type ReceiveMinAggregateOutputType = {
    id_user: number | null
    id_notification: number | null
    id_receive: number | null
  }

  export type ReceiveMaxAggregateOutputType = {
    id_user: number | null
    id_notification: number | null
    id_receive: number | null
  }

  export type ReceiveCountAggregateOutputType = {
    id_user: number
    id_notification: number
    id_receive: number
    _all: number
  }


  export type ReceiveAvgAggregateInputType = {
    id_user?: true
    id_notification?: true
    id_receive?: true
  }

  export type ReceiveSumAggregateInputType = {
    id_user?: true
    id_notification?: true
    id_receive?: true
  }

  export type ReceiveMinAggregateInputType = {
    id_user?: true
    id_notification?: true
    id_receive?: true
  }

  export type ReceiveMaxAggregateInputType = {
    id_user?: true
    id_notification?: true
    id_receive?: true
  }

  export type ReceiveCountAggregateInputType = {
    id_user?: true
    id_notification?: true
    id_receive?: true
    _all?: true
  }

  export type ReceiveAggregateArgs = {
    /**
     * Filter which Receive to aggregate.
     */
    where?: ReceiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receives to fetch.
     */
    orderBy?: Enumerable<ReceiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Receives
    **/
    _count?: true | ReceiveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiveMaxAggregateInputType
  }

  export type GetReceiveAggregateType<T extends ReceiveAggregateArgs> = {
        [P in keyof T & keyof AggregateReceive]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceive[P]>
      : GetScalarType<T[P], AggregateReceive[P]>
  }




  export type ReceiveGroupByArgs = {
    where?: ReceiveWhereInput
    orderBy?: Enumerable<ReceiveOrderByWithAggregationInput>
    by: ReceiveScalarFieldEnum[]
    having?: ReceiveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiveCountAggregateInputType | true
    _avg?: ReceiveAvgAggregateInputType
    _sum?: ReceiveSumAggregateInputType
    _min?: ReceiveMinAggregateInputType
    _max?: ReceiveMaxAggregateInputType
  }


  export type ReceiveGroupByOutputType = {
    id_user: number
    id_notification: number
    id_receive: number
    _count: ReceiveCountAggregateOutputType | null
    _avg: ReceiveAvgAggregateOutputType | null
    _sum: ReceiveSumAggregateOutputType | null
    _min: ReceiveMinAggregateOutputType | null
    _max: ReceiveMaxAggregateOutputType | null
  }

  type GetReceiveGroupByPayload<T extends ReceiveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReceiveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiveGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiveGroupByOutputType[P]>
        }
      >
    >


  export type ReceiveSelect = {
    id_user?: boolean
    id_notification?: boolean
    id_receive?: boolean
    user?: boolean | UserArgs
    notification?: boolean | NotificationArgs
  }


  export type ReceiveInclude = {
    user?: boolean | UserArgs
    notification?: boolean | NotificationArgs
  }

  export type ReceiveGetPayload<S extends boolean | null | undefined | ReceiveArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Receive :
    S extends undefined ? never :
    S extends { include: any } & (ReceiveArgs | ReceiveFindManyArgs)
    ? Receive  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :
        P extends 'notification' ? NotificationGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ReceiveArgs | ReceiveFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :
        P extends 'notification' ? NotificationGetPayload<S['select'][P]> | null :  P extends keyof Receive ? Receive[P] : never
  } 
      : Receive


  type ReceiveCountArgs = 
    Omit<ReceiveFindManyArgs, 'select' | 'include'> & {
      select?: ReceiveCountAggregateInputType | true
    }

  export interface ReceiveDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Receive that matches the filter.
     * @param {ReceiveFindUniqueArgs} args - Arguments to find a Receive
     * @example
     * // Get one Receive
     * const receive = await prisma.receive.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReceiveFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReceiveFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Receive'> extends True ? Prisma__ReceiveClient<ReceiveGetPayload<T>> : Prisma__ReceiveClient<ReceiveGetPayload<T> | null, null>

    /**
     * Find one Receive that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReceiveFindUniqueOrThrowArgs} args - Arguments to find a Receive
     * @example
     * // Get one Receive
     * const receive = await prisma.receive.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReceiveFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReceiveFindUniqueOrThrowArgs>
    ): Prisma__ReceiveClient<ReceiveGetPayload<T>>

    /**
     * Find the first Receive that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiveFindFirstArgs} args - Arguments to find a Receive
     * @example
     * // Get one Receive
     * const receive = await prisma.receive.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReceiveFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReceiveFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Receive'> extends True ? Prisma__ReceiveClient<ReceiveGetPayload<T>> : Prisma__ReceiveClient<ReceiveGetPayload<T> | null, null>

    /**
     * Find the first Receive that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiveFindFirstOrThrowArgs} args - Arguments to find a Receive
     * @example
     * // Get one Receive
     * const receive = await prisma.receive.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReceiveFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReceiveFindFirstOrThrowArgs>
    ): Prisma__ReceiveClient<ReceiveGetPayload<T>>

    /**
     * Find zero or more Receives that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiveFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receives
     * const receives = await prisma.receive.findMany()
     * 
     * // Get first 10 Receives
     * const receives = await prisma.receive.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const receiveWithId_userOnly = await prisma.receive.findMany({ select: { id_user: true } })
     * 
    **/
    findMany<T extends ReceiveFindManyArgs>(
      args?: SelectSubset<T, ReceiveFindManyArgs>
    ): Prisma.PrismaPromise<Array<ReceiveGetPayload<T>>>

    /**
     * Create a Receive.
     * @param {ReceiveCreateArgs} args - Arguments to create a Receive.
     * @example
     * // Create one Receive
     * const Receive = await prisma.receive.create({
     *   data: {
     *     // ... data to create a Receive
     *   }
     * })
     * 
    **/
    create<T extends ReceiveCreateArgs>(
      args: SelectSubset<T, ReceiveCreateArgs>
    ): Prisma__ReceiveClient<ReceiveGetPayload<T>>

    /**
     * Create many Receives.
     *     @param {ReceiveCreateManyArgs} args - Arguments to create many Receives.
     *     @example
     *     // Create many Receives
     *     const receive = await prisma.receive.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReceiveCreateManyArgs>(
      args?: SelectSubset<T, ReceiveCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Receive.
     * @param {ReceiveDeleteArgs} args - Arguments to delete one Receive.
     * @example
     * // Delete one Receive
     * const Receive = await prisma.receive.delete({
     *   where: {
     *     // ... filter to delete one Receive
     *   }
     * })
     * 
    **/
    delete<T extends ReceiveDeleteArgs>(
      args: SelectSubset<T, ReceiveDeleteArgs>
    ): Prisma__ReceiveClient<ReceiveGetPayload<T>>

    /**
     * Update one Receive.
     * @param {ReceiveUpdateArgs} args - Arguments to update one Receive.
     * @example
     * // Update one Receive
     * const receive = await prisma.receive.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReceiveUpdateArgs>(
      args: SelectSubset<T, ReceiveUpdateArgs>
    ): Prisma__ReceiveClient<ReceiveGetPayload<T>>

    /**
     * Delete zero or more Receives.
     * @param {ReceiveDeleteManyArgs} args - Arguments to filter Receives to delete.
     * @example
     * // Delete a few Receives
     * const { count } = await prisma.receive.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReceiveDeleteManyArgs>(
      args?: SelectSubset<T, ReceiveDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receives
     * const receive = await prisma.receive.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReceiveUpdateManyArgs>(
      args: SelectSubset<T, ReceiveUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Receive.
     * @param {ReceiveUpsertArgs} args - Arguments to update or create a Receive.
     * @example
     * // Update or create a Receive
     * const receive = await prisma.receive.upsert({
     *   create: {
     *     // ... data to create a Receive
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receive we want to update
     *   }
     * })
    **/
    upsert<T extends ReceiveUpsertArgs>(
      args: SelectSubset<T, ReceiveUpsertArgs>
    ): Prisma__ReceiveClient<ReceiveGetPayload<T>>

    /**
     * Count the number of Receives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiveCountArgs} args - Arguments to filter Receives to count.
     * @example
     * // Count the number of Receives
     * const count = await prisma.receive.count({
     *   where: {
     *     // ... the filter for the Receives we want to count
     *   }
     * })
    **/
    count<T extends ReceiveCountArgs>(
      args?: Subset<T, ReceiveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receive.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiveAggregateArgs>(args: Subset<T, ReceiveAggregateArgs>): Prisma.PrismaPromise<GetReceiveAggregateType<T>>

    /**
     * Group by Receive.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiveGroupByArgs['orderBy'] }
        : { orderBy?: ReceiveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Receive.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReceiveClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    notification<T extends NotificationArgs= {}>(args?: Subset<T, NotificationArgs>): Prisma__NotificationClient<NotificationGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Receive base type for findUnique actions
   */
  export type ReceiveFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    /**
     * Filter, which Receive to fetch.
     */
    where: ReceiveWhereUniqueInput
  }

  /**
   * Receive findUnique
   */
  export interface ReceiveFindUniqueArgs extends ReceiveFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Receive findUniqueOrThrow
   */
  export type ReceiveFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    /**
     * Filter, which Receive to fetch.
     */
    where: ReceiveWhereUniqueInput
  }


  /**
   * Receive base type for findFirst actions
   */
  export type ReceiveFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    /**
     * Filter, which Receive to fetch.
     */
    where?: ReceiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receives to fetch.
     */
    orderBy?: Enumerable<ReceiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receives.
     */
    cursor?: ReceiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receives.
     */
    distinct?: Enumerable<ReceiveScalarFieldEnum>
  }

  /**
   * Receive findFirst
   */
  export interface ReceiveFindFirstArgs extends ReceiveFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Receive findFirstOrThrow
   */
  export type ReceiveFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    /**
     * Filter, which Receive to fetch.
     */
    where?: ReceiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receives to fetch.
     */
    orderBy?: Enumerable<ReceiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receives.
     */
    cursor?: ReceiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receives.
     */
    distinct?: Enumerable<ReceiveScalarFieldEnum>
  }


  /**
   * Receive findMany
   */
  export type ReceiveFindManyArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    /**
     * Filter, which Receives to fetch.
     */
    where?: ReceiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receives to fetch.
     */
    orderBy?: Enumerable<ReceiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Receives.
     */
    cursor?: ReceiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receives.
     */
    skip?: number
    distinct?: Enumerable<ReceiveScalarFieldEnum>
  }


  /**
   * Receive create
   */
  export type ReceiveCreateArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    /**
     * The data needed to create a Receive.
     */
    data: XOR<ReceiveCreateInput, ReceiveUncheckedCreateInput>
  }


  /**
   * Receive createMany
   */
  export type ReceiveCreateManyArgs = {
    /**
     * The data used to create many Receives.
     */
    data: Enumerable<ReceiveCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Receive update
   */
  export type ReceiveUpdateArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    /**
     * The data needed to update a Receive.
     */
    data: XOR<ReceiveUpdateInput, ReceiveUncheckedUpdateInput>
    /**
     * Choose, which Receive to update.
     */
    where: ReceiveWhereUniqueInput
  }


  /**
   * Receive updateMany
   */
  export type ReceiveUpdateManyArgs = {
    /**
     * The data used to update Receives.
     */
    data: XOR<ReceiveUpdateManyMutationInput, ReceiveUncheckedUpdateManyInput>
    /**
     * Filter which Receives to update
     */
    where?: ReceiveWhereInput
  }


  /**
   * Receive upsert
   */
  export type ReceiveUpsertArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    /**
     * The filter to search for the Receive to update in case it exists.
     */
    where: ReceiveWhereUniqueInput
    /**
     * In case the Receive found by the `where` argument doesn't exist, create a new Receive with this data.
     */
    create: XOR<ReceiveCreateInput, ReceiveUncheckedCreateInput>
    /**
     * In case the Receive was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiveUpdateInput, ReceiveUncheckedUpdateInput>
  }


  /**
   * Receive delete
   */
  export type ReceiveDeleteArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
    /**
     * Filter which Receive to delete.
     */
    where: ReceiveWhereUniqueInput
  }


  /**
   * Receive deleteMany
   */
  export type ReceiveDeleteManyArgs = {
    /**
     * Filter which Receives to delete
     */
    where?: ReceiveWhereInput
  }


  /**
   * Receive without action
   */
  export type ReceiveArgs = {
    /**
     * Select specific fields to fetch from the Receive
     */
    select?: ReceiveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReceiveInclude | null
  }



  /**
   * Enums
   */

  export const ActuatorLogScalarFieldEnum: {
    id_actuator_log: 'id_actuator_log',
    created_at: 'created_at',
    on_off_status: 'on_off_status',
    id_actuator: 'id_actuator',
    actuatorId_actuator: 'actuatorId_actuator'
  };

  export type ActuatorLogScalarFieldEnum = (typeof ActuatorLogScalarFieldEnum)[keyof typeof ActuatorLogScalarFieldEnum]


  export const ActuatorScalarFieldEnum: {
    id_actuator: 'id_actuator',
    name: 'name',
    status_lifecycle: 'status_lifecycle',
    created_at: 'created_at',
    updated_at: 'updated_at',
    icon: 'icon',
    color: 'color',
    id_greenhouse: 'id_greenhouse'
  };

  export type ActuatorScalarFieldEnum = (typeof ActuatorScalarFieldEnum)[keyof typeof ActuatorScalarFieldEnum]


  export const AutomationScalarFieldEnum: {
    id_actuator: 'id_actuator',
    id_sensor: 'id_sensor',
    condition: 'condition',
    status_lifecycle: 'status_lifecycle',
    id_automation: 'id_automation',
    created_at: 'created_at',
    updated_at: 'updated_at',
    constanta: 'constanta',
    sensorId_sensor: 'sensorId_sensor'
  };

  export type AutomationScalarFieldEnum = (typeof AutomationScalarFieldEnum)[keyof typeof AutomationScalarFieldEnum]


  export const CategorySensorScalarFieldEnum: {
    id_category_sensor: 'id_category_sensor',
    name: 'name'
  };

  export type CategorySensorScalarFieldEnum = (typeof CategorySensorScalarFieldEnum)[keyof typeof CategorySensorScalarFieldEnum]


  export const GreenhouseScalarFieldEnum: {
    id_grenhouse: 'id_grenhouse',
    name: 'name',
    image: 'image',
    location: 'location',
    created_at: 'created_at',
    updated_at: 'updated_at',
    id_user: 'id_user'
  };

  export type GreenhouseScalarFieldEnum = (typeof GreenhouseScalarFieldEnum)[keyof typeof GreenhouseScalarFieldEnum]


  export const IconScalarFieldEnum: {
    id_icon: 'id_icon',
    name: 'name',
    icon: 'icon',
    type: 'type',
    color: 'color'
  };

  export type IconScalarFieldEnum = (typeof IconScalarFieldEnum)[keyof typeof IconScalarFieldEnum]


  export const MacAddressScalarFieldEnum: {
    id_sensor: 'id_sensor',
    id_actuator: 'id_actuator',
    mac_address: 'mac_address',
    id_mac: 'id_mac'
  };

  export type MacAddressScalarFieldEnum = (typeof MacAddressScalarFieldEnum)[keyof typeof MacAddressScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id_notification: 'id_notification',
    detail: 'detail',
    created_at: 'created_at',
    type: 'type',
    status: 'status',
    id_actuator: 'id_actuator',
    id_sensor: 'id_sensor'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ReceiveScalarFieldEnum: {
    id_user: 'id_user',
    id_notification: 'id_notification',
    id_receive: 'id_receive'
  };

  export type ReceiveScalarFieldEnum = (typeof ReceiveScalarFieldEnum)[keyof typeof ReceiveScalarFieldEnum]


  export const SensorScalarFieldEnum: {
    id_sensor: 'id_sensor',
    name: 'name',
    unit_measurement: 'unit_measurement',
    brand: 'brand',
    created_at: 'created_at',
    updated_at: 'updated_at',
    icon: 'icon',
    color: 'color',
    id_greenhouse: 'id_greenhouse',
    range_min: 'range_min',
    range_max: 'range_max',
    id_category_sensor: 'id_category_sensor',
    notify: 'notify',
    calibration: 'calibration'
  };

  export type SensorScalarFieldEnum = (typeof SensorScalarFieldEnum)[keyof typeof SensorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id_user: 'id_user',
    email: 'email',
    name: 'name',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id_user?: IntFilter | number
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    password?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    grenhouse?: GreenhouseListRelationFilter
    Receive?: ReceiveListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id_user?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    grenhouse?: GreenhouseOrderByRelationAggregateInput
    Receive?: ReceiveOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id_user?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id_user?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id_user?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    password?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GreenhouseWhereInput = {
    AND?: Enumerable<GreenhouseWhereInput>
    OR?: Enumerable<GreenhouseWhereInput>
    NOT?: Enumerable<GreenhouseWhereInput>
    id_grenhouse?: IntFilter | number
    name?: StringFilter | string
    image?: StringFilter | string
    location?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    id_user?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    sensor?: SensorListRelationFilter
    Actuator?: ActuatorListRelationFilter
  }

  export type GreenhouseOrderByWithRelationInput = {
    id_grenhouse?: SortOrder
    name?: SortOrder
    image?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id_user?: SortOrder
    user?: UserOrderByWithRelationInput
    sensor?: SensorOrderByRelationAggregateInput
    Actuator?: ActuatorOrderByRelationAggregateInput
  }

  export type GreenhouseWhereUniqueInput = {
    id_grenhouse?: number
  }

  export type GreenhouseOrderByWithAggregationInput = {
    id_grenhouse?: SortOrder
    name?: SortOrder
    image?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id_user?: SortOrder
    _count?: GreenhouseCountOrderByAggregateInput
    _avg?: GreenhouseAvgOrderByAggregateInput
    _max?: GreenhouseMaxOrderByAggregateInput
    _min?: GreenhouseMinOrderByAggregateInput
    _sum?: GreenhouseSumOrderByAggregateInput
  }

  export type GreenhouseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GreenhouseScalarWhereWithAggregatesInput>
    OR?: Enumerable<GreenhouseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GreenhouseScalarWhereWithAggregatesInput>
    id_grenhouse?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    id_user?: IntWithAggregatesFilter | number
  }

  export type SensorWhereInput = {
    AND?: Enumerable<SensorWhereInput>
    OR?: Enumerable<SensorWhereInput>
    NOT?: Enumerable<SensorWhereInput>
    id_sensor?: IntFilter | number
    name?: StringNullableFilter | string | null
    unit_measurement?: StringFilter | string
    brand?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    icon?: StringFilter | string
    color?: StringFilter | string
    id_greenhouse?: IntFilter | number
    range_min?: IntFilter | number
    range_max?: IntFilter | number
    id_category_sensor?: IntFilter | number
    notify?: BoolFilter | boolean
    calibration?: StringFilter | string
    greenhouse?: XOR<GreenhouseRelationFilter, GreenhouseWhereInput> | null
    categorySensor?: XOR<CategorySensorRelationFilter, CategorySensorWhereInput> | null
    automation?: AutomationListRelationFilter
    MacAddress?: MacAddressListRelationFilter
    Notification?: NotificationListRelationFilter
  }

  export type SensorOrderByWithRelationInput = {
    id_sensor?: SortOrder
    name?: SortOrder
    unit_measurement?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
    range_min?: SortOrder
    range_max?: SortOrder
    id_category_sensor?: SortOrder
    notify?: SortOrder
    calibration?: SortOrder
    greenhouse?: GreenhouseOrderByWithRelationInput
    categorySensor?: CategorySensorOrderByWithRelationInput
    automation?: AutomationOrderByRelationAggregateInput
    MacAddress?: MacAddressOrderByRelationAggregateInput
    Notification?: NotificationOrderByRelationAggregateInput
  }

  export type SensorWhereUniqueInput = {
    id_sensor?: number
    brand?: number
  }

  export type SensorOrderByWithAggregationInput = {
    id_sensor?: SortOrder
    name?: SortOrder
    unit_measurement?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
    range_min?: SortOrder
    range_max?: SortOrder
    id_category_sensor?: SortOrder
    notify?: SortOrder
    calibration?: SortOrder
    _count?: SensorCountOrderByAggregateInput
    _avg?: SensorAvgOrderByAggregateInput
    _max?: SensorMaxOrderByAggregateInput
    _min?: SensorMinOrderByAggregateInput
    _sum?: SensorSumOrderByAggregateInput
  }

  export type SensorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SensorScalarWhereWithAggregatesInput>
    OR?: Enumerable<SensorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SensorScalarWhereWithAggregatesInput>
    id_sensor?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    unit_measurement?: StringWithAggregatesFilter | string
    brand?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    icon?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
    id_greenhouse?: IntWithAggregatesFilter | number
    range_min?: IntWithAggregatesFilter | number
    range_max?: IntWithAggregatesFilter | number
    id_category_sensor?: IntWithAggregatesFilter | number
    notify?: BoolWithAggregatesFilter | boolean
    calibration?: StringWithAggregatesFilter | string
  }

  export type CategorySensorWhereInput = {
    AND?: Enumerable<CategorySensorWhereInput>
    OR?: Enumerable<CategorySensorWhereInput>
    NOT?: Enumerable<CategorySensorWhereInput>
    id_category_sensor?: IntFilter | number
    name?: StringNullableFilter | string | null
    Sensor?: SensorListRelationFilter
  }

  export type CategorySensorOrderByWithRelationInput = {
    id_category_sensor?: SortOrder
    name?: SortOrder
    Sensor?: SensorOrderByRelationAggregateInput
  }

  export type CategorySensorWhereUniqueInput = {
    id_category_sensor?: number
  }

  export type CategorySensorOrderByWithAggregationInput = {
    id_category_sensor?: SortOrder
    name?: SortOrder
    _count?: CategorySensorCountOrderByAggregateInput
    _avg?: CategorySensorAvgOrderByAggregateInput
    _max?: CategorySensorMaxOrderByAggregateInput
    _min?: CategorySensorMinOrderByAggregateInput
    _sum?: CategorySensorSumOrderByAggregateInput
  }

  export type CategorySensorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategorySensorScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategorySensorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategorySensorScalarWhereWithAggregatesInput>
    id_category_sensor?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
  }

  export type ActuatorWhereInput = {
    AND?: Enumerable<ActuatorWhereInput>
    OR?: Enumerable<ActuatorWhereInput>
    NOT?: Enumerable<ActuatorWhereInput>
    id_actuator?: IntFilter | number
    name?: StringFilter | string
    status_lifecycle?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    icon?: StringFilter | string
    color?: StringFilter | string
    id_greenhouse?: IntFilter | number
    greenhouse?: XOR<GreenhouseRelationFilter, GreenhouseWhereInput> | null
    automation?: AutomationListRelationFilter
    actuatorLog?: ActuatorLogListRelationFilter
    MacAddress?: MacAddressListRelationFilter
    Notification?: NotificationListRelationFilter
  }

  export type ActuatorOrderByWithRelationInput = {
    id_actuator?: SortOrder
    name?: SortOrder
    status_lifecycle?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
    greenhouse?: GreenhouseOrderByWithRelationInput
    automation?: AutomationOrderByRelationAggregateInput
    actuatorLog?: ActuatorLogOrderByRelationAggregateInput
    MacAddress?: MacAddressOrderByRelationAggregateInput
    Notification?: NotificationOrderByRelationAggregateInput
  }

  export type ActuatorWhereUniqueInput = {
    id_actuator?: number
  }

  export type ActuatorOrderByWithAggregationInput = {
    id_actuator?: SortOrder
    name?: SortOrder
    status_lifecycle?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
    _count?: ActuatorCountOrderByAggregateInput
    _avg?: ActuatorAvgOrderByAggregateInput
    _max?: ActuatorMaxOrderByAggregateInput
    _min?: ActuatorMinOrderByAggregateInput
    _sum?: ActuatorSumOrderByAggregateInput
  }

  export type ActuatorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ActuatorScalarWhereWithAggregatesInput>
    OR?: Enumerable<ActuatorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ActuatorScalarWhereWithAggregatesInput>
    id_actuator?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    status_lifecycle?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    icon?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
    id_greenhouse?: IntWithAggregatesFilter | number
  }

  export type AutomationWhereInput = {
    AND?: Enumerable<AutomationWhereInput>
    OR?: Enumerable<AutomationWhereInput>
    NOT?: Enumerable<AutomationWhereInput>
    id_actuator?: IntFilter | number
    id_sensor?: IntFilter | number
    condition?: StringFilter | string
    status_lifecycle?: IntFilter | number
    id_automation?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    constanta?: IntFilter | number
    sensorId_sensor?: IntNullableFilter | number | null
    sensor?: XOR<SensorRelationFilter, SensorWhereInput> | null
    Actuator?: XOR<ActuatorRelationFilter, ActuatorWhereInput>
  }

  export type AutomationOrderByWithRelationInput = {
    id_actuator?: SortOrder
    id_sensor?: SortOrder
    condition?: SortOrder
    status_lifecycle?: SortOrder
    id_automation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    constanta?: SortOrder
    sensorId_sensor?: SortOrder
    sensor?: SensorOrderByWithRelationInput
    Actuator?: ActuatorOrderByWithRelationInput
  }

  export type AutomationWhereUniqueInput = {
    id_automation?: number
  }

  export type AutomationOrderByWithAggregationInput = {
    id_actuator?: SortOrder
    id_sensor?: SortOrder
    condition?: SortOrder
    status_lifecycle?: SortOrder
    id_automation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    constanta?: SortOrder
    sensorId_sensor?: SortOrder
    _count?: AutomationCountOrderByAggregateInput
    _avg?: AutomationAvgOrderByAggregateInput
    _max?: AutomationMaxOrderByAggregateInput
    _min?: AutomationMinOrderByAggregateInput
    _sum?: AutomationSumOrderByAggregateInput
  }

  export type AutomationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AutomationScalarWhereWithAggregatesInput>
    OR?: Enumerable<AutomationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AutomationScalarWhereWithAggregatesInput>
    id_actuator?: IntWithAggregatesFilter | number
    id_sensor?: IntWithAggregatesFilter | number
    condition?: StringWithAggregatesFilter | string
    status_lifecycle?: IntWithAggregatesFilter | number
    id_automation?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    constanta?: IntWithAggregatesFilter | number
    sensorId_sensor?: IntNullableWithAggregatesFilter | number | null
  }

  export type ActuatorLogWhereInput = {
    AND?: Enumerable<ActuatorLogWhereInput>
    OR?: Enumerable<ActuatorLogWhereInput>
    NOT?: Enumerable<ActuatorLogWhereInput>
    id_actuator_log?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    on_off_status?: BoolFilter | boolean
    id_actuator?: IntFilter | number
    actuatorId_actuator?: IntNullableFilter | number | null
    Actuator?: XOR<ActuatorRelationFilter, ActuatorWhereInput> | null
  }

  export type ActuatorLogOrderByWithRelationInput = {
    id_actuator_log?: SortOrder
    created_at?: SortOrder
    on_off_status?: SortOrder
    id_actuator?: SortOrder
    actuatorId_actuator?: SortOrder
    Actuator?: ActuatorOrderByWithRelationInput
  }

  export type ActuatorLogWhereUniqueInput = {
    id_actuator_log?: number
  }

  export type ActuatorLogOrderByWithAggregationInput = {
    id_actuator_log?: SortOrder
    created_at?: SortOrder
    on_off_status?: SortOrder
    id_actuator?: SortOrder
    actuatorId_actuator?: SortOrder
    _count?: ActuatorLogCountOrderByAggregateInput
    _avg?: ActuatorLogAvgOrderByAggregateInput
    _max?: ActuatorLogMaxOrderByAggregateInput
    _min?: ActuatorLogMinOrderByAggregateInput
    _sum?: ActuatorLogSumOrderByAggregateInput
  }

  export type ActuatorLogScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ActuatorLogScalarWhereWithAggregatesInput>
    OR?: Enumerable<ActuatorLogScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ActuatorLogScalarWhereWithAggregatesInput>
    id_actuator_log?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    on_off_status?: BoolWithAggregatesFilter | boolean
    id_actuator?: IntWithAggregatesFilter | number
    actuatorId_actuator?: IntNullableWithAggregatesFilter | number | null
  }

  export type IconWhereInput = {
    AND?: Enumerable<IconWhereInput>
    OR?: Enumerable<IconWhereInput>
    NOT?: Enumerable<IconWhereInput>
    id_icon?: IntFilter | number
    name?: StringFilter | string
    icon?: StringFilter | string
    type?: StringFilter | string
    color?: StringFilter | string
  }

  export type IconOrderByWithRelationInput = {
    id_icon?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    type?: SortOrder
    color?: SortOrder
  }

  export type IconWhereUniqueInput = {
    id_icon?: number
  }

  export type IconOrderByWithAggregationInput = {
    id_icon?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    type?: SortOrder
    color?: SortOrder
    _count?: IconCountOrderByAggregateInput
    _avg?: IconAvgOrderByAggregateInput
    _max?: IconMaxOrderByAggregateInput
    _min?: IconMinOrderByAggregateInput
    _sum?: IconSumOrderByAggregateInput
  }

  export type IconScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IconScalarWhereWithAggregatesInput>
    OR?: Enumerable<IconScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IconScalarWhereWithAggregatesInput>
    id_icon?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    icon?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
  }

  export type MacAddressWhereInput = {
    AND?: Enumerable<MacAddressWhereInput>
    OR?: Enumerable<MacAddressWhereInput>
    NOT?: Enumerable<MacAddressWhereInput>
    id_sensor?: IntFilter | number
    id_actuator?: IntFilter | number
    mac_address?: StringFilter | string
    id_mac?: IntFilter | number
    actuator?: XOR<ActuatorRelationFilter, ActuatorWhereInput> | null
    sensor?: XOR<SensorRelationFilter, SensorWhereInput> | null
  }

  export type MacAddressOrderByWithRelationInput = {
    id_sensor?: SortOrder
    id_actuator?: SortOrder
    mac_address?: SortOrder
    id_mac?: SortOrder
    actuator?: ActuatorOrderByWithRelationInput
    sensor?: SensorOrderByWithRelationInput
  }

  export type MacAddressWhereUniqueInput = {
    id_mac?: number
  }

  export type MacAddressOrderByWithAggregationInput = {
    id_sensor?: SortOrder
    id_actuator?: SortOrder
    mac_address?: SortOrder
    id_mac?: SortOrder
    _count?: MacAddressCountOrderByAggregateInput
    _avg?: MacAddressAvgOrderByAggregateInput
    _max?: MacAddressMaxOrderByAggregateInput
    _min?: MacAddressMinOrderByAggregateInput
    _sum?: MacAddressSumOrderByAggregateInput
  }

  export type MacAddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MacAddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<MacAddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MacAddressScalarWhereWithAggregatesInput>
    id_sensor?: IntWithAggregatesFilter | number
    id_actuator?: IntWithAggregatesFilter | number
    mac_address?: StringWithAggregatesFilter | string
    id_mac?: IntWithAggregatesFilter | number
  }

  export type NotificationWhereInput = {
    AND?: Enumerable<NotificationWhereInput>
    OR?: Enumerable<NotificationWhereInput>
    NOT?: Enumerable<NotificationWhereInput>
    id_notification?: IntFilter | number
    detail?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    type?: StringFilter | string
    status?: StringFilter | string
    id_actuator?: IntFilter | number
    id_sensor?: IntFilter | number
    actuator?: XOR<ActuatorRelationFilter, ActuatorWhereInput> | null
    sensor?: XOR<SensorRelationFilter, SensorWhereInput> | null
    Receive?: ReceiveListRelationFilter
  }

  export type NotificationOrderByWithRelationInput = {
    id_notification?: SortOrder
    detail?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    status?: SortOrder
    id_actuator?: SortOrder
    id_sensor?: SortOrder
    actuator?: ActuatorOrderByWithRelationInput
    sensor?: SensorOrderByWithRelationInput
    Receive?: ReceiveOrderByRelationAggregateInput
  }

  export type NotificationWhereUniqueInput = {
    id_notification?: number
  }

  export type NotificationOrderByWithAggregationInput = {
    id_notification?: SortOrder
    detail?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    status?: SortOrder
    id_actuator?: SortOrder
    id_sensor?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    id_notification?: IntWithAggregatesFilter | number
    detail?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    type?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    id_actuator?: IntWithAggregatesFilter | number
    id_sensor?: IntWithAggregatesFilter | number
  }

  export type ReceiveWhereInput = {
    AND?: Enumerable<ReceiveWhereInput>
    OR?: Enumerable<ReceiveWhereInput>
    NOT?: Enumerable<ReceiveWhereInput>
    id_user?: IntFilter | number
    id_notification?: IntFilter | number
    id_receive?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput> | null
  }

  export type ReceiveOrderByWithRelationInput = {
    id_user?: SortOrder
    id_notification?: SortOrder
    id_receive?: SortOrder
    user?: UserOrderByWithRelationInput
    notification?: NotificationOrderByWithRelationInput
  }

  export type ReceiveWhereUniqueInput = {
    id_receive?: number
  }

  export type ReceiveOrderByWithAggregationInput = {
    id_user?: SortOrder
    id_notification?: SortOrder
    id_receive?: SortOrder
    _count?: ReceiveCountOrderByAggregateInput
    _avg?: ReceiveAvgOrderByAggregateInput
    _max?: ReceiveMaxOrderByAggregateInput
    _min?: ReceiveMinOrderByAggregateInput
    _sum?: ReceiveSumOrderByAggregateInput
  }

  export type ReceiveScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReceiveScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReceiveScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReceiveScalarWhereWithAggregatesInput>
    id_user?: IntWithAggregatesFilter | number
    id_notification?: IntWithAggregatesFilter | number
    id_receive?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    email: string
    name?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    grenhouse?: GreenhouseCreateNestedManyWithoutUserInput
    Receive?: ReceiveCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id_user?: number
    email: string
    name?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    grenhouse?: GreenhouseUncheckedCreateNestedManyWithoutUserInput
    Receive?: ReceiveUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grenhouse?: GreenhouseUpdateManyWithoutUserNestedInput
    Receive?: ReceiveUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grenhouse?: GreenhouseUncheckedUpdateManyWithoutUserNestedInput
    Receive?: ReceiveUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id_user?: number
    email: string
    name?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GreenhouseCreateInput = {
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutGrenhouseInput
    sensor?: SensorCreateNestedManyWithoutGreenhouseInput
    Actuator?: ActuatorCreateNestedManyWithoutGreenhouseInput
  }

  export type GreenhouseUncheckedCreateInput = {
    id_grenhouse?: number
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
    id_user: number
    sensor?: SensorUncheckedCreateNestedManyWithoutGreenhouseInput
    Actuator?: ActuatorUncheckedCreateNestedManyWithoutGreenhouseInput
  }

  export type GreenhouseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutGrenhouseNestedInput
    sensor?: SensorUpdateManyWithoutGreenhouseNestedInput
    Actuator?: ActuatorUpdateManyWithoutGreenhouseNestedInput
  }

  export type GreenhouseUncheckedUpdateInput = {
    id_grenhouse?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id_user?: IntFieldUpdateOperationsInput | number
    sensor?: SensorUncheckedUpdateManyWithoutGreenhouseNestedInput
    Actuator?: ActuatorUncheckedUpdateManyWithoutGreenhouseNestedInput
  }

  export type GreenhouseCreateManyInput = {
    id_grenhouse?: number
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
    id_user: number
  }

  export type GreenhouseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GreenhouseUncheckedUpdateManyInput = {
    id_grenhouse?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id_user?: IntFieldUpdateOperationsInput | number
  }

  export type SensorCreateInput = {
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    range_min: number
    range_max: number
    notify: boolean
    calibration: string
    greenhouse?: GreenhouseCreateNestedOneWithoutSensorInput
    categorySensor?: CategorySensorCreateNestedOneWithoutSensorInput
    automation?: AutomationCreateNestedManyWithoutSensorInput
    MacAddress?: MacAddressCreateNestedManyWithoutSensorInput
    Notification?: NotificationCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateInput = {
    id_sensor?: number
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    range_min: number
    range_max: number
    id_category_sensor: number
    notify: boolean
    calibration: string
    automation?: AutomationUncheckedCreateNestedManyWithoutSensorInput
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutSensorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutSensorNestedInput
    categorySensor?: CategorySensorUpdateOneWithoutSensorNestedInput
    automation?: AutomationUpdateManyWithoutSensorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    automation?: AutomationUncheckedUpdateManyWithoutSensorNestedInput
    MacAddress?: MacAddressUncheckedUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type SensorCreateManyInput = {
    id_sensor?: number
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    range_min: number
    range_max: number
    id_category_sensor: number
    notify: boolean
    calibration: string
  }

  export type SensorUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
  }

  export type SensorUncheckedUpdateManyInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
  }

  export type CategorySensorCreateInput = {
    name?: string | null
    Sensor?: SensorCreateNestedManyWithoutCategorySensorInput
  }

  export type CategorySensorUncheckedCreateInput = {
    id_category_sensor?: number
    name?: string | null
    Sensor?: SensorUncheckedCreateNestedManyWithoutCategorySensorInput
  }

  export type CategorySensorUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    Sensor?: SensorUpdateManyWithoutCategorySensorNestedInput
  }

  export type CategorySensorUncheckedUpdateInput = {
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    Sensor?: SensorUncheckedUpdateManyWithoutCategorySensorNestedInput
  }

  export type CategorySensorCreateManyInput = {
    id_category_sensor?: number
    name?: string | null
  }

  export type CategorySensorUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategorySensorUncheckedUpdateManyInput = {
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActuatorCreateInput = {
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    greenhouse?: GreenhouseCreateNestedOneWithoutActuatorInput
    automation?: AutomationCreateNestedManyWithoutActuatorInput
    actuatorLog?: ActuatorLogCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressCreateNestedManyWithoutActuatorInput
    Notification?: NotificationCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorUncheckedCreateInput = {
    id_actuator?: number
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    automation?: AutomationUncheckedCreateNestedManyWithoutActuatorInput
    actuatorLog?: ActuatorLogUncheckedCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutActuatorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutActuatorNestedInput
    automation?: AutomationUpdateManyWithoutActuatorNestedInput
    actuatorLog?: ActuatorLogUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorUncheckedUpdateInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    automation?: AutomationUncheckedUpdateManyWithoutActuatorNestedInput
    actuatorLog?: ActuatorLogUncheckedUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUncheckedUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorCreateManyInput = {
    id_actuator?: number
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
  }

  export type ActuatorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type ActuatorUncheckedUpdateManyInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
  }

  export type AutomationCreateInput = {
    condition: string
    status_lifecycle: number
    created_at?: Date | string
    updated_at?: Date | string
    constanta: number
    sensorId_sensor?: number | null
    sensor?: SensorCreateNestedOneWithoutAutomationInput
    Actuator: ActuatorCreateNestedOneWithoutAutomationInput
  }

  export type AutomationUncheckedCreateInput = {
    id_actuator: number
    id_sensor: number
    condition: string
    status_lifecycle: number
    id_automation?: number
    created_at?: Date | string
    updated_at?: Date | string
    constanta: number
    sensorId_sensor?: number | null
  }

  export type AutomationUpdateInput = {
    condition?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    constanta?: IntFieldUpdateOperationsInput | number
    sensorId_sensor?: NullableIntFieldUpdateOperationsInput | number | null
    sensor?: SensorUpdateOneWithoutAutomationNestedInput
    Actuator?: ActuatorUpdateOneRequiredWithoutAutomationNestedInput
  }

  export type AutomationUncheckedUpdateInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    id_sensor?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: IntFieldUpdateOperationsInput | number
    id_automation?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    constanta?: IntFieldUpdateOperationsInput | number
    sensorId_sensor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AutomationCreateManyInput = {
    id_actuator: number
    id_sensor: number
    condition: string
    status_lifecycle: number
    id_automation?: number
    created_at?: Date | string
    updated_at?: Date | string
    constanta: number
    sensorId_sensor?: number | null
  }

  export type AutomationUpdateManyMutationInput = {
    condition?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    constanta?: IntFieldUpdateOperationsInput | number
    sensorId_sensor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AutomationUncheckedUpdateManyInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    id_sensor?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: IntFieldUpdateOperationsInput | number
    id_automation?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    constanta?: IntFieldUpdateOperationsInput | number
    sensorId_sensor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ActuatorLogCreateInput = {
    created_at?: Date | string
    on_off_status: boolean
    id_actuator: number
    Actuator?: ActuatorCreateNestedOneWithoutActuatorLogInput
  }

  export type ActuatorLogUncheckedCreateInput = {
    id_actuator_log?: number
    created_at?: Date | string
    on_off_status: boolean
    id_actuator: number
    actuatorId_actuator?: number | null
  }

  export type ActuatorLogUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    on_off_status?: BoolFieldUpdateOperationsInput | boolean
    id_actuator?: IntFieldUpdateOperationsInput | number
    Actuator?: ActuatorUpdateOneWithoutActuatorLogNestedInput
  }

  export type ActuatorLogUncheckedUpdateInput = {
    id_actuator_log?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    on_off_status?: BoolFieldUpdateOperationsInput | boolean
    id_actuator?: IntFieldUpdateOperationsInput | number
    actuatorId_actuator?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ActuatorLogCreateManyInput = {
    id_actuator_log?: number
    created_at?: Date | string
    on_off_status: boolean
    id_actuator: number
    actuatorId_actuator?: number | null
  }

  export type ActuatorLogUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    on_off_status?: BoolFieldUpdateOperationsInput | boolean
    id_actuator?: IntFieldUpdateOperationsInput | number
  }

  export type ActuatorLogUncheckedUpdateManyInput = {
    id_actuator_log?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    on_off_status?: BoolFieldUpdateOperationsInput | boolean
    id_actuator?: IntFieldUpdateOperationsInput | number
    actuatorId_actuator?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IconCreateInput = {
    name: string
    icon: string
    type: string
    color: string
  }

  export type IconUncheckedCreateInput = {
    id_icon?: number
    name: string
    icon: string
    type: string
    color: string
  }

  export type IconUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type IconUncheckedUpdateInput = {
    id_icon?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type IconCreateManyInput = {
    id_icon?: number
    name: string
    icon: string
    type: string
    color: string
  }

  export type IconUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type IconUncheckedUpdateManyInput = {
    id_icon?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type MacAddressCreateInput = {
    mac_address: string
    actuator?: ActuatorCreateNestedOneWithoutMacAddressInput
    sensor?: SensorCreateNestedOneWithoutMacAddressInput
  }

  export type MacAddressUncheckedCreateInput = {
    id_sensor: number
    id_actuator: number
    mac_address: string
    id_mac?: number
  }

  export type MacAddressUpdateInput = {
    mac_address?: StringFieldUpdateOperationsInput | string
    actuator?: ActuatorUpdateOneWithoutMacAddressNestedInput
    sensor?: SensorUpdateOneWithoutMacAddressNestedInput
  }

  export type MacAddressUncheckedUpdateInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    id_actuator?: IntFieldUpdateOperationsInput | number
    mac_address?: StringFieldUpdateOperationsInput | string
    id_mac?: IntFieldUpdateOperationsInput | number
  }

  export type MacAddressCreateManyInput = {
    id_sensor: number
    id_actuator: number
    mac_address: string
    id_mac?: number
  }

  export type MacAddressUpdateManyMutationInput = {
    mac_address?: StringFieldUpdateOperationsInput | string
  }

  export type MacAddressUncheckedUpdateManyInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    id_actuator?: IntFieldUpdateOperationsInput | number
    mac_address?: StringFieldUpdateOperationsInput | string
    id_mac?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateInput = {
    detail: string
    created_at?: Date | string
    type: string
    status: string
    actuator?: ActuatorCreateNestedOneWithoutNotificationInput
    sensor?: SensorCreateNestedOneWithoutNotificationInput
    Receive?: ReceiveCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id_notification?: number
    detail: string
    created_at?: Date | string
    type: string
    status: string
    id_actuator: number
    id_sensor: number
    Receive?: ReceiveUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUpdateInput = {
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    actuator?: ActuatorUpdateOneWithoutNotificationNestedInput
    sensor?: SensorUpdateOneWithoutNotificationNestedInput
    Receive?: ReceiveUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id_notification?: IntFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_actuator?: IntFieldUpdateOperationsInput | number
    id_sensor?: IntFieldUpdateOperationsInput | number
    Receive?: ReceiveUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationCreateManyInput = {
    id_notification?: number
    detail: string
    created_at?: Date | string
    type: string
    status: string
    id_actuator: number
    id_sensor: number
  }

  export type NotificationUpdateManyMutationInput = {
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id_notification?: IntFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_actuator?: IntFieldUpdateOperationsInput | number
    id_sensor?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiveCreateInput = {
    user?: UserCreateNestedOneWithoutReceiveInput
    notification?: NotificationCreateNestedOneWithoutReceiveInput
  }

  export type ReceiveUncheckedCreateInput = {
    id_user: number
    id_notification: number
    id_receive?: number
  }

  export type ReceiveUpdateInput = {
    user?: UserUpdateOneWithoutReceiveNestedInput
    notification?: NotificationUpdateOneWithoutReceiveNestedInput
  }

  export type ReceiveUncheckedUpdateInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    id_notification?: IntFieldUpdateOperationsInput | number
    id_receive?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiveCreateManyInput = {
    id_user: number
    id_notification: number
    id_receive?: number
  }

  export type ReceiveUpdateManyMutationInput = {

  }

  export type ReceiveUncheckedUpdateManyInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    id_notification?: IntFieldUpdateOperationsInput | number
    id_receive?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type GreenhouseListRelationFilter = {
    every?: GreenhouseWhereInput
    some?: GreenhouseWhereInput
    none?: GreenhouseWhereInput
  }

  export type ReceiveListRelationFilter = {
    every?: ReceiveWhereInput
    some?: ReceiveWhereInput
    none?: ReceiveWhereInput
  }

  export type GreenhouseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceiveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id_user?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id_user?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id_user?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id_user?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id_user?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SensorListRelationFilter = {
    every?: SensorWhereInput
    some?: SensorWhereInput
    none?: SensorWhereInput
  }

  export type ActuatorListRelationFilter = {
    every?: ActuatorWhereInput
    some?: ActuatorWhereInput
    none?: ActuatorWhereInput
  }

  export type SensorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActuatorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GreenhouseCountOrderByAggregateInput = {
    id_grenhouse?: SortOrder
    name?: SortOrder
    image?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id_user?: SortOrder
  }

  export type GreenhouseAvgOrderByAggregateInput = {
    id_grenhouse?: SortOrder
    id_user?: SortOrder
  }

  export type GreenhouseMaxOrderByAggregateInput = {
    id_grenhouse?: SortOrder
    name?: SortOrder
    image?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id_user?: SortOrder
  }

  export type GreenhouseMinOrderByAggregateInput = {
    id_grenhouse?: SortOrder
    name?: SortOrder
    image?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id_user?: SortOrder
  }

  export type GreenhouseSumOrderByAggregateInput = {
    id_grenhouse?: SortOrder
    id_user?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type GreenhouseRelationFilter = {
    is?: GreenhouseWhereInput | null
    isNot?: GreenhouseWhereInput | null
  }

  export type CategorySensorRelationFilter = {
    is?: CategorySensorWhereInput | null
    isNot?: CategorySensorWhereInput | null
  }

  export type AutomationListRelationFilter = {
    every?: AutomationWhereInput
    some?: AutomationWhereInput
    none?: AutomationWhereInput
  }

  export type MacAddressListRelationFilter = {
    every?: MacAddressWhereInput
    some?: MacAddressWhereInput
    none?: MacAddressWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type AutomationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MacAddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SensorCountOrderByAggregateInput = {
    id_sensor?: SortOrder
    name?: SortOrder
    unit_measurement?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
    range_min?: SortOrder
    range_max?: SortOrder
    id_category_sensor?: SortOrder
    notify?: SortOrder
    calibration?: SortOrder
  }

  export type SensorAvgOrderByAggregateInput = {
    id_sensor?: SortOrder
    brand?: SortOrder
    id_greenhouse?: SortOrder
    range_min?: SortOrder
    range_max?: SortOrder
    id_category_sensor?: SortOrder
  }

  export type SensorMaxOrderByAggregateInput = {
    id_sensor?: SortOrder
    name?: SortOrder
    unit_measurement?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
    range_min?: SortOrder
    range_max?: SortOrder
    id_category_sensor?: SortOrder
    notify?: SortOrder
    calibration?: SortOrder
  }

  export type SensorMinOrderByAggregateInput = {
    id_sensor?: SortOrder
    name?: SortOrder
    unit_measurement?: SortOrder
    brand?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
    range_min?: SortOrder
    range_max?: SortOrder
    id_category_sensor?: SortOrder
    notify?: SortOrder
    calibration?: SortOrder
  }

  export type SensorSumOrderByAggregateInput = {
    id_sensor?: SortOrder
    brand?: SortOrder
    id_greenhouse?: SortOrder
    range_min?: SortOrder
    range_max?: SortOrder
    id_category_sensor?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type CategorySensorCountOrderByAggregateInput = {
    id_category_sensor?: SortOrder
    name?: SortOrder
  }

  export type CategorySensorAvgOrderByAggregateInput = {
    id_category_sensor?: SortOrder
  }

  export type CategorySensorMaxOrderByAggregateInput = {
    id_category_sensor?: SortOrder
    name?: SortOrder
  }

  export type CategorySensorMinOrderByAggregateInput = {
    id_category_sensor?: SortOrder
    name?: SortOrder
  }

  export type CategorySensorSumOrderByAggregateInput = {
    id_category_sensor?: SortOrder
  }

  export type ActuatorLogListRelationFilter = {
    every?: ActuatorLogWhereInput
    some?: ActuatorLogWhereInput
    none?: ActuatorLogWhereInput
  }

  export type ActuatorLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActuatorCountOrderByAggregateInput = {
    id_actuator?: SortOrder
    name?: SortOrder
    status_lifecycle?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
  }

  export type ActuatorAvgOrderByAggregateInput = {
    id_actuator?: SortOrder
    id_greenhouse?: SortOrder
  }

  export type ActuatorMaxOrderByAggregateInput = {
    id_actuator?: SortOrder
    name?: SortOrder
    status_lifecycle?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
  }

  export type ActuatorMinOrderByAggregateInput = {
    id_actuator?: SortOrder
    name?: SortOrder
    status_lifecycle?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    id_greenhouse?: SortOrder
  }

  export type ActuatorSumOrderByAggregateInput = {
    id_actuator?: SortOrder
    id_greenhouse?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type SensorRelationFilter = {
    is?: SensorWhereInput | null
    isNot?: SensorWhereInput | null
  }

  export type ActuatorRelationFilter = {
    is?: ActuatorWhereInput | null
    isNot?: ActuatorWhereInput | null
  }

  export type AutomationCountOrderByAggregateInput = {
    id_actuator?: SortOrder
    id_sensor?: SortOrder
    condition?: SortOrder
    status_lifecycle?: SortOrder
    id_automation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    constanta?: SortOrder
    sensorId_sensor?: SortOrder
  }

  export type AutomationAvgOrderByAggregateInput = {
    id_actuator?: SortOrder
    id_sensor?: SortOrder
    status_lifecycle?: SortOrder
    id_automation?: SortOrder
    constanta?: SortOrder
    sensorId_sensor?: SortOrder
  }

  export type AutomationMaxOrderByAggregateInput = {
    id_actuator?: SortOrder
    id_sensor?: SortOrder
    condition?: SortOrder
    status_lifecycle?: SortOrder
    id_automation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    constanta?: SortOrder
    sensorId_sensor?: SortOrder
  }

  export type AutomationMinOrderByAggregateInput = {
    id_actuator?: SortOrder
    id_sensor?: SortOrder
    condition?: SortOrder
    status_lifecycle?: SortOrder
    id_automation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    constanta?: SortOrder
    sensorId_sensor?: SortOrder
  }

  export type AutomationSumOrderByAggregateInput = {
    id_actuator?: SortOrder
    id_sensor?: SortOrder
    status_lifecycle?: SortOrder
    id_automation?: SortOrder
    constanta?: SortOrder
    sensorId_sensor?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ActuatorLogCountOrderByAggregateInput = {
    id_actuator_log?: SortOrder
    created_at?: SortOrder
    on_off_status?: SortOrder
    id_actuator?: SortOrder
    actuatorId_actuator?: SortOrder
  }

  export type ActuatorLogAvgOrderByAggregateInput = {
    id_actuator_log?: SortOrder
    id_actuator?: SortOrder
    actuatorId_actuator?: SortOrder
  }

  export type ActuatorLogMaxOrderByAggregateInput = {
    id_actuator_log?: SortOrder
    created_at?: SortOrder
    on_off_status?: SortOrder
    id_actuator?: SortOrder
    actuatorId_actuator?: SortOrder
  }

  export type ActuatorLogMinOrderByAggregateInput = {
    id_actuator_log?: SortOrder
    created_at?: SortOrder
    on_off_status?: SortOrder
    id_actuator?: SortOrder
    actuatorId_actuator?: SortOrder
  }

  export type ActuatorLogSumOrderByAggregateInput = {
    id_actuator_log?: SortOrder
    id_actuator?: SortOrder
    actuatorId_actuator?: SortOrder
  }

  export type IconCountOrderByAggregateInput = {
    id_icon?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    type?: SortOrder
    color?: SortOrder
  }

  export type IconAvgOrderByAggregateInput = {
    id_icon?: SortOrder
  }

  export type IconMaxOrderByAggregateInput = {
    id_icon?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    type?: SortOrder
    color?: SortOrder
  }

  export type IconMinOrderByAggregateInput = {
    id_icon?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    type?: SortOrder
    color?: SortOrder
  }

  export type IconSumOrderByAggregateInput = {
    id_icon?: SortOrder
  }

  export type MacAddressCountOrderByAggregateInput = {
    id_sensor?: SortOrder
    id_actuator?: SortOrder
    mac_address?: SortOrder
    id_mac?: SortOrder
  }

  export type MacAddressAvgOrderByAggregateInput = {
    id_sensor?: SortOrder
    id_actuator?: SortOrder
    id_mac?: SortOrder
  }

  export type MacAddressMaxOrderByAggregateInput = {
    id_sensor?: SortOrder
    id_actuator?: SortOrder
    mac_address?: SortOrder
    id_mac?: SortOrder
  }

  export type MacAddressMinOrderByAggregateInput = {
    id_sensor?: SortOrder
    id_actuator?: SortOrder
    mac_address?: SortOrder
    id_mac?: SortOrder
  }

  export type MacAddressSumOrderByAggregateInput = {
    id_sensor?: SortOrder
    id_actuator?: SortOrder
    id_mac?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id_notification?: SortOrder
    detail?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    status?: SortOrder
    id_actuator?: SortOrder
    id_sensor?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id_notification?: SortOrder
    id_actuator?: SortOrder
    id_sensor?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id_notification?: SortOrder
    detail?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    status?: SortOrder
    id_actuator?: SortOrder
    id_sensor?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id_notification?: SortOrder
    detail?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    status?: SortOrder
    id_actuator?: SortOrder
    id_sensor?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id_notification?: SortOrder
    id_actuator?: SortOrder
    id_sensor?: SortOrder
  }

  export type NotificationRelationFilter = {
    is?: NotificationWhereInput | null
    isNot?: NotificationWhereInput | null
  }

  export type ReceiveCountOrderByAggregateInput = {
    id_user?: SortOrder
    id_notification?: SortOrder
    id_receive?: SortOrder
  }

  export type ReceiveAvgOrderByAggregateInput = {
    id_user?: SortOrder
    id_notification?: SortOrder
    id_receive?: SortOrder
  }

  export type ReceiveMaxOrderByAggregateInput = {
    id_user?: SortOrder
    id_notification?: SortOrder
    id_receive?: SortOrder
  }

  export type ReceiveMinOrderByAggregateInput = {
    id_user?: SortOrder
    id_notification?: SortOrder
    id_receive?: SortOrder
  }

  export type ReceiveSumOrderByAggregateInput = {
    id_user?: SortOrder
    id_notification?: SortOrder
    id_receive?: SortOrder
  }

  export type GreenhouseCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GreenhouseCreateWithoutUserInput>, Enumerable<GreenhouseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GreenhouseCreateOrConnectWithoutUserInput>
    createMany?: GreenhouseCreateManyUserInputEnvelope
    connect?: Enumerable<GreenhouseWhereUniqueInput>
  }

  export type ReceiveCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReceiveCreateWithoutUserInput>, Enumerable<ReceiveUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReceiveCreateOrConnectWithoutUserInput>
    createMany?: ReceiveCreateManyUserInputEnvelope
    connect?: Enumerable<ReceiveWhereUniqueInput>
  }

  export type GreenhouseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GreenhouseCreateWithoutUserInput>, Enumerable<GreenhouseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GreenhouseCreateOrConnectWithoutUserInput>
    createMany?: GreenhouseCreateManyUserInputEnvelope
    connect?: Enumerable<GreenhouseWhereUniqueInput>
  }

  export type ReceiveUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReceiveCreateWithoutUserInput>, Enumerable<ReceiveUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReceiveCreateOrConnectWithoutUserInput>
    createMany?: ReceiveCreateManyUserInputEnvelope
    connect?: Enumerable<ReceiveWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GreenhouseUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GreenhouseCreateWithoutUserInput>, Enumerable<GreenhouseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GreenhouseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GreenhouseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GreenhouseCreateManyUserInputEnvelope
    set?: Enumerable<GreenhouseWhereUniqueInput>
    disconnect?: Enumerable<GreenhouseWhereUniqueInput>
    delete?: Enumerable<GreenhouseWhereUniqueInput>
    connect?: Enumerable<GreenhouseWhereUniqueInput>
    update?: Enumerable<GreenhouseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GreenhouseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GreenhouseScalarWhereInput>
  }

  export type ReceiveUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReceiveCreateWithoutUserInput>, Enumerable<ReceiveUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReceiveCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReceiveUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReceiveCreateManyUserInputEnvelope
    set?: Enumerable<ReceiveWhereUniqueInput>
    disconnect?: Enumerable<ReceiveWhereUniqueInput>
    delete?: Enumerable<ReceiveWhereUniqueInput>
    connect?: Enumerable<ReceiveWhereUniqueInput>
    update?: Enumerable<ReceiveUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReceiveUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReceiveScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GreenhouseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GreenhouseCreateWithoutUserInput>, Enumerable<GreenhouseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GreenhouseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GreenhouseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GreenhouseCreateManyUserInputEnvelope
    set?: Enumerable<GreenhouseWhereUniqueInput>
    disconnect?: Enumerable<GreenhouseWhereUniqueInput>
    delete?: Enumerable<GreenhouseWhereUniqueInput>
    connect?: Enumerable<GreenhouseWhereUniqueInput>
    update?: Enumerable<GreenhouseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GreenhouseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GreenhouseScalarWhereInput>
  }

  export type ReceiveUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReceiveCreateWithoutUserInput>, Enumerable<ReceiveUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReceiveCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReceiveUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReceiveCreateManyUserInputEnvelope
    set?: Enumerable<ReceiveWhereUniqueInput>
    disconnect?: Enumerable<ReceiveWhereUniqueInput>
    delete?: Enumerable<ReceiveWhereUniqueInput>
    connect?: Enumerable<ReceiveWhereUniqueInput>
    update?: Enumerable<ReceiveUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReceiveUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReceiveScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutGrenhouseInput = {
    create?: XOR<UserCreateWithoutGrenhouseInput, UserUncheckedCreateWithoutGrenhouseInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrenhouseInput
    connect?: UserWhereUniqueInput
  }

  export type SensorCreateNestedManyWithoutGreenhouseInput = {
    create?: XOR<Enumerable<SensorCreateWithoutGreenhouseInput>, Enumerable<SensorUncheckedCreateWithoutGreenhouseInput>>
    connectOrCreate?: Enumerable<SensorCreateOrConnectWithoutGreenhouseInput>
    createMany?: SensorCreateManyGreenhouseInputEnvelope
    connect?: Enumerable<SensorWhereUniqueInput>
  }

  export type ActuatorCreateNestedManyWithoutGreenhouseInput = {
    create?: XOR<Enumerable<ActuatorCreateWithoutGreenhouseInput>, Enumerable<ActuatorUncheckedCreateWithoutGreenhouseInput>>
    connectOrCreate?: Enumerable<ActuatorCreateOrConnectWithoutGreenhouseInput>
    createMany?: ActuatorCreateManyGreenhouseInputEnvelope
    connect?: Enumerable<ActuatorWhereUniqueInput>
  }

  export type SensorUncheckedCreateNestedManyWithoutGreenhouseInput = {
    create?: XOR<Enumerable<SensorCreateWithoutGreenhouseInput>, Enumerable<SensorUncheckedCreateWithoutGreenhouseInput>>
    connectOrCreate?: Enumerable<SensorCreateOrConnectWithoutGreenhouseInput>
    createMany?: SensorCreateManyGreenhouseInputEnvelope
    connect?: Enumerable<SensorWhereUniqueInput>
  }

  export type ActuatorUncheckedCreateNestedManyWithoutGreenhouseInput = {
    create?: XOR<Enumerable<ActuatorCreateWithoutGreenhouseInput>, Enumerable<ActuatorUncheckedCreateWithoutGreenhouseInput>>
    connectOrCreate?: Enumerable<ActuatorCreateOrConnectWithoutGreenhouseInput>
    createMany?: ActuatorCreateManyGreenhouseInputEnvelope
    connect?: Enumerable<ActuatorWhereUniqueInput>
  }

  export type UserUpdateOneWithoutGrenhouseNestedInput = {
    create?: XOR<UserCreateWithoutGrenhouseInput, UserUncheckedCreateWithoutGrenhouseInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrenhouseInput
    upsert?: UserUpsertWithoutGrenhouseInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGrenhouseInput, UserUncheckedUpdateWithoutGrenhouseInput>
  }

  export type SensorUpdateManyWithoutGreenhouseNestedInput = {
    create?: XOR<Enumerable<SensorCreateWithoutGreenhouseInput>, Enumerable<SensorUncheckedCreateWithoutGreenhouseInput>>
    connectOrCreate?: Enumerable<SensorCreateOrConnectWithoutGreenhouseInput>
    upsert?: Enumerable<SensorUpsertWithWhereUniqueWithoutGreenhouseInput>
    createMany?: SensorCreateManyGreenhouseInputEnvelope
    set?: Enumerable<SensorWhereUniqueInput>
    disconnect?: Enumerable<SensorWhereUniqueInput>
    delete?: Enumerable<SensorWhereUniqueInput>
    connect?: Enumerable<SensorWhereUniqueInput>
    update?: Enumerable<SensorUpdateWithWhereUniqueWithoutGreenhouseInput>
    updateMany?: Enumerable<SensorUpdateManyWithWhereWithoutGreenhouseInput>
    deleteMany?: Enumerable<SensorScalarWhereInput>
  }

  export type ActuatorUpdateManyWithoutGreenhouseNestedInput = {
    create?: XOR<Enumerable<ActuatorCreateWithoutGreenhouseInput>, Enumerable<ActuatorUncheckedCreateWithoutGreenhouseInput>>
    connectOrCreate?: Enumerable<ActuatorCreateOrConnectWithoutGreenhouseInput>
    upsert?: Enumerable<ActuatorUpsertWithWhereUniqueWithoutGreenhouseInput>
    createMany?: ActuatorCreateManyGreenhouseInputEnvelope
    set?: Enumerable<ActuatorWhereUniqueInput>
    disconnect?: Enumerable<ActuatorWhereUniqueInput>
    delete?: Enumerable<ActuatorWhereUniqueInput>
    connect?: Enumerable<ActuatorWhereUniqueInput>
    update?: Enumerable<ActuatorUpdateWithWhereUniqueWithoutGreenhouseInput>
    updateMany?: Enumerable<ActuatorUpdateManyWithWhereWithoutGreenhouseInput>
    deleteMany?: Enumerable<ActuatorScalarWhereInput>
  }

  export type SensorUncheckedUpdateManyWithoutGreenhouseNestedInput = {
    create?: XOR<Enumerable<SensorCreateWithoutGreenhouseInput>, Enumerable<SensorUncheckedCreateWithoutGreenhouseInput>>
    connectOrCreate?: Enumerable<SensorCreateOrConnectWithoutGreenhouseInput>
    upsert?: Enumerable<SensorUpsertWithWhereUniqueWithoutGreenhouseInput>
    createMany?: SensorCreateManyGreenhouseInputEnvelope
    set?: Enumerable<SensorWhereUniqueInput>
    disconnect?: Enumerable<SensorWhereUniqueInput>
    delete?: Enumerable<SensorWhereUniqueInput>
    connect?: Enumerable<SensorWhereUniqueInput>
    update?: Enumerable<SensorUpdateWithWhereUniqueWithoutGreenhouseInput>
    updateMany?: Enumerable<SensorUpdateManyWithWhereWithoutGreenhouseInput>
    deleteMany?: Enumerable<SensorScalarWhereInput>
  }

  export type ActuatorUncheckedUpdateManyWithoutGreenhouseNestedInput = {
    create?: XOR<Enumerable<ActuatorCreateWithoutGreenhouseInput>, Enumerable<ActuatorUncheckedCreateWithoutGreenhouseInput>>
    connectOrCreate?: Enumerable<ActuatorCreateOrConnectWithoutGreenhouseInput>
    upsert?: Enumerable<ActuatorUpsertWithWhereUniqueWithoutGreenhouseInput>
    createMany?: ActuatorCreateManyGreenhouseInputEnvelope
    set?: Enumerable<ActuatorWhereUniqueInput>
    disconnect?: Enumerable<ActuatorWhereUniqueInput>
    delete?: Enumerable<ActuatorWhereUniqueInput>
    connect?: Enumerable<ActuatorWhereUniqueInput>
    update?: Enumerable<ActuatorUpdateWithWhereUniqueWithoutGreenhouseInput>
    updateMany?: Enumerable<ActuatorUpdateManyWithWhereWithoutGreenhouseInput>
    deleteMany?: Enumerable<ActuatorScalarWhereInput>
  }

  export type GreenhouseCreateNestedOneWithoutSensorInput = {
    create?: XOR<GreenhouseCreateWithoutSensorInput, GreenhouseUncheckedCreateWithoutSensorInput>
    connectOrCreate?: GreenhouseCreateOrConnectWithoutSensorInput
    connect?: GreenhouseWhereUniqueInput
  }

  export type CategorySensorCreateNestedOneWithoutSensorInput = {
    create?: XOR<CategorySensorCreateWithoutSensorInput, CategorySensorUncheckedCreateWithoutSensorInput>
    connectOrCreate?: CategorySensorCreateOrConnectWithoutSensorInput
    connect?: CategorySensorWhereUniqueInput
  }

  export type AutomationCreateNestedManyWithoutSensorInput = {
    create?: XOR<Enumerable<AutomationCreateWithoutSensorInput>, Enumerable<AutomationUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<AutomationCreateOrConnectWithoutSensorInput>
    createMany?: AutomationCreateManySensorInputEnvelope
    connect?: Enumerable<AutomationWhereUniqueInput>
  }

  export type MacAddressCreateNestedManyWithoutSensorInput = {
    create?: XOR<Enumerable<MacAddressCreateWithoutSensorInput>, Enumerable<MacAddressUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<MacAddressCreateOrConnectWithoutSensorInput>
    createMany?: MacAddressCreateManySensorInputEnvelope
    connect?: Enumerable<MacAddressWhereUniqueInput>
  }

  export type NotificationCreateNestedManyWithoutSensorInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutSensorInput>, Enumerable<NotificationUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutSensorInput>
    createMany?: NotificationCreateManySensorInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type AutomationUncheckedCreateNestedManyWithoutSensorInput = {
    create?: XOR<Enumerable<AutomationCreateWithoutSensorInput>, Enumerable<AutomationUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<AutomationCreateOrConnectWithoutSensorInput>
    createMany?: AutomationCreateManySensorInputEnvelope
    connect?: Enumerable<AutomationWhereUniqueInput>
  }

  export type MacAddressUncheckedCreateNestedManyWithoutSensorInput = {
    create?: XOR<Enumerable<MacAddressCreateWithoutSensorInput>, Enumerable<MacAddressUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<MacAddressCreateOrConnectWithoutSensorInput>
    createMany?: MacAddressCreateManySensorInputEnvelope
    connect?: Enumerable<MacAddressWhereUniqueInput>
  }

  export type NotificationUncheckedCreateNestedManyWithoutSensorInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutSensorInput>, Enumerable<NotificationUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutSensorInput>
    createMany?: NotificationCreateManySensorInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type GreenhouseUpdateOneWithoutSensorNestedInput = {
    create?: XOR<GreenhouseCreateWithoutSensorInput, GreenhouseUncheckedCreateWithoutSensorInput>
    connectOrCreate?: GreenhouseCreateOrConnectWithoutSensorInput
    upsert?: GreenhouseUpsertWithoutSensorInput
    disconnect?: boolean
    delete?: boolean
    connect?: GreenhouseWhereUniqueInput
    update?: XOR<GreenhouseUpdateWithoutSensorInput, GreenhouseUncheckedUpdateWithoutSensorInput>
  }

  export type CategorySensorUpdateOneWithoutSensorNestedInput = {
    create?: XOR<CategorySensorCreateWithoutSensorInput, CategorySensorUncheckedCreateWithoutSensorInput>
    connectOrCreate?: CategorySensorCreateOrConnectWithoutSensorInput
    upsert?: CategorySensorUpsertWithoutSensorInput
    disconnect?: boolean
    delete?: boolean
    connect?: CategorySensorWhereUniqueInput
    update?: XOR<CategorySensorUpdateWithoutSensorInput, CategorySensorUncheckedUpdateWithoutSensorInput>
  }

  export type AutomationUpdateManyWithoutSensorNestedInput = {
    create?: XOR<Enumerable<AutomationCreateWithoutSensorInput>, Enumerable<AutomationUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<AutomationCreateOrConnectWithoutSensorInput>
    upsert?: Enumerable<AutomationUpsertWithWhereUniqueWithoutSensorInput>
    createMany?: AutomationCreateManySensorInputEnvelope
    set?: Enumerable<AutomationWhereUniqueInput>
    disconnect?: Enumerable<AutomationWhereUniqueInput>
    delete?: Enumerable<AutomationWhereUniqueInput>
    connect?: Enumerable<AutomationWhereUniqueInput>
    update?: Enumerable<AutomationUpdateWithWhereUniqueWithoutSensorInput>
    updateMany?: Enumerable<AutomationUpdateManyWithWhereWithoutSensorInput>
    deleteMany?: Enumerable<AutomationScalarWhereInput>
  }

  export type MacAddressUpdateManyWithoutSensorNestedInput = {
    create?: XOR<Enumerable<MacAddressCreateWithoutSensorInput>, Enumerable<MacAddressUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<MacAddressCreateOrConnectWithoutSensorInput>
    upsert?: Enumerable<MacAddressUpsertWithWhereUniqueWithoutSensorInput>
    createMany?: MacAddressCreateManySensorInputEnvelope
    set?: Enumerable<MacAddressWhereUniqueInput>
    disconnect?: Enumerable<MacAddressWhereUniqueInput>
    delete?: Enumerable<MacAddressWhereUniqueInput>
    connect?: Enumerable<MacAddressWhereUniqueInput>
    update?: Enumerable<MacAddressUpdateWithWhereUniqueWithoutSensorInput>
    updateMany?: Enumerable<MacAddressUpdateManyWithWhereWithoutSensorInput>
    deleteMany?: Enumerable<MacAddressScalarWhereInput>
  }

  export type NotificationUpdateManyWithoutSensorNestedInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutSensorInput>, Enumerable<NotificationUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutSensorInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutSensorInput>
    createMany?: NotificationCreateManySensorInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutSensorInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutSensorInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type AutomationUncheckedUpdateManyWithoutSensorNestedInput = {
    create?: XOR<Enumerable<AutomationCreateWithoutSensorInput>, Enumerable<AutomationUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<AutomationCreateOrConnectWithoutSensorInput>
    upsert?: Enumerable<AutomationUpsertWithWhereUniqueWithoutSensorInput>
    createMany?: AutomationCreateManySensorInputEnvelope
    set?: Enumerable<AutomationWhereUniqueInput>
    disconnect?: Enumerable<AutomationWhereUniqueInput>
    delete?: Enumerable<AutomationWhereUniqueInput>
    connect?: Enumerable<AutomationWhereUniqueInput>
    update?: Enumerable<AutomationUpdateWithWhereUniqueWithoutSensorInput>
    updateMany?: Enumerable<AutomationUpdateManyWithWhereWithoutSensorInput>
    deleteMany?: Enumerable<AutomationScalarWhereInput>
  }

  export type MacAddressUncheckedUpdateManyWithoutSensorNestedInput = {
    create?: XOR<Enumerable<MacAddressCreateWithoutSensorInput>, Enumerable<MacAddressUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<MacAddressCreateOrConnectWithoutSensorInput>
    upsert?: Enumerable<MacAddressUpsertWithWhereUniqueWithoutSensorInput>
    createMany?: MacAddressCreateManySensorInputEnvelope
    set?: Enumerable<MacAddressWhereUniqueInput>
    disconnect?: Enumerable<MacAddressWhereUniqueInput>
    delete?: Enumerable<MacAddressWhereUniqueInput>
    connect?: Enumerable<MacAddressWhereUniqueInput>
    update?: Enumerable<MacAddressUpdateWithWhereUniqueWithoutSensorInput>
    updateMany?: Enumerable<MacAddressUpdateManyWithWhereWithoutSensorInput>
    deleteMany?: Enumerable<MacAddressScalarWhereInput>
  }

  export type NotificationUncheckedUpdateManyWithoutSensorNestedInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutSensorInput>, Enumerable<NotificationUncheckedCreateWithoutSensorInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutSensorInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutSensorInput>
    createMany?: NotificationCreateManySensorInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutSensorInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutSensorInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type SensorCreateNestedManyWithoutCategorySensorInput = {
    create?: XOR<Enumerable<SensorCreateWithoutCategorySensorInput>, Enumerable<SensorUncheckedCreateWithoutCategorySensorInput>>
    connectOrCreate?: Enumerable<SensorCreateOrConnectWithoutCategorySensorInput>
    createMany?: SensorCreateManyCategorySensorInputEnvelope
    connect?: Enumerable<SensorWhereUniqueInput>
  }

  export type SensorUncheckedCreateNestedManyWithoutCategorySensorInput = {
    create?: XOR<Enumerable<SensorCreateWithoutCategorySensorInput>, Enumerable<SensorUncheckedCreateWithoutCategorySensorInput>>
    connectOrCreate?: Enumerable<SensorCreateOrConnectWithoutCategorySensorInput>
    createMany?: SensorCreateManyCategorySensorInputEnvelope
    connect?: Enumerable<SensorWhereUniqueInput>
  }

  export type SensorUpdateManyWithoutCategorySensorNestedInput = {
    create?: XOR<Enumerable<SensorCreateWithoutCategorySensorInput>, Enumerable<SensorUncheckedCreateWithoutCategorySensorInput>>
    connectOrCreate?: Enumerable<SensorCreateOrConnectWithoutCategorySensorInput>
    upsert?: Enumerable<SensorUpsertWithWhereUniqueWithoutCategorySensorInput>
    createMany?: SensorCreateManyCategorySensorInputEnvelope
    set?: Enumerable<SensorWhereUniqueInput>
    disconnect?: Enumerable<SensorWhereUniqueInput>
    delete?: Enumerable<SensorWhereUniqueInput>
    connect?: Enumerable<SensorWhereUniqueInput>
    update?: Enumerable<SensorUpdateWithWhereUniqueWithoutCategorySensorInput>
    updateMany?: Enumerable<SensorUpdateManyWithWhereWithoutCategorySensorInput>
    deleteMany?: Enumerable<SensorScalarWhereInput>
  }

  export type SensorUncheckedUpdateManyWithoutCategorySensorNestedInput = {
    create?: XOR<Enumerable<SensorCreateWithoutCategorySensorInput>, Enumerable<SensorUncheckedCreateWithoutCategorySensorInput>>
    connectOrCreate?: Enumerable<SensorCreateOrConnectWithoutCategorySensorInput>
    upsert?: Enumerable<SensorUpsertWithWhereUniqueWithoutCategorySensorInput>
    createMany?: SensorCreateManyCategorySensorInputEnvelope
    set?: Enumerable<SensorWhereUniqueInput>
    disconnect?: Enumerable<SensorWhereUniqueInput>
    delete?: Enumerable<SensorWhereUniqueInput>
    connect?: Enumerable<SensorWhereUniqueInput>
    update?: Enumerable<SensorUpdateWithWhereUniqueWithoutCategorySensorInput>
    updateMany?: Enumerable<SensorUpdateManyWithWhereWithoutCategorySensorInput>
    deleteMany?: Enumerable<SensorScalarWhereInput>
  }

  export type GreenhouseCreateNestedOneWithoutActuatorInput = {
    create?: XOR<GreenhouseCreateWithoutActuatorInput, GreenhouseUncheckedCreateWithoutActuatorInput>
    connectOrCreate?: GreenhouseCreateOrConnectWithoutActuatorInput
    connect?: GreenhouseWhereUniqueInput
  }

  export type AutomationCreateNestedManyWithoutActuatorInput = {
    create?: XOR<Enumerable<AutomationCreateWithoutActuatorInput>, Enumerable<AutomationUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<AutomationCreateOrConnectWithoutActuatorInput>
    createMany?: AutomationCreateManyActuatorInputEnvelope
    connect?: Enumerable<AutomationWhereUniqueInput>
  }

  export type ActuatorLogCreateNestedManyWithoutActuatorInput = {
    create?: XOR<Enumerable<ActuatorLogCreateWithoutActuatorInput>, Enumerable<ActuatorLogUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<ActuatorLogCreateOrConnectWithoutActuatorInput>
    createMany?: ActuatorLogCreateManyActuatorInputEnvelope
    connect?: Enumerable<ActuatorLogWhereUniqueInput>
  }

  export type MacAddressCreateNestedManyWithoutActuatorInput = {
    create?: XOR<Enumerable<MacAddressCreateWithoutActuatorInput>, Enumerable<MacAddressUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<MacAddressCreateOrConnectWithoutActuatorInput>
    createMany?: MacAddressCreateManyActuatorInputEnvelope
    connect?: Enumerable<MacAddressWhereUniqueInput>
  }

  export type NotificationCreateNestedManyWithoutActuatorInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutActuatorInput>, Enumerable<NotificationUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutActuatorInput>
    createMany?: NotificationCreateManyActuatorInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type AutomationUncheckedCreateNestedManyWithoutActuatorInput = {
    create?: XOR<Enumerable<AutomationCreateWithoutActuatorInput>, Enumerable<AutomationUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<AutomationCreateOrConnectWithoutActuatorInput>
    createMany?: AutomationCreateManyActuatorInputEnvelope
    connect?: Enumerable<AutomationWhereUniqueInput>
  }

  export type ActuatorLogUncheckedCreateNestedManyWithoutActuatorInput = {
    create?: XOR<Enumerable<ActuatorLogCreateWithoutActuatorInput>, Enumerable<ActuatorLogUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<ActuatorLogCreateOrConnectWithoutActuatorInput>
    createMany?: ActuatorLogCreateManyActuatorInputEnvelope
    connect?: Enumerable<ActuatorLogWhereUniqueInput>
  }

  export type MacAddressUncheckedCreateNestedManyWithoutActuatorInput = {
    create?: XOR<Enumerable<MacAddressCreateWithoutActuatorInput>, Enumerable<MacAddressUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<MacAddressCreateOrConnectWithoutActuatorInput>
    createMany?: MacAddressCreateManyActuatorInputEnvelope
    connect?: Enumerable<MacAddressWhereUniqueInput>
  }

  export type NotificationUncheckedCreateNestedManyWithoutActuatorInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutActuatorInput>, Enumerable<NotificationUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutActuatorInput>
    createMany?: NotificationCreateManyActuatorInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type GreenhouseUpdateOneWithoutActuatorNestedInput = {
    create?: XOR<GreenhouseCreateWithoutActuatorInput, GreenhouseUncheckedCreateWithoutActuatorInput>
    connectOrCreate?: GreenhouseCreateOrConnectWithoutActuatorInput
    upsert?: GreenhouseUpsertWithoutActuatorInput
    disconnect?: boolean
    delete?: boolean
    connect?: GreenhouseWhereUniqueInput
    update?: XOR<GreenhouseUpdateWithoutActuatorInput, GreenhouseUncheckedUpdateWithoutActuatorInput>
  }

  export type AutomationUpdateManyWithoutActuatorNestedInput = {
    create?: XOR<Enumerable<AutomationCreateWithoutActuatorInput>, Enumerable<AutomationUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<AutomationCreateOrConnectWithoutActuatorInput>
    upsert?: Enumerable<AutomationUpsertWithWhereUniqueWithoutActuatorInput>
    createMany?: AutomationCreateManyActuatorInputEnvelope
    set?: Enumerable<AutomationWhereUniqueInput>
    disconnect?: Enumerable<AutomationWhereUniqueInput>
    delete?: Enumerable<AutomationWhereUniqueInput>
    connect?: Enumerable<AutomationWhereUniqueInput>
    update?: Enumerable<AutomationUpdateWithWhereUniqueWithoutActuatorInput>
    updateMany?: Enumerable<AutomationUpdateManyWithWhereWithoutActuatorInput>
    deleteMany?: Enumerable<AutomationScalarWhereInput>
  }

  export type ActuatorLogUpdateManyWithoutActuatorNestedInput = {
    create?: XOR<Enumerable<ActuatorLogCreateWithoutActuatorInput>, Enumerable<ActuatorLogUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<ActuatorLogCreateOrConnectWithoutActuatorInput>
    upsert?: Enumerable<ActuatorLogUpsertWithWhereUniqueWithoutActuatorInput>
    createMany?: ActuatorLogCreateManyActuatorInputEnvelope
    set?: Enumerable<ActuatorLogWhereUniqueInput>
    disconnect?: Enumerable<ActuatorLogWhereUniqueInput>
    delete?: Enumerable<ActuatorLogWhereUniqueInput>
    connect?: Enumerable<ActuatorLogWhereUniqueInput>
    update?: Enumerable<ActuatorLogUpdateWithWhereUniqueWithoutActuatorInput>
    updateMany?: Enumerable<ActuatorLogUpdateManyWithWhereWithoutActuatorInput>
    deleteMany?: Enumerable<ActuatorLogScalarWhereInput>
  }

  export type MacAddressUpdateManyWithoutActuatorNestedInput = {
    create?: XOR<Enumerable<MacAddressCreateWithoutActuatorInput>, Enumerable<MacAddressUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<MacAddressCreateOrConnectWithoutActuatorInput>
    upsert?: Enumerable<MacAddressUpsertWithWhereUniqueWithoutActuatorInput>
    createMany?: MacAddressCreateManyActuatorInputEnvelope
    set?: Enumerable<MacAddressWhereUniqueInput>
    disconnect?: Enumerable<MacAddressWhereUniqueInput>
    delete?: Enumerable<MacAddressWhereUniqueInput>
    connect?: Enumerable<MacAddressWhereUniqueInput>
    update?: Enumerable<MacAddressUpdateWithWhereUniqueWithoutActuatorInput>
    updateMany?: Enumerable<MacAddressUpdateManyWithWhereWithoutActuatorInput>
    deleteMany?: Enumerable<MacAddressScalarWhereInput>
  }

  export type NotificationUpdateManyWithoutActuatorNestedInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutActuatorInput>, Enumerable<NotificationUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutActuatorInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutActuatorInput>
    createMany?: NotificationCreateManyActuatorInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutActuatorInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutActuatorInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type AutomationUncheckedUpdateManyWithoutActuatorNestedInput = {
    create?: XOR<Enumerable<AutomationCreateWithoutActuatorInput>, Enumerable<AutomationUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<AutomationCreateOrConnectWithoutActuatorInput>
    upsert?: Enumerable<AutomationUpsertWithWhereUniqueWithoutActuatorInput>
    createMany?: AutomationCreateManyActuatorInputEnvelope
    set?: Enumerable<AutomationWhereUniqueInput>
    disconnect?: Enumerable<AutomationWhereUniqueInput>
    delete?: Enumerable<AutomationWhereUniqueInput>
    connect?: Enumerable<AutomationWhereUniqueInput>
    update?: Enumerable<AutomationUpdateWithWhereUniqueWithoutActuatorInput>
    updateMany?: Enumerable<AutomationUpdateManyWithWhereWithoutActuatorInput>
    deleteMany?: Enumerable<AutomationScalarWhereInput>
  }

  export type ActuatorLogUncheckedUpdateManyWithoutActuatorNestedInput = {
    create?: XOR<Enumerable<ActuatorLogCreateWithoutActuatorInput>, Enumerable<ActuatorLogUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<ActuatorLogCreateOrConnectWithoutActuatorInput>
    upsert?: Enumerable<ActuatorLogUpsertWithWhereUniqueWithoutActuatorInput>
    createMany?: ActuatorLogCreateManyActuatorInputEnvelope
    set?: Enumerable<ActuatorLogWhereUniqueInput>
    disconnect?: Enumerable<ActuatorLogWhereUniqueInput>
    delete?: Enumerable<ActuatorLogWhereUniqueInput>
    connect?: Enumerable<ActuatorLogWhereUniqueInput>
    update?: Enumerable<ActuatorLogUpdateWithWhereUniqueWithoutActuatorInput>
    updateMany?: Enumerable<ActuatorLogUpdateManyWithWhereWithoutActuatorInput>
    deleteMany?: Enumerable<ActuatorLogScalarWhereInput>
  }

  export type MacAddressUncheckedUpdateManyWithoutActuatorNestedInput = {
    create?: XOR<Enumerable<MacAddressCreateWithoutActuatorInput>, Enumerable<MacAddressUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<MacAddressCreateOrConnectWithoutActuatorInput>
    upsert?: Enumerable<MacAddressUpsertWithWhereUniqueWithoutActuatorInput>
    createMany?: MacAddressCreateManyActuatorInputEnvelope
    set?: Enumerable<MacAddressWhereUniqueInput>
    disconnect?: Enumerable<MacAddressWhereUniqueInput>
    delete?: Enumerable<MacAddressWhereUniqueInput>
    connect?: Enumerable<MacAddressWhereUniqueInput>
    update?: Enumerable<MacAddressUpdateWithWhereUniqueWithoutActuatorInput>
    updateMany?: Enumerable<MacAddressUpdateManyWithWhereWithoutActuatorInput>
    deleteMany?: Enumerable<MacAddressScalarWhereInput>
  }

  export type NotificationUncheckedUpdateManyWithoutActuatorNestedInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutActuatorInput>, Enumerable<NotificationUncheckedCreateWithoutActuatorInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutActuatorInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutActuatorInput>
    createMany?: NotificationCreateManyActuatorInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutActuatorInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutActuatorInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type SensorCreateNestedOneWithoutAutomationInput = {
    create?: XOR<SensorCreateWithoutAutomationInput, SensorUncheckedCreateWithoutAutomationInput>
    connectOrCreate?: SensorCreateOrConnectWithoutAutomationInput
    connect?: SensorWhereUniqueInput
  }

  export type ActuatorCreateNestedOneWithoutAutomationInput = {
    create?: XOR<ActuatorCreateWithoutAutomationInput, ActuatorUncheckedCreateWithoutAutomationInput>
    connectOrCreate?: ActuatorCreateOrConnectWithoutAutomationInput
    connect?: ActuatorWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SensorUpdateOneWithoutAutomationNestedInput = {
    create?: XOR<SensorCreateWithoutAutomationInput, SensorUncheckedCreateWithoutAutomationInput>
    connectOrCreate?: SensorCreateOrConnectWithoutAutomationInput
    upsert?: SensorUpsertWithoutAutomationInput
    disconnect?: boolean
    delete?: boolean
    connect?: SensorWhereUniqueInput
    update?: XOR<SensorUpdateWithoutAutomationInput, SensorUncheckedUpdateWithoutAutomationInput>
  }

  export type ActuatorUpdateOneRequiredWithoutAutomationNestedInput = {
    create?: XOR<ActuatorCreateWithoutAutomationInput, ActuatorUncheckedCreateWithoutAutomationInput>
    connectOrCreate?: ActuatorCreateOrConnectWithoutAutomationInput
    upsert?: ActuatorUpsertWithoutAutomationInput
    connect?: ActuatorWhereUniqueInput
    update?: XOR<ActuatorUpdateWithoutAutomationInput, ActuatorUncheckedUpdateWithoutAutomationInput>
  }

  export type ActuatorCreateNestedOneWithoutActuatorLogInput = {
    create?: XOR<ActuatorCreateWithoutActuatorLogInput, ActuatorUncheckedCreateWithoutActuatorLogInput>
    connectOrCreate?: ActuatorCreateOrConnectWithoutActuatorLogInput
    connect?: ActuatorWhereUniqueInput
  }

  export type ActuatorUpdateOneWithoutActuatorLogNestedInput = {
    create?: XOR<ActuatorCreateWithoutActuatorLogInput, ActuatorUncheckedCreateWithoutActuatorLogInput>
    connectOrCreate?: ActuatorCreateOrConnectWithoutActuatorLogInput
    upsert?: ActuatorUpsertWithoutActuatorLogInput
    disconnect?: boolean
    delete?: boolean
    connect?: ActuatorWhereUniqueInput
    update?: XOR<ActuatorUpdateWithoutActuatorLogInput, ActuatorUncheckedUpdateWithoutActuatorLogInput>
  }

  export type ActuatorCreateNestedOneWithoutMacAddressInput = {
    create?: XOR<ActuatorCreateWithoutMacAddressInput, ActuatorUncheckedCreateWithoutMacAddressInput>
    connectOrCreate?: ActuatorCreateOrConnectWithoutMacAddressInput
    connect?: ActuatorWhereUniqueInput
  }

  export type SensorCreateNestedOneWithoutMacAddressInput = {
    create?: XOR<SensorCreateWithoutMacAddressInput, SensorUncheckedCreateWithoutMacAddressInput>
    connectOrCreate?: SensorCreateOrConnectWithoutMacAddressInput
    connect?: SensorWhereUniqueInput
  }

  export type ActuatorUpdateOneWithoutMacAddressNestedInput = {
    create?: XOR<ActuatorCreateWithoutMacAddressInput, ActuatorUncheckedCreateWithoutMacAddressInput>
    connectOrCreate?: ActuatorCreateOrConnectWithoutMacAddressInput
    upsert?: ActuatorUpsertWithoutMacAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: ActuatorWhereUniqueInput
    update?: XOR<ActuatorUpdateWithoutMacAddressInput, ActuatorUncheckedUpdateWithoutMacAddressInput>
  }

  export type SensorUpdateOneWithoutMacAddressNestedInput = {
    create?: XOR<SensorCreateWithoutMacAddressInput, SensorUncheckedCreateWithoutMacAddressInput>
    connectOrCreate?: SensorCreateOrConnectWithoutMacAddressInput
    upsert?: SensorUpsertWithoutMacAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: SensorWhereUniqueInput
    update?: XOR<SensorUpdateWithoutMacAddressInput, SensorUncheckedUpdateWithoutMacAddressInput>
  }

  export type ActuatorCreateNestedOneWithoutNotificationInput = {
    create?: XOR<ActuatorCreateWithoutNotificationInput, ActuatorUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: ActuatorCreateOrConnectWithoutNotificationInput
    connect?: ActuatorWhereUniqueInput
  }

  export type SensorCreateNestedOneWithoutNotificationInput = {
    create?: XOR<SensorCreateWithoutNotificationInput, SensorUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: SensorCreateOrConnectWithoutNotificationInput
    connect?: SensorWhereUniqueInput
  }

  export type ReceiveCreateNestedManyWithoutNotificationInput = {
    create?: XOR<Enumerable<ReceiveCreateWithoutNotificationInput>, Enumerable<ReceiveUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<ReceiveCreateOrConnectWithoutNotificationInput>
    createMany?: ReceiveCreateManyNotificationInputEnvelope
    connect?: Enumerable<ReceiveWhereUniqueInput>
  }

  export type ReceiveUncheckedCreateNestedManyWithoutNotificationInput = {
    create?: XOR<Enumerable<ReceiveCreateWithoutNotificationInput>, Enumerable<ReceiveUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<ReceiveCreateOrConnectWithoutNotificationInput>
    createMany?: ReceiveCreateManyNotificationInputEnvelope
    connect?: Enumerable<ReceiveWhereUniqueInput>
  }

  export type ActuatorUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<ActuatorCreateWithoutNotificationInput, ActuatorUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: ActuatorCreateOrConnectWithoutNotificationInput
    upsert?: ActuatorUpsertWithoutNotificationInput
    disconnect?: boolean
    delete?: boolean
    connect?: ActuatorWhereUniqueInput
    update?: XOR<ActuatorUpdateWithoutNotificationInput, ActuatorUncheckedUpdateWithoutNotificationInput>
  }

  export type SensorUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<SensorCreateWithoutNotificationInput, SensorUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: SensorCreateOrConnectWithoutNotificationInput
    upsert?: SensorUpsertWithoutNotificationInput
    disconnect?: boolean
    delete?: boolean
    connect?: SensorWhereUniqueInput
    update?: XOR<SensorUpdateWithoutNotificationInput, SensorUncheckedUpdateWithoutNotificationInput>
  }

  export type ReceiveUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<Enumerable<ReceiveCreateWithoutNotificationInput>, Enumerable<ReceiveUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<ReceiveCreateOrConnectWithoutNotificationInput>
    upsert?: Enumerable<ReceiveUpsertWithWhereUniqueWithoutNotificationInput>
    createMany?: ReceiveCreateManyNotificationInputEnvelope
    set?: Enumerable<ReceiveWhereUniqueInput>
    disconnect?: Enumerable<ReceiveWhereUniqueInput>
    delete?: Enumerable<ReceiveWhereUniqueInput>
    connect?: Enumerable<ReceiveWhereUniqueInput>
    update?: Enumerable<ReceiveUpdateWithWhereUniqueWithoutNotificationInput>
    updateMany?: Enumerable<ReceiveUpdateManyWithWhereWithoutNotificationInput>
    deleteMany?: Enumerable<ReceiveScalarWhereInput>
  }

  export type ReceiveUncheckedUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<Enumerable<ReceiveCreateWithoutNotificationInput>, Enumerable<ReceiveUncheckedCreateWithoutNotificationInput>>
    connectOrCreate?: Enumerable<ReceiveCreateOrConnectWithoutNotificationInput>
    upsert?: Enumerable<ReceiveUpsertWithWhereUniqueWithoutNotificationInput>
    createMany?: ReceiveCreateManyNotificationInputEnvelope
    set?: Enumerable<ReceiveWhereUniqueInput>
    disconnect?: Enumerable<ReceiveWhereUniqueInput>
    delete?: Enumerable<ReceiveWhereUniqueInput>
    connect?: Enumerable<ReceiveWhereUniqueInput>
    update?: Enumerable<ReceiveUpdateWithWhereUniqueWithoutNotificationInput>
    updateMany?: Enumerable<ReceiveUpdateManyWithWhereWithoutNotificationInput>
    deleteMany?: Enumerable<ReceiveScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutReceiveInput = {
    create?: XOR<UserCreateWithoutReceiveInput, UserUncheckedCreateWithoutReceiveInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceiveInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationCreateNestedOneWithoutReceiveInput = {
    create?: XOR<NotificationCreateWithoutReceiveInput, NotificationUncheckedCreateWithoutReceiveInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutReceiveInput
    connect?: NotificationWhereUniqueInput
  }

  export type UserUpdateOneWithoutReceiveNestedInput = {
    create?: XOR<UserCreateWithoutReceiveInput, UserUncheckedCreateWithoutReceiveInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceiveInput
    upsert?: UserUpsertWithoutReceiveInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReceiveInput, UserUncheckedUpdateWithoutReceiveInput>
  }

  export type NotificationUpdateOneWithoutReceiveNestedInput = {
    create?: XOR<NotificationCreateWithoutReceiveInput, NotificationUncheckedCreateWithoutReceiveInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutReceiveInput
    upsert?: NotificationUpsertWithoutReceiveInput
    disconnect?: boolean
    delete?: boolean
    connect?: NotificationWhereUniqueInput
    update?: XOR<NotificationUpdateWithoutReceiveInput, NotificationUncheckedUpdateWithoutReceiveInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type GreenhouseCreateWithoutUserInput = {
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
    sensor?: SensorCreateNestedManyWithoutGreenhouseInput
    Actuator?: ActuatorCreateNestedManyWithoutGreenhouseInput
  }

  export type GreenhouseUncheckedCreateWithoutUserInput = {
    id_grenhouse?: number
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
    sensor?: SensorUncheckedCreateNestedManyWithoutGreenhouseInput
    Actuator?: ActuatorUncheckedCreateNestedManyWithoutGreenhouseInput
  }

  export type GreenhouseCreateOrConnectWithoutUserInput = {
    where: GreenhouseWhereUniqueInput
    create: XOR<GreenhouseCreateWithoutUserInput, GreenhouseUncheckedCreateWithoutUserInput>
  }

  export type GreenhouseCreateManyUserInputEnvelope = {
    data: Enumerable<GreenhouseCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ReceiveCreateWithoutUserInput = {
    notification?: NotificationCreateNestedOneWithoutReceiveInput
  }

  export type ReceiveUncheckedCreateWithoutUserInput = {
    id_notification: number
    id_receive?: number
  }

  export type ReceiveCreateOrConnectWithoutUserInput = {
    where: ReceiveWhereUniqueInput
    create: XOR<ReceiveCreateWithoutUserInput, ReceiveUncheckedCreateWithoutUserInput>
  }

  export type ReceiveCreateManyUserInputEnvelope = {
    data: Enumerable<ReceiveCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type GreenhouseUpsertWithWhereUniqueWithoutUserInput = {
    where: GreenhouseWhereUniqueInput
    update: XOR<GreenhouseUpdateWithoutUserInput, GreenhouseUncheckedUpdateWithoutUserInput>
    create: XOR<GreenhouseCreateWithoutUserInput, GreenhouseUncheckedCreateWithoutUserInput>
  }

  export type GreenhouseUpdateWithWhereUniqueWithoutUserInput = {
    where: GreenhouseWhereUniqueInput
    data: XOR<GreenhouseUpdateWithoutUserInput, GreenhouseUncheckedUpdateWithoutUserInput>
  }

  export type GreenhouseUpdateManyWithWhereWithoutUserInput = {
    where: GreenhouseScalarWhereInput
    data: XOR<GreenhouseUpdateManyMutationInput, GreenhouseUncheckedUpdateManyWithoutGrenhouseInput>
  }

  export type GreenhouseScalarWhereInput = {
    AND?: Enumerable<GreenhouseScalarWhereInput>
    OR?: Enumerable<GreenhouseScalarWhereInput>
    NOT?: Enumerable<GreenhouseScalarWhereInput>
    id_grenhouse?: IntFilter | number
    name?: StringFilter | string
    image?: StringFilter | string
    location?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    id_user?: IntFilter | number
  }

  export type ReceiveUpsertWithWhereUniqueWithoutUserInput = {
    where: ReceiveWhereUniqueInput
    update: XOR<ReceiveUpdateWithoutUserInput, ReceiveUncheckedUpdateWithoutUserInput>
    create: XOR<ReceiveCreateWithoutUserInput, ReceiveUncheckedCreateWithoutUserInput>
  }

  export type ReceiveUpdateWithWhereUniqueWithoutUserInput = {
    where: ReceiveWhereUniqueInput
    data: XOR<ReceiveUpdateWithoutUserInput, ReceiveUncheckedUpdateWithoutUserInput>
  }

  export type ReceiveUpdateManyWithWhereWithoutUserInput = {
    where: ReceiveScalarWhereInput
    data: XOR<ReceiveUpdateManyMutationInput, ReceiveUncheckedUpdateManyWithoutReceiveInput>
  }

  export type ReceiveScalarWhereInput = {
    AND?: Enumerable<ReceiveScalarWhereInput>
    OR?: Enumerable<ReceiveScalarWhereInput>
    NOT?: Enumerable<ReceiveScalarWhereInput>
    id_user?: IntFilter | number
    id_notification?: IntFilter | number
    id_receive?: IntFilter | number
  }

  export type UserCreateWithoutGrenhouseInput = {
    email: string
    name?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    Receive?: ReceiveCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGrenhouseInput = {
    id_user?: number
    email: string
    name?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    Receive?: ReceiveUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGrenhouseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGrenhouseInput, UserUncheckedCreateWithoutGrenhouseInput>
  }

  export type SensorCreateWithoutGreenhouseInput = {
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    range_min: number
    range_max: number
    notify: boolean
    calibration: string
    categorySensor?: CategorySensorCreateNestedOneWithoutSensorInput
    automation?: AutomationCreateNestedManyWithoutSensorInput
    MacAddress?: MacAddressCreateNestedManyWithoutSensorInput
    Notification?: NotificationCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateWithoutGreenhouseInput = {
    id_sensor?: number
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    range_min: number
    range_max: number
    id_category_sensor: number
    notify: boolean
    calibration: string
    automation?: AutomationUncheckedCreateNestedManyWithoutSensorInput
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutSensorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorCreateOrConnectWithoutGreenhouseInput = {
    where: SensorWhereUniqueInput
    create: XOR<SensorCreateWithoutGreenhouseInput, SensorUncheckedCreateWithoutGreenhouseInput>
  }

  export type SensorCreateManyGreenhouseInputEnvelope = {
    data: Enumerable<SensorCreateManyGreenhouseInput>
    skipDuplicates?: boolean
  }

  export type ActuatorCreateWithoutGreenhouseInput = {
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    automation?: AutomationCreateNestedManyWithoutActuatorInput
    actuatorLog?: ActuatorLogCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressCreateNestedManyWithoutActuatorInput
    Notification?: NotificationCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorUncheckedCreateWithoutGreenhouseInput = {
    id_actuator?: number
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    automation?: AutomationUncheckedCreateNestedManyWithoutActuatorInput
    actuatorLog?: ActuatorLogUncheckedCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutActuatorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorCreateOrConnectWithoutGreenhouseInput = {
    where: ActuatorWhereUniqueInput
    create: XOR<ActuatorCreateWithoutGreenhouseInput, ActuatorUncheckedCreateWithoutGreenhouseInput>
  }

  export type ActuatorCreateManyGreenhouseInputEnvelope = {
    data: Enumerable<ActuatorCreateManyGreenhouseInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutGrenhouseInput = {
    update: XOR<UserUpdateWithoutGrenhouseInput, UserUncheckedUpdateWithoutGrenhouseInput>
    create: XOR<UserCreateWithoutGrenhouseInput, UserUncheckedCreateWithoutGrenhouseInput>
  }

  export type UserUpdateWithoutGrenhouseInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Receive?: ReceiveUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGrenhouseInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Receive?: ReceiveUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SensorUpsertWithWhereUniqueWithoutGreenhouseInput = {
    where: SensorWhereUniqueInput
    update: XOR<SensorUpdateWithoutGreenhouseInput, SensorUncheckedUpdateWithoutGreenhouseInput>
    create: XOR<SensorCreateWithoutGreenhouseInput, SensorUncheckedCreateWithoutGreenhouseInput>
  }

  export type SensorUpdateWithWhereUniqueWithoutGreenhouseInput = {
    where: SensorWhereUniqueInput
    data: XOR<SensorUpdateWithoutGreenhouseInput, SensorUncheckedUpdateWithoutGreenhouseInput>
  }

  export type SensorUpdateManyWithWhereWithoutGreenhouseInput = {
    where: SensorScalarWhereInput
    data: XOR<SensorUpdateManyMutationInput, SensorUncheckedUpdateManyWithoutSensorInput>
  }

  export type SensorScalarWhereInput = {
    AND?: Enumerable<SensorScalarWhereInput>
    OR?: Enumerable<SensorScalarWhereInput>
    NOT?: Enumerable<SensorScalarWhereInput>
    id_sensor?: IntFilter | number
    name?: StringNullableFilter | string | null
    unit_measurement?: StringFilter | string
    brand?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    icon?: StringFilter | string
    color?: StringFilter | string
    id_greenhouse?: IntFilter | number
    range_min?: IntFilter | number
    range_max?: IntFilter | number
    id_category_sensor?: IntFilter | number
    notify?: BoolFilter | boolean
    calibration?: StringFilter | string
  }

  export type ActuatorUpsertWithWhereUniqueWithoutGreenhouseInput = {
    where: ActuatorWhereUniqueInput
    update: XOR<ActuatorUpdateWithoutGreenhouseInput, ActuatorUncheckedUpdateWithoutGreenhouseInput>
    create: XOR<ActuatorCreateWithoutGreenhouseInput, ActuatorUncheckedCreateWithoutGreenhouseInput>
  }

  export type ActuatorUpdateWithWhereUniqueWithoutGreenhouseInput = {
    where: ActuatorWhereUniqueInput
    data: XOR<ActuatorUpdateWithoutGreenhouseInput, ActuatorUncheckedUpdateWithoutGreenhouseInput>
  }

  export type ActuatorUpdateManyWithWhereWithoutGreenhouseInput = {
    where: ActuatorScalarWhereInput
    data: XOR<ActuatorUpdateManyMutationInput, ActuatorUncheckedUpdateManyWithoutActuatorInput>
  }

  export type ActuatorScalarWhereInput = {
    AND?: Enumerable<ActuatorScalarWhereInput>
    OR?: Enumerable<ActuatorScalarWhereInput>
    NOT?: Enumerable<ActuatorScalarWhereInput>
    id_actuator?: IntFilter | number
    name?: StringFilter | string
    status_lifecycle?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    icon?: StringFilter | string
    color?: StringFilter | string
    id_greenhouse?: IntFilter | number
  }

  export type GreenhouseCreateWithoutSensorInput = {
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutGrenhouseInput
    Actuator?: ActuatorCreateNestedManyWithoutGreenhouseInput
  }

  export type GreenhouseUncheckedCreateWithoutSensorInput = {
    id_grenhouse?: number
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
    id_user: number
    Actuator?: ActuatorUncheckedCreateNestedManyWithoutGreenhouseInput
  }

  export type GreenhouseCreateOrConnectWithoutSensorInput = {
    where: GreenhouseWhereUniqueInput
    create: XOR<GreenhouseCreateWithoutSensorInput, GreenhouseUncheckedCreateWithoutSensorInput>
  }

  export type CategorySensorCreateWithoutSensorInput = {
    name?: string | null
  }

  export type CategorySensorUncheckedCreateWithoutSensorInput = {
    id_category_sensor?: number
    name?: string | null
  }

  export type CategorySensorCreateOrConnectWithoutSensorInput = {
    where: CategorySensorWhereUniqueInput
    create: XOR<CategorySensorCreateWithoutSensorInput, CategorySensorUncheckedCreateWithoutSensorInput>
  }

  export type AutomationCreateWithoutSensorInput = {
    condition: string
    status_lifecycle: number
    created_at?: Date | string
    updated_at?: Date | string
    constanta: number
    sensorId_sensor?: number | null
    Actuator: ActuatorCreateNestedOneWithoutAutomationInput
  }

  export type AutomationUncheckedCreateWithoutSensorInput = {
    id_actuator: number
    condition: string
    status_lifecycle: number
    id_automation?: number
    created_at?: Date | string
    updated_at?: Date | string
    constanta: number
    sensorId_sensor?: number | null
  }

  export type AutomationCreateOrConnectWithoutSensorInput = {
    where: AutomationWhereUniqueInput
    create: XOR<AutomationCreateWithoutSensorInput, AutomationUncheckedCreateWithoutSensorInput>
  }

  export type AutomationCreateManySensorInputEnvelope = {
    data: Enumerable<AutomationCreateManySensorInput>
    skipDuplicates?: boolean
  }

  export type MacAddressCreateWithoutSensorInput = {
    mac_address: string
    actuator?: ActuatorCreateNestedOneWithoutMacAddressInput
  }

  export type MacAddressUncheckedCreateWithoutSensorInput = {
    id_actuator: number
    mac_address: string
    id_mac?: number
  }

  export type MacAddressCreateOrConnectWithoutSensorInput = {
    where: MacAddressWhereUniqueInput
    create: XOR<MacAddressCreateWithoutSensorInput, MacAddressUncheckedCreateWithoutSensorInput>
  }

  export type MacAddressCreateManySensorInputEnvelope = {
    data: Enumerable<MacAddressCreateManySensorInput>
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutSensorInput = {
    detail: string
    created_at?: Date | string
    type: string
    status: string
    actuator?: ActuatorCreateNestedOneWithoutNotificationInput
    Receive?: ReceiveCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutSensorInput = {
    id_notification?: number
    detail: string
    created_at?: Date | string
    type: string
    status: string
    id_actuator: number
    Receive?: ReceiveUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutSensorInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutSensorInput, NotificationUncheckedCreateWithoutSensorInput>
  }

  export type NotificationCreateManySensorInputEnvelope = {
    data: Enumerable<NotificationCreateManySensorInput>
    skipDuplicates?: boolean
  }

  export type GreenhouseUpsertWithoutSensorInput = {
    update: XOR<GreenhouseUpdateWithoutSensorInput, GreenhouseUncheckedUpdateWithoutSensorInput>
    create: XOR<GreenhouseCreateWithoutSensorInput, GreenhouseUncheckedCreateWithoutSensorInput>
  }

  export type GreenhouseUpdateWithoutSensorInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutGrenhouseNestedInput
    Actuator?: ActuatorUpdateManyWithoutGreenhouseNestedInput
  }

  export type GreenhouseUncheckedUpdateWithoutSensorInput = {
    id_grenhouse?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id_user?: IntFieldUpdateOperationsInput | number
    Actuator?: ActuatorUncheckedUpdateManyWithoutGreenhouseNestedInput
  }

  export type CategorySensorUpsertWithoutSensorInput = {
    update: XOR<CategorySensorUpdateWithoutSensorInput, CategorySensorUncheckedUpdateWithoutSensorInput>
    create: XOR<CategorySensorCreateWithoutSensorInput, CategorySensorUncheckedCreateWithoutSensorInput>
  }

  export type CategorySensorUpdateWithoutSensorInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategorySensorUncheckedUpdateWithoutSensorInput = {
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AutomationUpsertWithWhereUniqueWithoutSensorInput = {
    where: AutomationWhereUniqueInput
    update: XOR<AutomationUpdateWithoutSensorInput, AutomationUncheckedUpdateWithoutSensorInput>
    create: XOR<AutomationCreateWithoutSensorInput, AutomationUncheckedCreateWithoutSensorInput>
  }

  export type AutomationUpdateWithWhereUniqueWithoutSensorInput = {
    where: AutomationWhereUniqueInput
    data: XOR<AutomationUpdateWithoutSensorInput, AutomationUncheckedUpdateWithoutSensorInput>
  }

  export type AutomationUpdateManyWithWhereWithoutSensorInput = {
    where: AutomationScalarWhereInput
    data: XOR<AutomationUpdateManyMutationInput, AutomationUncheckedUpdateManyWithoutAutomationInput>
  }

  export type AutomationScalarWhereInput = {
    AND?: Enumerable<AutomationScalarWhereInput>
    OR?: Enumerable<AutomationScalarWhereInput>
    NOT?: Enumerable<AutomationScalarWhereInput>
    id_actuator?: IntFilter | number
    id_sensor?: IntFilter | number
    condition?: StringFilter | string
    status_lifecycle?: IntFilter | number
    id_automation?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    constanta?: IntFilter | number
    sensorId_sensor?: IntNullableFilter | number | null
  }

  export type MacAddressUpsertWithWhereUniqueWithoutSensorInput = {
    where: MacAddressWhereUniqueInput
    update: XOR<MacAddressUpdateWithoutSensorInput, MacAddressUncheckedUpdateWithoutSensorInput>
    create: XOR<MacAddressCreateWithoutSensorInput, MacAddressUncheckedCreateWithoutSensorInput>
  }

  export type MacAddressUpdateWithWhereUniqueWithoutSensorInput = {
    where: MacAddressWhereUniqueInput
    data: XOR<MacAddressUpdateWithoutSensorInput, MacAddressUncheckedUpdateWithoutSensorInput>
  }

  export type MacAddressUpdateManyWithWhereWithoutSensorInput = {
    where: MacAddressScalarWhereInput
    data: XOR<MacAddressUpdateManyMutationInput, MacAddressUncheckedUpdateManyWithoutMacAddressInput>
  }

  export type MacAddressScalarWhereInput = {
    AND?: Enumerable<MacAddressScalarWhereInput>
    OR?: Enumerable<MacAddressScalarWhereInput>
    NOT?: Enumerable<MacAddressScalarWhereInput>
    id_sensor?: IntFilter | number
    id_actuator?: IntFilter | number
    mac_address?: StringFilter | string
    id_mac?: IntFilter | number
  }

  export type NotificationUpsertWithWhereUniqueWithoutSensorInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutSensorInput, NotificationUncheckedUpdateWithoutSensorInput>
    create: XOR<NotificationCreateWithoutSensorInput, NotificationUncheckedCreateWithoutSensorInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutSensorInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutSensorInput, NotificationUncheckedUpdateWithoutSensorInput>
  }

  export type NotificationUpdateManyWithWhereWithoutSensorInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutNotificationInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: Enumerable<NotificationScalarWhereInput>
    OR?: Enumerable<NotificationScalarWhereInput>
    NOT?: Enumerable<NotificationScalarWhereInput>
    id_notification?: IntFilter | number
    detail?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    type?: StringFilter | string
    status?: StringFilter | string
    id_actuator?: IntFilter | number
    id_sensor?: IntFilter | number
  }

  export type SensorCreateWithoutCategorySensorInput = {
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    range_min: number
    range_max: number
    notify: boolean
    calibration: string
    greenhouse?: GreenhouseCreateNestedOneWithoutSensorInput
    automation?: AutomationCreateNestedManyWithoutSensorInput
    MacAddress?: MacAddressCreateNestedManyWithoutSensorInput
    Notification?: NotificationCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateWithoutCategorySensorInput = {
    id_sensor?: number
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    range_min: number
    range_max: number
    notify: boolean
    calibration: string
    automation?: AutomationUncheckedCreateNestedManyWithoutSensorInput
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutSensorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorCreateOrConnectWithoutCategorySensorInput = {
    where: SensorWhereUniqueInput
    create: XOR<SensorCreateWithoutCategorySensorInput, SensorUncheckedCreateWithoutCategorySensorInput>
  }

  export type SensorCreateManyCategorySensorInputEnvelope = {
    data: Enumerable<SensorCreateManyCategorySensorInput>
    skipDuplicates?: boolean
  }

  export type SensorUpsertWithWhereUniqueWithoutCategorySensorInput = {
    where: SensorWhereUniqueInput
    update: XOR<SensorUpdateWithoutCategorySensorInput, SensorUncheckedUpdateWithoutCategorySensorInput>
    create: XOR<SensorCreateWithoutCategorySensorInput, SensorUncheckedCreateWithoutCategorySensorInput>
  }

  export type SensorUpdateWithWhereUniqueWithoutCategorySensorInput = {
    where: SensorWhereUniqueInput
    data: XOR<SensorUpdateWithoutCategorySensorInput, SensorUncheckedUpdateWithoutCategorySensorInput>
  }

  export type SensorUpdateManyWithWhereWithoutCategorySensorInput = {
    where: SensorScalarWhereInput
    data: XOR<SensorUpdateManyMutationInput, SensorUncheckedUpdateManyWithoutSensorInput>
  }

  export type GreenhouseCreateWithoutActuatorInput = {
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutGrenhouseInput
    sensor?: SensorCreateNestedManyWithoutGreenhouseInput
  }

  export type GreenhouseUncheckedCreateWithoutActuatorInput = {
    id_grenhouse?: number
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
    id_user: number
    sensor?: SensorUncheckedCreateNestedManyWithoutGreenhouseInput
  }

  export type GreenhouseCreateOrConnectWithoutActuatorInput = {
    where: GreenhouseWhereUniqueInput
    create: XOR<GreenhouseCreateWithoutActuatorInput, GreenhouseUncheckedCreateWithoutActuatorInput>
  }

  export type AutomationCreateWithoutActuatorInput = {
    condition: string
    status_lifecycle: number
    created_at?: Date | string
    updated_at?: Date | string
    constanta: number
    sensorId_sensor?: number | null
    sensor?: SensorCreateNestedOneWithoutAutomationInput
  }

  export type AutomationUncheckedCreateWithoutActuatorInput = {
    id_sensor: number
    condition: string
    status_lifecycle: number
    id_automation?: number
    created_at?: Date | string
    updated_at?: Date | string
    constanta: number
    sensorId_sensor?: number | null
  }

  export type AutomationCreateOrConnectWithoutActuatorInput = {
    where: AutomationWhereUniqueInput
    create: XOR<AutomationCreateWithoutActuatorInput, AutomationUncheckedCreateWithoutActuatorInput>
  }

  export type AutomationCreateManyActuatorInputEnvelope = {
    data: Enumerable<AutomationCreateManyActuatorInput>
    skipDuplicates?: boolean
  }

  export type ActuatorLogCreateWithoutActuatorInput = {
    created_at?: Date | string
    on_off_status: boolean
    id_actuator: number
  }

  export type ActuatorLogUncheckedCreateWithoutActuatorInput = {
    id_actuator_log?: number
    created_at?: Date | string
    on_off_status: boolean
    id_actuator: number
  }

  export type ActuatorLogCreateOrConnectWithoutActuatorInput = {
    where: ActuatorLogWhereUniqueInput
    create: XOR<ActuatorLogCreateWithoutActuatorInput, ActuatorLogUncheckedCreateWithoutActuatorInput>
  }

  export type ActuatorLogCreateManyActuatorInputEnvelope = {
    data: Enumerable<ActuatorLogCreateManyActuatorInput>
    skipDuplicates?: boolean
  }

  export type MacAddressCreateWithoutActuatorInput = {
    mac_address: string
    sensor?: SensorCreateNestedOneWithoutMacAddressInput
  }

  export type MacAddressUncheckedCreateWithoutActuatorInput = {
    id_sensor: number
    mac_address: string
    id_mac?: number
  }

  export type MacAddressCreateOrConnectWithoutActuatorInput = {
    where: MacAddressWhereUniqueInput
    create: XOR<MacAddressCreateWithoutActuatorInput, MacAddressUncheckedCreateWithoutActuatorInput>
  }

  export type MacAddressCreateManyActuatorInputEnvelope = {
    data: Enumerable<MacAddressCreateManyActuatorInput>
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutActuatorInput = {
    detail: string
    created_at?: Date | string
    type: string
    status: string
    sensor?: SensorCreateNestedOneWithoutNotificationInput
    Receive?: ReceiveCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutActuatorInput = {
    id_notification?: number
    detail: string
    created_at?: Date | string
    type: string
    status: string
    id_sensor: number
    Receive?: ReceiveUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutActuatorInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutActuatorInput, NotificationUncheckedCreateWithoutActuatorInput>
  }

  export type NotificationCreateManyActuatorInputEnvelope = {
    data: Enumerable<NotificationCreateManyActuatorInput>
    skipDuplicates?: boolean
  }

  export type GreenhouseUpsertWithoutActuatorInput = {
    update: XOR<GreenhouseUpdateWithoutActuatorInput, GreenhouseUncheckedUpdateWithoutActuatorInput>
    create: XOR<GreenhouseCreateWithoutActuatorInput, GreenhouseUncheckedCreateWithoutActuatorInput>
  }

  export type GreenhouseUpdateWithoutActuatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutGrenhouseNestedInput
    sensor?: SensorUpdateManyWithoutGreenhouseNestedInput
  }

  export type GreenhouseUncheckedUpdateWithoutActuatorInput = {
    id_grenhouse?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id_user?: IntFieldUpdateOperationsInput | number
    sensor?: SensorUncheckedUpdateManyWithoutGreenhouseNestedInput
  }

  export type AutomationUpsertWithWhereUniqueWithoutActuatorInput = {
    where: AutomationWhereUniqueInput
    update: XOR<AutomationUpdateWithoutActuatorInput, AutomationUncheckedUpdateWithoutActuatorInput>
    create: XOR<AutomationCreateWithoutActuatorInput, AutomationUncheckedCreateWithoutActuatorInput>
  }

  export type AutomationUpdateWithWhereUniqueWithoutActuatorInput = {
    where: AutomationWhereUniqueInput
    data: XOR<AutomationUpdateWithoutActuatorInput, AutomationUncheckedUpdateWithoutActuatorInput>
  }

  export type AutomationUpdateManyWithWhereWithoutActuatorInput = {
    where: AutomationScalarWhereInput
    data: XOR<AutomationUpdateManyMutationInput, AutomationUncheckedUpdateManyWithoutAutomationInput>
  }

  export type ActuatorLogUpsertWithWhereUniqueWithoutActuatorInput = {
    where: ActuatorLogWhereUniqueInput
    update: XOR<ActuatorLogUpdateWithoutActuatorInput, ActuatorLogUncheckedUpdateWithoutActuatorInput>
    create: XOR<ActuatorLogCreateWithoutActuatorInput, ActuatorLogUncheckedCreateWithoutActuatorInput>
  }

  export type ActuatorLogUpdateWithWhereUniqueWithoutActuatorInput = {
    where: ActuatorLogWhereUniqueInput
    data: XOR<ActuatorLogUpdateWithoutActuatorInput, ActuatorLogUncheckedUpdateWithoutActuatorInput>
  }

  export type ActuatorLogUpdateManyWithWhereWithoutActuatorInput = {
    where: ActuatorLogScalarWhereInput
    data: XOR<ActuatorLogUpdateManyMutationInput, ActuatorLogUncheckedUpdateManyWithoutActuatorLogInput>
  }

  export type ActuatorLogScalarWhereInput = {
    AND?: Enumerable<ActuatorLogScalarWhereInput>
    OR?: Enumerable<ActuatorLogScalarWhereInput>
    NOT?: Enumerable<ActuatorLogScalarWhereInput>
    id_actuator_log?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    on_off_status?: BoolFilter | boolean
    id_actuator?: IntFilter | number
    actuatorId_actuator?: IntNullableFilter | number | null
  }

  export type MacAddressUpsertWithWhereUniqueWithoutActuatorInput = {
    where: MacAddressWhereUniqueInput
    update: XOR<MacAddressUpdateWithoutActuatorInput, MacAddressUncheckedUpdateWithoutActuatorInput>
    create: XOR<MacAddressCreateWithoutActuatorInput, MacAddressUncheckedCreateWithoutActuatorInput>
  }

  export type MacAddressUpdateWithWhereUniqueWithoutActuatorInput = {
    where: MacAddressWhereUniqueInput
    data: XOR<MacAddressUpdateWithoutActuatorInput, MacAddressUncheckedUpdateWithoutActuatorInput>
  }

  export type MacAddressUpdateManyWithWhereWithoutActuatorInput = {
    where: MacAddressScalarWhereInput
    data: XOR<MacAddressUpdateManyMutationInput, MacAddressUncheckedUpdateManyWithoutMacAddressInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutActuatorInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutActuatorInput, NotificationUncheckedUpdateWithoutActuatorInput>
    create: XOR<NotificationCreateWithoutActuatorInput, NotificationUncheckedCreateWithoutActuatorInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutActuatorInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutActuatorInput, NotificationUncheckedUpdateWithoutActuatorInput>
  }

  export type NotificationUpdateManyWithWhereWithoutActuatorInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutNotificationInput>
  }

  export type SensorCreateWithoutAutomationInput = {
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    range_min: number
    range_max: number
    notify: boolean
    calibration: string
    greenhouse?: GreenhouseCreateNestedOneWithoutSensorInput
    categorySensor?: CategorySensorCreateNestedOneWithoutSensorInput
    MacAddress?: MacAddressCreateNestedManyWithoutSensorInput
    Notification?: NotificationCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateWithoutAutomationInput = {
    id_sensor?: number
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    range_min: number
    range_max: number
    id_category_sensor: number
    notify: boolean
    calibration: string
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutSensorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorCreateOrConnectWithoutAutomationInput = {
    where: SensorWhereUniqueInput
    create: XOR<SensorCreateWithoutAutomationInput, SensorUncheckedCreateWithoutAutomationInput>
  }

  export type ActuatorCreateWithoutAutomationInput = {
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    greenhouse?: GreenhouseCreateNestedOneWithoutActuatorInput
    actuatorLog?: ActuatorLogCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressCreateNestedManyWithoutActuatorInput
    Notification?: NotificationCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorUncheckedCreateWithoutAutomationInput = {
    id_actuator?: number
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    actuatorLog?: ActuatorLogUncheckedCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutActuatorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorCreateOrConnectWithoutAutomationInput = {
    where: ActuatorWhereUniqueInput
    create: XOR<ActuatorCreateWithoutAutomationInput, ActuatorUncheckedCreateWithoutAutomationInput>
  }

  export type SensorUpsertWithoutAutomationInput = {
    update: XOR<SensorUpdateWithoutAutomationInput, SensorUncheckedUpdateWithoutAutomationInput>
    create: XOR<SensorCreateWithoutAutomationInput, SensorUncheckedCreateWithoutAutomationInput>
  }

  export type SensorUpdateWithoutAutomationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutSensorNestedInput
    categorySensor?: CategorySensorUpdateOneWithoutSensorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateWithoutAutomationInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    MacAddress?: MacAddressUncheckedUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type ActuatorUpsertWithoutAutomationInput = {
    update: XOR<ActuatorUpdateWithoutAutomationInput, ActuatorUncheckedUpdateWithoutAutomationInput>
    create: XOR<ActuatorCreateWithoutAutomationInput, ActuatorUncheckedCreateWithoutAutomationInput>
  }

  export type ActuatorUpdateWithoutAutomationInput = {
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutActuatorNestedInput
    actuatorLog?: ActuatorLogUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorUncheckedUpdateWithoutAutomationInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    actuatorLog?: ActuatorLogUncheckedUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUncheckedUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorCreateWithoutActuatorLogInput = {
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    greenhouse?: GreenhouseCreateNestedOneWithoutActuatorInput
    automation?: AutomationCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressCreateNestedManyWithoutActuatorInput
    Notification?: NotificationCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorUncheckedCreateWithoutActuatorLogInput = {
    id_actuator?: number
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    automation?: AutomationUncheckedCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutActuatorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorCreateOrConnectWithoutActuatorLogInput = {
    where: ActuatorWhereUniqueInput
    create: XOR<ActuatorCreateWithoutActuatorLogInput, ActuatorUncheckedCreateWithoutActuatorLogInput>
  }

  export type ActuatorUpsertWithoutActuatorLogInput = {
    update: XOR<ActuatorUpdateWithoutActuatorLogInput, ActuatorUncheckedUpdateWithoutActuatorLogInput>
    create: XOR<ActuatorCreateWithoutActuatorLogInput, ActuatorUncheckedCreateWithoutActuatorLogInput>
  }

  export type ActuatorUpdateWithoutActuatorLogInput = {
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutActuatorNestedInput
    automation?: AutomationUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorUncheckedUpdateWithoutActuatorLogInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    automation?: AutomationUncheckedUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUncheckedUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorCreateWithoutMacAddressInput = {
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    greenhouse?: GreenhouseCreateNestedOneWithoutActuatorInput
    automation?: AutomationCreateNestedManyWithoutActuatorInput
    actuatorLog?: ActuatorLogCreateNestedManyWithoutActuatorInput
    Notification?: NotificationCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorUncheckedCreateWithoutMacAddressInput = {
    id_actuator?: number
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    automation?: AutomationUncheckedCreateNestedManyWithoutActuatorInput
    actuatorLog?: ActuatorLogUncheckedCreateNestedManyWithoutActuatorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorCreateOrConnectWithoutMacAddressInput = {
    where: ActuatorWhereUniqueInput
    create: XOR<ActuatorCreateWithoutMacAddressInput, ActuatorUncheckedCreateWithoutMacAddressInput>
  }

  export type SensorCreateWithoutMacAddressInput = {
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    range_min: number
    range_max: number
    notify: boolean
    calibration: string
    greenhouse?: GreenhouseCreateNestedOneWithoutSensorInput
    categorySensor?: CategorySensorCreateNestedOneWithoutSensorInput
    automation?: AutomationCreateNestedManyWithoutSensorInput
    Notification?: NotificationCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateWithoutMacAddressInput = {
    id_sensor?: number
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    range_min: number
    range_max: number
    id_category_sensor: number
    notify: boolean
    calibration: string
    automation?: AutomationUncheckedCreateNestedManyWithoutSensorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorCreateOrConnectWithoutMacAddressInput = {
    where: SensorWhereUniqueInput
    create: XOR<SensorCreateWithoutMacAddressInput, SensorUncheckedCreateWithoutMacAddressInput>
  }

  export type ActuatorUpsertWithoutMacAddressInput = {
    update: XOR<ActuatorUpdateWithoutMacAddressInput, ActuatorUncheckedUpdateWithoutMacAddressInput>
    create: XOR<ActuatorCreateWithoutMacAddressInput, ActuatorUncheckedCreateWithoutMacAddressInput>
  }

  export type ActuatorUpdateWithoutMacAddressInput = {
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutActuatorNestedInput
    automation?: AutomationUpdateManyWithoutActuatorNestedInput
    actuatorLog?: ActuatorLogUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorUncheckedUpdateWithoutMacAddressInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    automation?: AutomationUncheckedUpdateManyWithoutActuatorNestedInput
    actuatorLog?: ActuatorLogUncheckedUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutActuatorNestedInput
  }

  export type SensorUpsertWithoutMacAddressInput = {
    update: XOR<SensorUpdateWithoutMacAddressInput, SensorUncheckedUpdateWithoutMacAddressInput>
    create: XOR<SensorCreateWithoutMacAddressInput, SensorUncheckedCreateWithoutMacAddressInput>
  }

  export type SensorUpdateWithoutMacAddressInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutSensorNestedInput
    categorySensor?: CategorySensorUpdateOneWithoutSensorNestedInput
    automation?: AutomationUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateWithoutMacAddressInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    automation?: AutomationUncheckedUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type ActuatorCreateWithoutNotificationInput = {
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    greenhouse?: GreenhouseCreateNestedOneWithoutActuatorInput
    automation?: AutomationCreateNestedManyWithoutActuatorInput
    actuatorLog?: ActuatorLogCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorUncheckedCreateWithoutNotificationInput = {
    id_actuator?: number
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    automation?: AutomationUncheckedCreateNestedManyWithoutActuatorInput
    actuatorLog?: ActuatorLogUncheckedCreateNestedManyWithoutActuatorInput
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutActuatorInput
  }

  export type ActuatorCreateOrConnectWithoutNotificationInput = {
    where: ActuatorWhereUniqueInput
    create: XOR<ActuatorCreateWithoutNotificationInput, ActuatorUncheckedCreateWithoutNotificationInput>
  }

  export type SensorCreateWithoutNotificationInput = {
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    range_min: number
    range_max: number
    notify: boolean
    calibration: string
    greenhouse?: GreenhouseCreateNestedOneWithoutSensorInput
    categorySensor?: CategorySensorCreateNestedOneWithoutSensorInput
    automation?: AutomationCreateNestedManyWithoutSensorInput
    MacAddress?: MacAddressCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateWithoutNotificationInput = {
    id_sensor?: number
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    range_min: number
    range_max: number
    id_category_sensor: number
    notify: boolean
    calibration: string
    automation?: AutomationUncheckedCreateNestedManyWithoutSensorInput
    MacAddress?: MacAddressUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorCreateOrConnectWithoutNotificationInput = {
    where: SensorWhereUniqueInput
    create: XOR<SensorCreateWithoutNotificationInput, SensorUncheckedCreateWithoutNotificationInput>
  }

  export type ReceiveCreateWithoutNotificationInput = {
    user?: UserCreateNestedOneWithoutReceiveInput
  }

  export type ReceiveUncheckedCreateWithoutNotificationInput = {
    id_user: number
    id_receive?: number
  }

  export type ReceiveCreateOrConnectWithoutNotificationInput = {
    where: ReceiveWhereUniqueInput
    create: XOR<ReceiveCreateWithoutNotificationInput, ReceiveUncheckedCreateWithoutNotificationInput>
  }

  export type ReceiveCreateManyNotificationInputEnvelope = {
    data: Enumerable<ReceiveCreateManyNotificationInput>
    skipDuplicates?: boolean
  }

  export type ActuatorUpsertWithoutNotificationInput = {
    update: XOR<ActuatorUpdateWithoutNotificationInput, ActuatorUncheckedUpdateWithoutNotificationInput>
    create: XOR<ActuatorCreateWithoutNotificationInput, ActuatorUncheckedCreateWithoutNotificationInput>
  }

  export type ActuatorUpdateWithoutNotificationInput = {
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutActuatorNestedInput
    automation?: AutomationUpdateManyWithoutActuatorNestedInput
    actuatorLog?: ActuatorLogUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorUncheckedUpdateWithoutNotificationInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    automation?: AutomationUncheckedUpdateManyWithoutActuatorNestedInput
    actuatorLog?: ActuatorLogUncheckedUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUncheckedUpdateManyWithoutActuatorNestedInput
  }

  export type SensorUpsertWithoutNotificationInput = {
    update: XOR<SensorUpdateWithoutNotificationInput, SensorUncheckedUpdateWithoutNotificationInput>
    create: XOR<SensorCreateWithoutNotificationInput, SensorUncheckedCreateWithoutNotificationInput>
  }

  export type SensorUpdateWithoutNotificationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutSensorNestedInput
    categorySensor?: CategorySensorUpdateOneWithoutSensorNestedInput
    automation?: AutomationUpdateManyWithoutSensorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateWithoutNotificationInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    automation?: AutomationUncheckedUpdateManyWithoutSensorNestedInput
    MacAddress?: MacAddressUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type ReceiveUpsertWithWhereUniqueWithoutNotificationInput = {
    where: ReceiveWhereUniqueInput
    update: XOR<ReceiveUpdateWithoutNotificationInput, ReceiveUncheckedUpdateWithoutNotificationInput>
    create: XOR<ReceiveCreateWithoutNotificationInput, ReceiveUncheckedCreateWithoutNotificationInput>
  }

  export type ReceiveUpdateWithWhereUniqueWithoutNotificationInput = {
    where: ReceiveWhereUniqueInput
    data: XOR<ReceiveUpdateWithoutNotificationInput, ReceiveUncheckedUpdateWithoutNotificationInput>
  }

  export type ReceiveUpdateManyWithWhereWithoutNotificationInput = {
    where: ReceiveScalarWhereInput
    data: XOR<ReceiveUpdateManyMutationInput, ReceiveUncheckedUpdateManyWithoutReceiveInput>
  }

  export type UserCreateWithoutReceiveInput = {
    email: string
    name?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    grenhouse?: GreenhouseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceiveInput = {
    id_user?: number
    email: string
    name?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    grenhouse?: GreenhouseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceiveInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceiveInput, UserUncheckedCreateWithoutReceiveInput>
  }

  export type NotificationCreateWithoutReceiveInput = {
    detail: string
    created_at?: Date | string
    type: string
    status: string
    actuator?: ActuatorCreateNestedOneWithoutNotificationInput
    sensor?: SensorCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutReceiveInput = {
    id_notification?: number
    detail: string
    created_at?: Date | string
    type: string
    status: string
    id_actuator: number
    id_sensor: number
  }

  export type NotificationCreateOrConnectWithoutReceiveInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutReceiveInput, NotificationUncheckedCreateWithoutReceiveInput>
  }

  export type UserUpsertWithoutReceiveInput = {
    update: XOR<UserUpdateWithoutReceiveInput, UserUncheckedUpdateWithoutReceiveInput>
    create: XOR<UserCreateWithoutReceiveInput, UserUncheckedCreateWithoutReceiveInput>
  }

  export type UserUpdateWithoutReceiveInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grenhouse?: GreenhouseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceiveInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grenhouse?: GreenhouseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NotificationUpsertWithoutReceiveInput = {
    update: XOR<NotificationUpdateWithoutReceiveInput, NotificationUncheckedUpdateWithoutReceiveInput>
    create: XOR<NotificationCreateWithoutReceiveInput, NotificationUncheckedCreateWithoutReceiveInput>
  }

  export type NotificationUpdateWithoutReceiveInput = {
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    actuator?: ActuatorUpdateOneWithoutNotificationNestedInput
    sensor?: SensorUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutReceiveInput = {
    id_notification?: IntFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_actuator?: IntFieldUpdateOperationsInput | number
    id_sensor?: IntFieldUpdateOperationsInput | number
  }

  export type GreenhouseCreateManyUserInput = {
    id_grenhouse?: number
    name: string
    image: string
    location: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReceiveCreateManyUserInput = {
    id_notification: number
    id_receive?: number
  }

  export type GreenhouseUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sensor?: SensorUpdateManyWithoutGreenhouseNestedInput
    Actuator?: ActuatorUpdateManyWithoutGreenhouseNestedInput
  }

  export type GreenhouseUncheckedUpdateWithoutUserInput = {
    id_grenhouse?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sensor?: SensorUncheckedUpdateManyWithoutGreenhouseNestedInput
    Actuator?: ActuatorUncheckedUpdateManyWithoutGreenhouseNestedInput
  }

  export type GreenhouseUncheckedUpdateManyWithoutGrenhouseInput = {
    id_grenhouse?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiveUpdateWithoutUserInput = {
    notification?: NotificationUpdateOneWithoutReceiveNestedInput
  }

  export type ReceiveUncheckedUpdateWithoutUserInput = {
    id_notification?: IntFieldUpdateOperationsInput | number
    id_receive?: IntFieldUpdateOperationsInput | number
  }

  export type ReceiveUncheckedUpdateManyWithoutReceiveInput = {
    id_notification?: IntFieldUpdateOperationsInput | number
    id_receive?: IntFieldUpdateOperationsInput | number
  }

  export type SensorCreateManyGreenhouseInput = {
    id_sensor?: number
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    range_min: number
    range_max: number
    id_category_sensor: number
    notify: boolean
    calibration: string
  }

  export type ActuatorCreateManyGreenhouseInput = {
    id_actuator?: number
    name: string
    status_lifecycle: boolean
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
  }

  export type SensorUpdateWithoutGreenhouseInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    categorySensor?: CategorySensorUpdateOneWithoutSensorNestedInput
    automation?: AutomationUpdateManyWithoutSensorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateWithoutGreenhouseInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    automation?: AutomationUncheckedUpdateManyWithoutSensorNestedInput
    MacAddress?: MacAddressUncheckedUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateManyWithoutSensorInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    id_category_sensor?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
  }

  export type ActuatorUpdateWithoutGreenhouseInput = {
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    automation?: AutomationUpdateManyWithoutActuatorNestedInput
    actuatorLog?: ActuatorLogUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorUncheckedUpdateWithoutGreenhouseInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    automation?: AutomationUncheckedUpdateManyWithoutActuatorNestedInput
    actuatorLog?: ActuatorLogUncheckedUpdateManyWithoutActuatorNestedInput
    MacAddress?: MacAddressUncheckedUpdateManyWithoutActuatorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutActuatorNestedInput
  }

  export type ActuatorUncheckedUpdateManyWithoutActuatorInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type AutomationCreateManySensorInput = {
    id_actuator: number
    condition: string
    status_lifecycle: number
    id_automation?: number
    created_at?: Date | string
    updated_at?: Date | string
    constanta: number
    sensorId_sensor?: number | null
  }

  export type MacAddressCreateManySensorInput = {
    id_actuator: number
    mac_address: string
    id_mac?: number
  }

  export type NotificationCreateManySensorInput = {
    id_notification?: number
    detail: string
    created_at?: Date | string
    type: string
    status: string
    id_actuator: number
  }

  export type AutomationUpdateWithoutSensorInput = {
    condition?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    constanta?: IntFieldUpdateOperationsInput | number
    sensorId_sensor?: NullableIntFieldUpdateOperationsInput | number | null
    Actuator?: ActuatorUpdateOneRequiredWithoutAutomationNestedInput
  }

  export type AutomationUncheckedUpdateWithoutSensorInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: IntFieldUpdateOperationsInput | number
    id_automation?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    constanta?: IntFieldUpdateOperationsInput | number
    sensorId_sensor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AutomationUncheckedUpdateManyWithoutAutomationInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: IntFieldUpdateOperationsInput | number
    id_automation?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    constanta?: IntFieldUpdateOperationsInput | number
    sensorId_sensor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MacAddressUpdateWithoutSensorInput = {
    mac_address?: StringFieldUpdateOperationsInput | string
    actuator?: ActuatorUpdateOneWithoutMacAddressNestedInput
  }

  export type MacAddressUncheckedUpdateWithoutSensorInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    mac_address?: StringFieldUpdateOperationsInput | string
    id_mac?: IntFieldUpdateOperationsInput | number
  }

  export type MacAddressUncheckedUpdateManyWithoutMacAddressInput = {
    id_actuator?: IntFieldUpdateOperationsInput | number
    mac_address?: StringFieldUpdateOperationsInput | string
    id_mac?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationUpdateWithoutSensorInput = {
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    actuator?: ActuatorUpdateOneWithoutNotificationNestedInput
    Receive?: ReceiveUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutSensorInput = {
    id_notification?: IntFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_actuator?: IntFieldUpdateOperationsInput | number
    Receive?: ReceiveUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateManyWithoutNotificationInput = {
    id_notification?: IntFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_actuator?: IntFieldUpdateOperationsInput | number
  }

  export type SensorCreateManyCategorySensorInput = {
    id_sensor?: number
    name?: string | null
    unit_measurement: string
    brand: number
    created_at?: Date | string
    updated_at?: Date | string
    icon: string
    color: string
    id_greenhouse: number
    range_min: number
    range_max: number
    notify: boolean
    calibration: string
  }

  export type SensorUpdateWithoutCategorySensorInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    greenhouse?: GreenhouseUpdateOneWithoutSensorNestedInput
    automation?: AutomationUpdateManyWithoutSensorNestedInput
    MacAddress?: MacAddressUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateWithoutCategorySensorInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    unit_measurement?: StringFieldUpdateOperationsInput | string
    brand?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    icon?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    id_greenhouse?: IntFieldUpdateOperationsInput | number
    range_min?: IntFieldUpdateOperationsInput | number
    range_max?: IntFieldUpdateOperationsInput | number
    notify?: BoolFieldUpdateOperationsInput | boolean
    calibration?: StringFieldUpdateOperationsInput | string
    automation?: AutomationUncheckedUpdateManyWithoutSensorNestedInput
    MacAddress?: MacAddressUncheckedUpdateManyWithoutSensorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type AutomationCreateManyActuatorInput = {
    id_sensor: number
    condition: string
    status_lifecycle: number
    id_automation?: number
    created_at?: Date | string
    updated_at?: Date | string
    constanta: number
    sensorId_sensor?: number | null
  }

  export type ActuatorLogCreateManyActuatorInput = {
    id_actuator_log?: number
    created_at?: Date | string
    on_off_status: boolean
    id_actuator: number
  }

  export type MacAddressCreateManyActuatorInput = {
    id_sensor: number
    mac_address: string
    id_mac?: number
  }

  export type NotificationCreateManyActuatorInput = {
    id_notification?: number
    detail: string
    created_at?: Date | string
    type: string
    status: string
    id_sensor: number
  }

  export type AutomationUpdateWithoutActuatorInput = {
    condition?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    constanta?: IntFieldUpdateOperationsInput | number
    sensorId_sensor?: NullableIntFieldUpdateOperationsInput | number | null
    sensor?: SensorUpdateOneWithoutAutomationNestedInput
  }

  export type AutomationUncheckedUpdateWithoutActuatorInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    condition?: StringFieldUpdateOperationsInput | string
    status_lifecycle?: IntFieldUpdateOperationsInput | number
    id_automation?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    constanta?: IntFieldUpdateOperationsInput | number
    sensorId_sensor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ActuatorLogUpdateWithoutActuatorInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    on_off_status?: BoolFieldUpdateOperationsInput | boolean
    id_actuator?: IntFieldUpdateOperationsInput | number
  }

  export type ActuatorLogUncheckedUpdateWithoutActuatorInput = {
    id_actuator_log?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    on_off_status?: BoolFieldUpdateOperationsInput | boolean
    id_actuator?: IntFieldUpdateOperationsInput | number
  }

  export type ActuatorLogUncheckedUpdateManyWithoutActuatorLogInput = {
    id_actuator_log?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    on_off_status?: BoolFieldUpdateOperationsInput | boolean
    id_actuator?: IntFieldUpdateOperationsInput | number
  }

  export type MacAddressUpdateWithoutActuatorInput = {
    mac_address?: StringFieldUpdateOperationsInput | string
    sensor?: SensorUpdateOneWithoutMacAddressNestedInput
  }

  export type MacAddressUncheckedUpdateWithoutActuatorInput = {
    id_sensor?: IntFieldUpdateOperationsInput | number
    mac_address?: StringFieldUpdateOperationsInput | string
    id_mac?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationUpdateWithoutActuatorInput = {
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sensor?: SensorUpdateOneWithoutNotificationNestedInput
    Receive?: ReceiveUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutActuatorInput = {
    id_notification?: IntFieldUpdateOperationsInput | number
    detail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    id_sensor?: IntFieldUpdateOperationsInput | number
    Receive?: ReceiveUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type ReceiveCreateManyNotificationInput = {
    id_user: number
    id_receive?: number
  }

  export type ReceiveUpdateWithoutNotificationInput = {
    user?: UserUpdateOneWithoutReceiveNestedInput
  }

  export type ReceiveUncheckedUpdateWithoutNotificationInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    id_receive?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}