// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user    Int          @id @default(autoincrement())
  email      String       @unique
  name       String?
  password   String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  grenhouse  Greenhouse[]
  Receive    Receive[]
}

model Greenhouse {
  id_grenhouse Int        @id @default(autoincrement())
  name         String
  image        String
  location     String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  id_user      Int
  user         User?      @relation(fields: [id_user], references: [id_user])
  sensor       Sensor[]
  Actuator     Actuator[]
}

model Sensor {
  id_sensor          Int             @id @default(autoincrement())
  name               String?
  unit_measurement   String
  brand              Int             @unique
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  icon               String
  color              String
  greenhouse         Greenhouse?     @relation(fields: [id_greenhouse], references: [id_grenhouse])
  id_greenhouse      Int
  range_min          Int
  range_max          Int
  id_category_sensor Int
  categorySensor     CategorySensor? @relation(fields: [id_category_sensor], references: [id_category_sensor])
  notify             Boolean
  calibration        String
  automation         Automation[]
  MacAddress         MacAddress[]
  Notification       Notification[]
}

model CategorySensor {
  id_category_sensor Int      @id @default(autoincrement())
  name               String?
  Sensor             Sensor[]
}

model Actuator {
  id_actuator      Int            @id @default(autoincrement())
  name             String
  status_lifecycle Boolean
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  icon             String
  color            String
  greenhouse       Greenhouse?    @relation(fields: [id_greenhouse], references: [id_grenhouse])
  id_greenhouse    Int
  automation       Automation[]
  actuatorLog      ActuatorLog[]
  MacAddress       MacAddress[]
  Notification     Notification[]
}

model Automation {
  id_actuator      Int
  id_sensor        Int
  condition        String
  status_lifecycle Int
  id_automation    Int      @id @default(autoincrement())
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  constanta        Int
  sensor           Sensor?  @relation(fields: [id_sensor], references: [id_sensor])
  sensorId_sensor  Int?
  Actuator         Actuator @relation(fields: [id_actuator], references: [id_actuator])
}

model ActuatorLog {
  id_actuator_log     Int       @id @default(autoincrement())
  created_at          DateTime  @default(now())
  on_off_status       Boolean
  id_actuator         Int
  Actuator            Actuator? @relation(fields: [actuatorId_actuator], references: [id_actuator])
  actuatorId_actuator Int?
}

model Icon {
  id_icon Int    @id @default(autoincrement())
  name    String
  icon    String
  type    String
  color   String
}

model MacAddress {
  id_sensor   Int
  id_actuator Int
  actuator    Actuator? @relation(fields: [id_actuator], references: [id_actuator])
  sensor      Sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  mac_address String
  id_mac      Int       @id @default(autoincrement())
}

model Notification {
  id_notification Int       @id @default(autoincrement())
  detail          String
  created_at      DateTime  @default(now())
  type            String
  status          String
  id_actuator     Int
  id_sensor       Int
  actuator        Actuator? @relation(fields: [id_actuator], references: [id_actuator])
  sensor          Sensor?   @relation(fields: [id_sensor], references: [id_sensor])
  Receive         Receive[]
}

model Receive {
  id_user         Int
  id_notification Int
  id_receive      Int           @id @default(autoincrement())
  user            User?         @relation(fields: [id_user], references: [id_user])
  notification    Notification? @relation(fields: [id_notification], references: [id_notification])
}
